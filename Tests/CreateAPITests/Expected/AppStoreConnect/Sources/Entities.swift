// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

public struct AgeRatingDeclaration: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ageRatingDeclarations
    }

    public struct Attributes: Codable {
        public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?
        public var contests: Contests?
        /// - warning: Deprecated.
        public var isGamblingAndContests: Bool?
        public var isGambling: Bool?
        public var gamblingSimulated: GamblingSimulated?
        public var kidsAgeBand: KidsAgeBand?
        public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?
        public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?
        public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?
        public var sexualContentOrNudity: SexualContentOrNudity?
        public var isSeventeenPlus: Bool?
        public var horrorOrFearThemes: HorrorOrFearThemes?
        public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?
        public var isUnrestrictedWebAccess: Bool?
        public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?
        public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?
        public var violenceRealistic: ViolenceRealistic?

        public enum AlcoholTobaccoOrDrugUseOrReferences: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum Contests: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum GamblingSimulated: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MedicalOrTreatmentInformation: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ProfanityOrCrudeHumor: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentGraphicAndNudity: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentOrNudity: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum HorrorOrFearThemes: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MatureOrSuggestiveThemes: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceCartoonOrFantasy: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealisticProlongedGraphicOrSadistic: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealistic: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public init(alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil, contests: Contests? = nil, isGamblingAndContests: Bool? = nil, isGambling: Bool? = nil, gamblingSimulated: GamblingSimulated? = nil, kidsAgeBand: KidsAgeBand? = nil, medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil, profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil, sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil, sexualContentOrNudity: SexualContentOrNudity? = nil, isSeventeenPlus: Bool? = nil, horrorOrFearThemes: HorrorOrFearThemes? = nil, matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil, isUnrestrictedWebAccess: Bool? = nil, violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil, violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil, violenceRealistic: ViolenceRealistic? = nil) {
            self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
            self.contests = contests
            self.isGamblingAndContests = isGamblingAndContests
            self.isGambling = isGambling
            self.gamblingSimulated = gamblingSimulated
            self.kidsAgeBand = kidsAgeBand
            self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
            self.profanityOrCrudeHumor = profanityOrCrudeHumor
            self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
            self.sexualContentOrNudity = sexualContentOrNudity
            self.isSeventeenPlus = isSeventeenPlus
            self.horrorOrFearThemes = horrorOrFearThemes
            self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
            self.isUnrestrictedWebAccess = isUnrestrictedWebAccess
            self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
            self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
            self.violenceRealistic = violenceRealistic
        }

        private enum CodingKeys: String, CodingKey {
            case alcoholTobaccoOrDrugUseOrReferences
            case contests
            case isGamblingAndContests = "gamblingAndContests"
            case isGambling = "gambling"
            case gamblingSimulated
            case kidsAgeBand
            case medicalOrTreatmentInformation
            case profanityOrCrudeHumor
            case sexualContentGraphicAndNudity
            case sexualContentOrNudity
            case isSeventeenPlus = "seventeenPlus"
            case horrorOrFearThemes
            case matureOrSuggestiveThemes
            case isUnrestrictedWebAccess = "unrestrictedWebAccess"
            case violenceCartoonOrFantasy
            case violenceRealisticProlongedGraphicOrSadistic
            case violenceRealistic
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AgeRatingDeclarationResponse: Codable {
    /// AgeRatingDeclaration
    public var data: AgeRatingDeclaration
    public var links: DocumentLinks

    public init(data: AgeRatingDeclaration, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AgeRatingDeclarationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case ageRatingDeclarations
        }

        public struct Attributes: Codable {
            public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?
            public var contests: Contests?
            /// - warning: Deprecated.
            public var isGamblingAndContests: Bool?
            public var isGambling: Bool?
            public var gamblingSimulated: GamblingSimulated?
            public var kidsAgeBand: KidsAgeBand?
            public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?
            public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?
            public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?
            public var sexualContentOrNudity: SexualContentOrNudity?
            public var isSeventeenPlus: Bool?
            public var horrorOrFearThemes: HorrorOrFearThemes?
            public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?
            public var isUnrestrictedWebAccess: Bool?
            public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?
            public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?
            public var violenceRealistic: ViolenceRealistic?

            public enum AlcoholTobaccoOrDrugUseOrReferences: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum Contests: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum GamblingSimulated: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum MedicalOrTreatmentInformation: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ProfanityOrCrudeHumor: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum SexualContentGraphicAndNudity: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum SexualContentOrNudity: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum HorrorOrFearThemes: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum MatureOrSuggestiveThemes: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceCartoonOrFantasy: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceRealisticProlongedGraphicOrSadistic: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceRealistic: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public init(alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil, contests: Contests? = nil, isGamblingAndContests: Bool? = nil, isGambling: Bool? = nil, gamblingSimulated: GamblingSimulated? = nil, kidsAgeBand: KidsAgeBand? = nil, medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil, profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil, sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil, sexualContentOrNudity: SexualContentOrNudity? = nil, isSeventeenPlus: Bool? = nil, horrorOrFearThemes: HorrorOrFearThemes? = nil, matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil, isUnrestrictedWebAccess: Bool? = nil, violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil, violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil, violenceRealistic: ViolenceRealistic? = nil) {
                self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
                self.contests = contests
                self.isGamblingAndContests = isGamblingAndContests
                self.isGambling = isGambling
                self.gamblingSimulated = gamblingSimulated
                self.kidsAgeBand = kidsAgeBand
                self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
                self.profanityOrCrudeHumor = profanityOrCrudeHumor
                self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
                self.sexualContentOrNudity = sexualContentOrNudity
                self.isSeventeenPlus = isSeventeenPlus
                self.horrorOrFearThemes = horrorOrFearThemes
                self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
                self.isUnrestrictedWebAccess = isUnrestrictedWebAccess
                self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
                self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
                self.violenceRealistic = violenceRealistic
            }

            private enum CodingKeys: String, CodingKey {
                case alcoholTobaccoOrDrugUseOrReferences
                case contests
                case isGamblingAndContests = "gamblingAndContests"
                case isGambling = "gambling"
                case gamblingSimulated
                case kidsAgeBand
                case medicalOrTreatmentInformation
                case profanityOrCrudeHumor
                case sexualContentGraphicAndNudity
                case sexualContentOrNudity
                case isSeventeenPlus = "seventeenPlus"
                case horrorOrFearThemes
                case matureOrSuggestiveThemes
                case isUnrestrictedWebAccess = "unrestrictedWebAccess"
                case violenceCartoonOrFantasy
                case violenceRealisticProlongedGraphicOrSadistic
                case violenceRealistic
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppCategory: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appCategories
    }

    public struct Attributes: Codable {
        public var platforms: [Platform]?

        public init(platforms: [Platform]? = nil) {
            self.platforms = platforms
        }
    }

    public struct Relationships: Codable {
        public var subcategories: Subcategories?
        public var parent: Parent?

        public struct Subcategories: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Parent: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(subcategories: Subcategories? = nil, parent: Parent? = nil) {
            self.subcategories = subcategories
            self.parent = parent
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppCategoriesResponse: Codable {
    public var data: [AppCategory]
    public var included: [AppCategory]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppCategory], included: [AppCategory]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppCategoryResponse: Codable {
    /// AppCategory
    public var data: AppCategory
    public var included: [AppCategory]?
    public var links: DocumentLinks

    public init(data: AppCategory, included: [AppCategory]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppClipAdvancedExperienceImage: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperienceImages
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var sourceFileChecksum: String?
        public var imageAsset: ImageAsset?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?

        public init(fileSize: Int? = nil, fileName: String? = nil, sourceFileChecksum: String? = nil, imageAsset: ImageAsset? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.sourceFileChecksum = sourceFileChecksum
            self.imageAsset = imageAsset
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AppClipAdvancedExperienceImageResponse: Codable {
    /// AppClipAdvancedExperienceImage
    public var data: AppClipAdvancedExperienceImage
    public var links: DocumentLinks

    public init(data: AppClipAdvancedExperienceImage, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppClipAdvancedExperienceImageCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperienceImages
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public init(type: `Type`, attributes: Attributes) {
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipAdvancedExperienceImageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperienceImages
        }

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipAdvancedExperienceLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperienceLocalizations
    }

    public struct Attributes: Codable {
        public var language: AppClipAdvancedExperienceLanguage?
        public var title: String?
        public var subtitle: String?

        public init(language: AppClipAdvancedExperienceLanguage? = nil, title: String? = nil, subtitle: String? = nil) {
            self.language = language
            self.title = title
            self.subtitle = subtitle
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AppClipAdvancedExperienceLocalizationInlineCreate: Codable {
    public var type: `Type`
    public var id: String?
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperienceLocalizations
    }

    public struct Attributes: Codable {
        public var language: AppClipAdvancedExperienceLanguage?
        public var title: String?
        public var subtitle: String?

        public init(language: AppClipAdvancedExperienceLanguage? = nil, title: String? = nil, subtitle: String? = nil) {
            self.language = language
            self.title = title
            self.subtitle = subtitle
        }
    }

    public init(type: `Type`, id: String? = nil, attributes: Attributes? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
    }
}

public struct AppClipAdvancedExperience: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperiences
    }

    public struct Attributes: Codable {
        public var link: URL?
        public var version: Int?
        public var status: Status?
        public var action: AppClipAction?
        public var isPoweredBy: Bool?
        public var place: Place?
        public var placeStatus: PlaceStatus?
        public var businessCategory: BusinessCategory?
        public var defaultLanguage: AppClipAdvancedExperienceLanguage?

        public enum Status: String, Codable, CaseIterable {
            case received = "RECEIVED"
            case deactivated = "DEACTIVATED"
            case appTransferInProgress = "APP_TRANSFER_IN_PROGRESS"
        }

        public struct Place: Codable {
            public var placeID: String?
            public var names: [String]?
            public var mainAddress: MainAddress?
            public var displayPoint: DisplayPoint?
            public var mapAction: MapAction?
            public var relationship: Relationship?
            public var phoneNumber: PhoneNumber?
            public var homePage: String?
            public var categories: [String]?

            public struct MainAddress: Codable {
                public var fullAddress: String?
                public var structuredAddress: StructuredAddress?

                public struct StructuredAddress: Codable {
                    public var streetAddress: [String]?
                    public var floor: String?
                    public var neighborhood: String?
                    public var locality: String?
                    public var stateProvince: String?
                    public var postalCode: String?
                    public var countryCode: String?

                    public init(streetAddress: [String]? = nil, floor: String? = nil, neighborhood: String? = nil, locality: String? = nil, stateProvince: String? = nil, postalCode: String? = nil, countryCode: String? = nil) {
                        self.streetAddress = streetAddress
                        self.floor = floor
                        self.neighborhood = neighborhood
                        self.locality = locality
                        self.stateProvince = stateProvince
                        self.postalCode = postalCode
                        self.countryCode = countryCode
                    }
                }

                public init(fullAddress: String? = nil, structuredAddress: StructuredAddress? = nil) {
                    self.fullAddress = fullAddress
                    self.structuredAddress = structuredAddress
                }
            }

            public struct DisplayPoint: Codable {
                public var coordinates: Coordinates?
                public var source: Source?

                public struct Coordinates: Codable {
                    public var latitude: Double?
                    public var longitude: Double?

                    public init(latitude: Double? = nil, longitude: Double? = nil) {
                        self.latitude = latitude
                        self.longitude = longitude
                    }
                }

                public enum Source: String, Codable, CaseIterable {
                    case calculated = "CALCULATED"
                    case manuallyPlaced = "MANUALLY_PLACED"
                }

                public init(coordinates: Coordinates? = nil, source: Source? = nil) {
                    self.coordinates = coordinates
                    self.source = source
                }
            }

            public enum MapAction: String, Codable, CaseIterable {
                case buyTickets = "BUY_TICKETS"
                case viewAvailability = "VIEW_AVAILABILITY"
                case viewPricing = "VIEW_PRICING"
                case hotelBookRoom = "HOTEL_BOOK_ROOM"
                case parkingReserveParking = "PARKING_RESERVE_PARKING"
                case restaurantJoinWaitlist = "RESTAURANT_JOIN_WAITLIST"
                case restaurantOrderDelivery = "RESTAURANT_ORDER_DELIVERY"
                case restaurantOrderFood = "RESTAURANT_ORDER_FOOD"
                case restaurantOrderTakeout = "RESTAURANT_ORDER_TAKEOUT"
                case restaurantReservation = "RESTAURANT_RESERVATION"
                case scheduleAppointment = "SCHEDULE_APPOINTMENT"
                case restaurantViewMenu = "RESTAURANT_VIEW_MENU"
                case theaterNowPlaying = "THEATER_NOW_PLAYING"
            }

            public enum Relationship: String, Codable, CaseIterable {
                case owner = "OWNER"
                case authorized = "AUTHORIZED"
                case other = "OTHER"
            }

            public struct PhoneNumber: Codable {
                public var number: String?
                public var type: `Type`?
                public var intent: String?

                public enum `Type`: String, Codable, CaseIterable {
                    case fax = "FAX"
                    case landline = "LANDLINE"
                    case mobile = "MOBILE"
                    case tollfree = "TOLLFREE"
                }

                public init(number: String? = nil, type: `Type`? = nil, intent: String? = nil) {
                    self.number = number
                    self.type = type
                    self.intent = intent
                }
            }

            public init(placeID: String? = nil, names: [String]? = nil, mainAddress: MainAddress? = nil, displayPoint: DisplayPoint? = nil, mapAction: MapAction? = nil, relationship: Relationship? = nil, phoneNumber: PhoneNumber? = nil, homePage: String? = nil, categories: [String]? = nil) {
                self.placeID = placeID
                self.names = names
                self.mainAddress = mainAddress
                self.displayPoint = displayPoint
                self.mapAction = mapAction
                self.relationship = relationship
                self.phoneNumber = phoneNumber
                self.homePage = homePage
                self.categories = categories
            }

            private enum CodingKeys: String, CodingKey {
                case placeID = "placeId"
                case names
                case mainAddress
                case displayPoint
                case mapAction
                case relationship
                case phoneNumber
                case homePage
                case categories
            }
        }

        public enum PlaceStatus: String, Codable, CaseIterable {
            case pending = "PENDING"
            case matched = "MATCHED"
            case noMatch = "NO_MATCH"
        }

        public enum BusinessCategory: String, Codable, CaseIterable {
            case automotive = "AUTOMOTIVE"
            case beauty = "BEAUTY"
            case bikes = "BIKES"
            case books = "BOOKS"
            case casino = "CASINO"
            case education = "EDUCATION"
            case educationJapan = "EDUCATION_JAPAN"
            case entertainment = "ENTERTAINMENT"
            case evCharger = "EV_CHARGER"
            case financialUsd = "FINANCIAL_USD"
            case financialCny = "FINANCIAL_CNY"
            case financialGbp = "FINANCIAL_GBP"
            case financialJpy = "FINANCIAL_JPY"
            case financialEur = "FINANCIAL_EUR"
            case fitness = "FITNESS"
            case foodAndDrink = "FOOD_AND_DRINK"
            case gas = "GAS"
            case grocery = "GROCERY"
            case healthAndMedical = "HEALTH_AND_MEDICAL"
            case hotelAndTravel = "HOTEL_AND_TRAVEL"
            case music = "MUSIC"
            case parking = "PARKING"
            case petServices = "PET_SERVICES"
            case professionalServices = "PROFESSIONAL_SERVICES"
            case shopping = "SHOPPING"
            case ticketing = "TICKETING"
            case transit = "TRANSIT"
        }

        public init(link: URL? = nil, version: Int? = nil, status: Status? = nil, action: AppClipAction? = nil, isPoweredBy: Bool? = nil, place: Place? = nil, placeStatus: PlaceStatus? = nil, businessCategory: BusinessCategory? = nil, defaultLanguage: AppClipAdvancedExperienceLanguage? = nil) {
            self.link = link
            self.version = version
            self.status = status
            self.action = action
            self.isPoweredBy = isPoweredBy
            self.place = place
            self.placeStatus = placeStatus
            self.businessCategory = businessCategory
            self.defaultLanguage = defaultLanguage
        }
    }

    public struct Relationships: Codable {
        public var appClip: AppClip?
        public var headerImage: HeaderImage?
        public var localizations: Localizations?

        public struct AppClip: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClips
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct HeaderImage: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipAdvancedExperienceImages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Localizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipAdvancedExperienceLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appClip: AppClip? = nil, headerImage: HeaderImage? = nil, localizations: Localizations? = nil) {
            self.appClip = appClip
            self.headerImage = headerImage
            self.localizations = localizations
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppClipAdvancedExperiencesResponse: Codable {
    public var data: [AppClipAdvancedExperience]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appClipAdvancedExperienceImage(AppClipAdvancedExperienceImage)
        case appClipAdvancedExperienceLocalization(AppClipAdvancedExperienceLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceImage.self) {
                self = .appClipAdvancedExperienceImage(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceLocalization.self) {
                self = .appClipAdvancedExperienceLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appClipAdvancedExperienceImage(let value): try container.encode(value)
            case .appClipAdvancedExperienceLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppClipAdvancedExperience], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppClipAdvancedExperienceResponse: Codable {
    /// AppClipAdvancedExperience
    public var data: AppClipAdvancedExperience
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appClipAdvancedExperienceImage(AppClipAdvancedExperienceImage)
        case appClipAdvancedExperienceLocalization(AppClipAdvancedExperienceLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceImage.self) {
                self = .appClipAdvancedExperienceImage(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceLocalization.self) {
                self = .appClipAdvancedExperienceLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appClipAdvancedExperienceImage(let value): try container.encode(value)
            case .appClipAdvancedExperienceLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppClipAdvancedExperience, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppClipAdvancedExperienceCreateRequest: Codable {
    public var data: Data
    public var included: [AppClipAdvancedExperienceLocalizationInlineCreate]?

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperiences
        }

        public struct Attributes: Codable {
            public var link: URL
            public var action: AppClipAction?
            public var isPoweredBy: Bool
            public var place: Place?
            public var businessCategory: BusinessCategory?
            public var defaultLanguage: AppClipAdvancedExperienceLanguage

            public struct Place: Codable {
                public var placeID: String?
                public var names: [String]?
                public var mainAddress: MainAddress?
                public var displayPoint: DisplayPoint?
                public var mapAction: MapAction?
                public var relationship: Relationship?
                public var phoneNumber: PhoneNumber?
                public var homePage: String?
                public var categories: [String]?

                public struct MainAddress: Codable {
                    public var fullAddress: String?
                    public var structuredAddress: StructuredAddress?

                    public struct StructuredAddress: Codable {
                        public var streetAddress: [String]?
                        public var floor: String?
                        public var neighborhood: String?
                        public var locality: String?
                        public var stateProvince: String?
                        public var postalCode: String?
                        public var countryCode: String?

                        public init(streetAddress: [String]? = nil, floor: String? = nil, neighborhood: String? = nil, locality: String? = nil, stateProvince: String? = nil, postalCode: String? = nil, countryCode: String? = nil) {
                            self.streetAddress = streetAddress
                            self.floor = floor
                            self.neighborhood = neighborhood
                            self.locality = locality
                            self.stateProvince = stateProvince
                            self.postalCode = postalCode
                            self.countryCode = countryCode
                        }
                    }

                    public init(fullAddress: String? = nil, structuredAddress: StructuredAddress? = nil) {
                        self.fullAddress = fullAddress
                        self.structuredAddress = structuredAddress
                    }
                }

                public struct DisplayPoint: Codable {
                    public var coordinates: Coordinates?
                    public var source: Source?

                    public struct Coordinates: Codable {
                        public var latitude: Double?
                        public var longitude: Double?

                        public init(latitude: Double? = nil, longitude: Double? = nil) {
                            self.latitude = latitude
                            self.longitude = longitude
                        }
                    }

                    public enum Source: String, Codable, CaseIterable {
                        case calculated = "CALCULATED"
                        case manuallyPlaced = "MANUALLY_PLACED"
                    }

                    public init(coordinates: Coordinates? = nil, source: Source? = nil) {
                        self.coordinates = coordinates
                        self.source = source
                    }
                }

                public enum MapAction: String, Codable, CaseIterable {
                    case buyTickets = "BUY_TICKETS"
                    case viewAvailability = "VIEW_AVAILABILITY"
                    case viewPricing = "VIEW_PRICING"
                    case hotelBookRoom = "HOTEL_BOOK_ROOM"
                    case parkingReserveParking = "PARKING_RESERVE_PARKING"
                    case restaurantJoinWaitlist = "RESTAURANT_JOIN_WAITLIST"
                    case restaurantOrderDelivery = "RESTAURANT_ORDER_DELIVERY"
                    case restaurantOrderFood = "RESTAURANT_ORDER_FOOD"
                    case restaurantOrderTakeout = "RESTAURANT_ORDER_TAKEOUT"
                    case restaurantReservation = "RESTAURANT_RESERVATION"
                    case scheduleAppointment = "SCHEDULE_APPOINTMENT"
                    case restaurantViewMenu = "RESTAURANT_VIEW_MENU"
                    case theaterNowPlaying = "THEATER_NOW_PLAYING"
                }

                public enum Relationship: String, Codable, CaseIterable {
                    case owner = "OWNER"
                    case authorized = "AUTHORIZED"
                    case other = "OTHER"
                }

                public struct PhoneNumber: Codable {
                    public var number: String?
                    public var type: `Type`?
                    public var intent: String?

                    public enum `Type`: String, Codable, CaseIterable {
                        case fax = "FAX"
                        case landline = "LANDLINE"
                        case mobile = "MOBILE"
                        case tollfree = "TOLLFREE"
                    }

                    public init(number: String? = nil, type: `Type`? = nil, intent: String? = nil) {
                        self.number = number
                        self.type = type
                        self.intent = intent
                    }
                }

                public init(placeID: String? = nil, names: [String]? = nil, mainAddress: MainAddress? = nil, displayPoint: DisplayPoint? = nil, mapAction: MapAction? = nil, relationship: Relationship? = nil, phoneNumber: PhoneNumber? = nil, homePage: String? = nil, categories: [String]? = nil) {
                    self.placeID = placeID
                    self.names = names
                    self.mainAddress = mainAddress
                    self.displayPoint = displayPoint
                    self.mapAction = mapAction
                    self.relationship = relationship
                    self.phoneNumber = phoneNumber
                    self.homePage = homePage
                    self.categories = categories
                }

                private enum CodingKeys: String, CodingKey {
                    case placeID = "placeId"
                    case names
                    case mainAddress
                    case displayPoint
                    case mapAction
                    case relationship
                    case phoneNumber
                    case homePage
                    case categories
                }
            }

            public enum BusinessCategory: String, Codable, CaseIterable {
                case automotive = "AUTOMOTIVE"
                case beauty = "BEAUTY"
                case bikes = "BIKES"
                case books = "BOOKS"
                case casino = "CASINO"
                case education = "EDUCATION"
                case educationJapan = "EDUCATION_JAPAN"
                case entertainment = "ENTERTAINMENT"
                case evCharger = "EV_CHARGER"
                case financialUsd = "FINANCIAL_USD"
                case financialCny = "FINANCIAL_CNY"
                case financialGbp = "FINANCIAL_GBP"
                case financialJpy = "FINANCIAL_JPY"
                case financialEur = "FINANCIAL_EUR"
                case fitness = "FITNESS"
                case foodAndDrink = "FOOD_AND_DRINK"
                case gas = "GAS"
                case grocery = "GROCERY"
                case healthAndMedical = "HEALTH_AND_MEDICAL"
                case hotelAndTravel = "HOTEL_AND_TRAVEL"
                case music = "MUSIC"
                case parking = "PARKING"
                case petServices = "PET_SERVICES"
                case professionalServices = "PROFESSIONAL_SERVICES"
                case shopping = "SHOPPING"
                case ticketing = "TICKETING"
                case transit = "TRANSIT"
            }

            public init(link: URL, action: AppClipAction? = nil, isPoweredBy: Bool, place: Place? = nil, businessCategory: BusinessCategory? = nil, defaultLanguage: AppClipAdvancedExperienceLanguage) {
                self.link = link
                self.action = action
                self.isPoweredBy = isPoweredBy
                self.place = place
                self.businessCategory = businessCategory
                self.defaultLanguage = defaultLanguage
            }
        }

        public struct Relationships: Codable {
            public var appClip: AppClip
            public var headerImage: HeaderImage
            public var localizations: Localizations

            public struct AppClip: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClips
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct HeaderImage: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceImages
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Localizations: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(appClip: AppClip, headerImage: HeaderImage, localizations: Localizations) {
                self.appClip = appClip
                self.headerImage = headerImage
                self.localizations = localizations
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data, included: [AppClipAdvancedExperienceLocalizationInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}

public struct AppClipAdvancedExperienceUpdateRequest: Codable {
    public var data: Data
    public var included: [AppClipAdvancedExperienceLocalizationInlineCreate]?

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperiences
        }

        public struct Attributes: Codable {
            public var action: AppClipAction?
            public var isPoweredBy: Bool?
            public var place: Place?
            public var businessCategory: BusinessCategory?
            public var defaultLanguage: AppClipAdvancedExperienceLanguage?
            public var isRemoved: Bool?

            public struct Place: Codable {
                public var placeID: String?
                public var names: [String]?
                public var mainAddress: MainAddress?
                public var displayPoint: DisplayPoint?
                public var mapAction: MapAction?
                public var relationship: Relationship?
                public var phoneNumber: PhoneNumber?
                public var homePage: String?
                public var categories: [String]?

                public struct MainAddress: Codable {
                    public var fullAddress: String?
                    public var structuredAddress: StructuredAddress?

                    public struct StructuredAddress: Codable {
                        public var streetAddress: [String]?
                        public var floor: String?
                        public var neighborhood: String?
                        public var locality: String?
                        public var stateProvince: String?
                        public var postalCode: String?
                        public var countryCode: String?

                        public init(streetAddress: [String]? = nil, floor: String? = nil, neighborhood: String? = nil, locality: String? = nil, stateProvince: String? = nil, postalCode: String? = nil, countryCode: String? = nil) {
                            self.streetAddress = streetAddress
                            self.floor = floor
                            self.neighborhood = neighborhood
                            self.locality = locality
                            self.stateProvince = stateProvince
                            self.postalCode = postalCode
                            self.countryCode = countryCode
                        }
                    }

                    public init(fullAddress: String? = nil, structuredAddress: StructuredAddress? = nil) {
                        self.fullAddress = fullAddress
                        self.structuredAddress = structuredAddress
                    }
                }

                public struct DisplayPoint: Codable {
                    public var coordinates: Coordinates?
                    public var source: Source?

                    public struct Coordinates: Codable {
                        public var latitude: Double?
                        public var longitude: Double?

                        public init(latitude: Double? = nil, longitude: Double? = nil) {
                            self.latitude = latitude
                            self.longitude = longitude
                        }
                    }

                    public enum Source: String, Codable, CaseIterable {
                        case calculated = "CALCULATED"
                        case manuallyPlaced = "MANUALLY_PLACED"
                    }

                    public init(coordinates: Coordinates? = nil, source: Source? = nil) {
                        self.coordinates = coordinates
                        self.source = source
                    }
                }

                public enum MapAction: String, Codable, CaseIterable {
                    case buyTickets = "BUY_TICKETS"
                    case viewAvailability = "VIEW_AVAILABILITY"
                    case viewPricing = "VIEW_PRICING"
                    case hotelBookRoom = "HOTEL_BOOK_ROOM"
                    case parkingReserveParking = "PARKING_RESERVE_PARKING"
                    case restaurantJoinWaitlist = "RESTAURANT_JOIN_WAITLIST"
                    case restaurantOrderDelivery = "RESTAURANT_ORDER_DELIVERY"
                    case restaurantOrderFood = "RESTAURANT_ORDER_FOOD"
                    case restaurantOrderTakeout = "RESTAURANT_ORDER_TAKEOUT"
                    case restaurantReservation = "RESTAURANT_RESERVATION"
                    case scheduleAppointment = "SCHEDULE_APPOINTMENT"
                    case restaurantViewMenu = "RESTAURANT_VIEW_MENU"
                    case theaterNowPlaying = "THEATER_NOW_PLAYING"
                }

                public enum Relationship: String, Codable, CaseIterable {
                    case owner = "OWNER"
                    case authorized = "AUTHORIZED"
                    case other = "OTHER"
                }

                public struct PhoneNumber: Codable {
                    public var number: String?
                    public var type: `Type`?
                    public var intent: String?

                    public enum `Type`: String, Codable, CaseIterable {
                        case fax = "FAX"
                        case landline = "LANDLINE"
                        case mobile = "MOBILE"
                        case tollfree = "TOLLFREE"
                    }

                    public init(number: String? = nil, type: `Type`? = nil, intent: String? = nil) {
                        self.number = number
                        self.type = type
                        self.intent = intent
                    }
                }

                public init(placeID: String? = nil, names: [String]? = nil, mainAddress: MainAddress? = nil, displayPoint: DisplayPoint? = nil, mapAction: MapAction? = nil, relationship: Relationship? = nil, phoneNumber: PhoneNumber? = nil, homePage: String? = nil, categories: [String]? = nil) {
                    self.placeID = placeID
                    self.names = names
                    self.mainAddress = mainAddress
                    self.displayPoint = displayPoint
                    self.mapAction = mapAction
                    self.relationship = relationship
                    self.phoneNumber = phoneNumber
                    self.homePage = homePage
                    self.categories = categories
                }

                private enum CodingKeys: String, CodingKey {
                    case placeID = "placeId"
                    case names
                    case mainAddress
                    case displayPoint
                    case mapAction
                    case relationship
                    case phoneNumber
                    case homePage
                    case categories
                }
            }

            public enum BusinessCategory: String, Codable, CaseIterable {
                case automotive = "AUTOMOTIVE"
                case beauty = "BEAUTY"
                case bikes = "BIKES"
                case books = "BOOKS"
                case casino = "CASINO"
                case education = "EDUCATION"
                case educationJapan = "EDUCATION_JAPAN"
                case entertainment = "ENTERTAINMENT"
                case evCharger = "EV_CHARGER"
                case financialUsd = "FINANCIAL_USD"
                case financialCny = "FINANCIAL_CNY"
                case financialGbp = "FINANCIAL_GBP"
                case financialJpy = "FINANCIAL_JPY"
                case financialEur = "FINANCIAL_EUR"
                case fitness = "FITNESS"
                case foodAndDrink = "FOOD_AND_DRINK"
                case gas = "GAS"
                case grocery = "GROCERY"
                case healthAndMedical = "HEALTH_AND_MEDICAL"
                case hotelAndTravel = "HOTEL_AND_TRAVEL"
                case music = "MUSIC"
                case parking = "PARKING"
                case petServices = "PET_SERVICES"
                case professionalServices = "PROFESSIONAL_SERVICES"
                case shopping = "SHOPPING"
                case ticketing = "TICKETING"
                case transit = "TRANSIT"
            }

            public init(action: AppClipAction? = nil, isPoweredBy: Bool? = nil, place: Place? = nil, businessCategory: BusinessCategory? = nil, defaultLanguage: AppClipAdvancedExperienceLanguage? = nil, isRemoved: Bool? = nil) {
                self.action = action
                self.isPoweredBy = isPoweredBy
                self.place = place
                self.businessCategory = businessCategory
                self.defaultLanguage = defaultLanguage
                self.isRemoved = isRemoved
            }

            private enum CodingKeys: String, CodingKey {
                case action
                case isPoweredBy
                case place
                case businessCategory
                case defaultLanguage
                case isRemoved = "removed"
            }
        }

        public struct Relationships: Codable {
            public var appClip: AppClip?
            public var headerImage: HeaderImage?
            public var localizations: Localizations?

            public struct AppClip: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClips
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct HeaderImage: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceImages
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct Localizations: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(appClip: AppClip? = nil, headerImage: HeaderImage? = nil, localizations: Localizations? = nil) {
                self.appClip = appClip
                self.headerImage = headerImage
                self.localizations = localizations
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data, included: [AppClipAdvancedExperienceLocalizationInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}

public struct AppClipAppStoreReviewDetail: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAppStoreReviewDetails
    }

    public struct Attributes: Codable {
        public var invocationURLs: [URL]?

        public init(invocationURLs: [URL]? = nil) {
            self.invocationURLs = invocationURLs
        }

        private enum CodingKeys: String, CodingKey {
            case invocationURLs = "invocationUrls"
        }
    }

    public struct Relationships: Codable {
        public var appClipDefaultExperience: AppClipDefaultExperience?

        public struct AppClipDefaultExperience: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appClipDefaultExperience: AppClipDefaultExperience? = nil) {
            self.appClipDefaultExperience = appClipDefaultExperience
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppClipAppStoreReviewDetailResponse: Codable {
    /// AppClipAppStoreReviewDetail
    public var data: AppClipAppStoreReviewDetail
    public var included: [AppClipDefaultExperience]?
    public var links: DocumentLinks

    public init(data: AppClipAppStoreReviewDetail, included: [AppClipDefaultExperience]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppClipAppStoreReviewDetailCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAppStoreReviewDetails
        }

        public struct Attributes: Codable {
            public var invocationURLs: [URL]?

            public init(invocationURLs: [URL]? = nil) {
                self.invocationURLs = invocationURLs
            }

            private enum CodingKeys: String, CodingKey {
                case invocationURLs = "invocationUrls"
            }
        }

        public struct Relationships: Codable {
            public var appClipDefaultExperience: AppClipDefaultExperience

            public struct AppClipDefaultExperience: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appClipDefaultExperience: AppClipDefaultExperience) {
                self.appClipDefaultExperience = appClipDefaultExperience
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipAppStoreReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAppStoreReviewDetails
        }

        public struct Attributes: Codable {
            public var invocationURLs: [URL]?

            public init(invocationURLs: [URL]? = nil) {
                self.invocationURLs = invocationURLs
            }

            private enum CodingKeys: String, CodingKey {
                case invocationURLs = "invocationUrls"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperienceLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipDefaultExperienceLocalizations
    }

    public struct Attributes: Codable {
        public var locale: String?
        public var subtitle: String?

        public init(locale: String? = nil, subtitle: String? = nil) {
            self.locale = locale
            self.subtitle = subtitle
        }
    }

    public struct Relationships: Codable {
        public var appClipDefaultExperience: AppClipDefaultExperience?
        public var appClipHeaderImage: AppClipHeaderImage?

        public struct AppClipDefaultExperience: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppClipHeaderImage: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipHeaderImages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appClipDefaultExperience: AppClipDefaultExperience? = nil, appClipHeaderImage: AppClipHeaderImage? = nil) {
            self.appClipDefaultExperience = appClipDefaultExperience
            self.appClipHeaderImage = appClipHeaderImage
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppClipDefaultExperienceLocalizationsResponse: Codable {
    public var data: [AppClipDefaultExperienceLocalization]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appClipHeaderImage(AppClipHeaderImage)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppClipHeaderImage.self) {
                self = .appClipHeaderImage(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appClipHeaderImage(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppClipDefaultExperienceLocalization], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppClipDefaultExperienceLocalizationResponse: Codable {
    /// AppClipDefaultExperienceLocalization
    public var data: AppClipDefaultExperienceLocalization
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appClipHeaderImage(AppClipHeaderImage)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppClipHeaderImage.self) {
                self = .appClipHeaderImage(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appClipHeaderImage(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppClipDefaultExperienceLocalization, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppClipDefaultExperienceLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperienceLocalizations
        }

        public struct Attributes: Codable {
            public var locale: String
            public var subtitle: String?

            public init(locale: String, subtitle: String? = nil) {
                self.locale = locale
                self.subtitle = subtitle
            }
        }

        public struct Relationships: Codable {
            public var appClipDefaultExperience: AppClipDefaultExperience

            public struct AppClipDefaultExperience: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appClipDefaultExperience: AppClipDefaultExperience) {
                self.appClipDefaultExperience = appClipDefaultExperience
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperienceLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperienceLocalizations
        }

        public struct Attributes: Codable {
            public var subtitle: String?

            public init(subtitle: String? = nil) {
                self.subtitle = subtitle
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperience: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipDefaultExperiences
    }

    public struct Attributes: Codable {
        public var action: AppClipAction?

        public init(action: AppClipAction? = nil) {
            self.action = action
        }
    }

    public struct Relationships: Codable {
        public var appClip: AppClip?
        public var releaseWithAppStoreVersion: ReleaseWithAppStoreVersion?
        public var appClipDefaultExperienceLocalizations: AppClipDefaultExperienceLocalizations?
        public var appClipAppStoreReviewDetail: AppClipAppStoreReviewDetail?

        public struct AppClip: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClips
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct ReleaseWithAppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppClipDefaultExperienceLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperienceLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppClipAppStoreReviewDetail: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipAppStoreReviewDetails
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appClip: AppClip? = nil, releaseWithAppStoreVersion: ReleaseWithAppStoreVersion? = nil, appClipDefaultExperienceLocalizations: AppClipDefaultExperienceLocalizations? = nil, appClipAppStoreReviewDetail: AppClipAppStoreReviewDetail? = nil) {
            self.appClip = appClip
            self.releaseWithAppStoreVersion = releaseWithAppStoreVersion
            self.appClipDefaultExperienceLocalizations = appClipDefaultExperienceLocalizations
            self.appClipAppStoreReviewDetail = appClipAppStoreReviewDetail
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppClipDefaultExperiencesResponse: Codable {
    public var data: [AppClipDefaultExperience]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appStoreVersion(AppStoreVersion)
        case appClipDefaultExperienceLocalization(AppClipDefaultExperienceLocalization)
        case appClipAppStoreReviewDetail(AppClipAppStoreReviewDetail)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppClipDefaultExperienceLocalization.self) {
                self = .appClipDefaultExperienceLocalization(value)
            } else if let value = try? container.decode(AppClipAppStoreReviewDetail.self) {
                self = .appClipAppStoreReviewDetail(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .appClipDefaultExperienceLocalization(let value): try container.encode(value)
            case .appClipAppStoreReviewDetail(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppClipDefaultExperience], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppClipDefaultExperienceResponse: Codable {
    /// AppClipDefaultExperience
    public var data: AppClipDefaultExperience
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appStoreVersion(AppStoreVersion)
        case appClipDefaultExperienceLocalization(AppClipDefaultExperienceLocalization)
        case appClipAppStoreReviewDetail(AppClipAppStoreReviewDetail)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppClipDefaultExperienceLocalization.self) {
                self = .appClipDefaultExperienceLocalization(value)
            } else if let value = try? container.decode(AppClipAppStoreReviewDetail.self) {
                self = .appClipAppStoreReviewDetail(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .appClipDefaultExperienceLocalization(let value): try container.encode(value)
            case .appClipAppStoreReviewDetail(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppClipDefaultExperience, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppClipDefaultExperienceCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public struct Attributes: Codable {
            public var action: AppClipAction?

            public init(action: AppClipAction? = nil) {
                self.action = action
            }
        }

        public struct Relationships: Codable {
            public var appClip: AppClip
            public var releaseWithAppStoreVersion: ReleaseWithAppStoreVersion?
            public var appClipDefaultExperienceTemplate: AppClipDefaultExperienceTemplate?

            public struct AppClip: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClips
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct ReleaseWithAppStoreVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppClipDefaultExperienceTemplate: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appClip: AppClip, releaseWithAppStoreVersion: ReleaseWithAppStoreVersion? = nil, appClipDefaultExperienceTemplate: AppClipDefaultExperienceTemplate? = nil) {
                self.appClip = appClip
                self.releaseWithAppStoreVersion = releaseWithAppStoreVersion
                self.appClipDefaultExperienceTemplate = appClipDefaultExperienceTemplate
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperienceUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public struct Attributes: Codable {
            public var action: AppClipAction?

            public init(action: AppClipAction? = nil) {
                self.action = action
            }
        }

        public struct Relationships: Codable {
            public var releaseWithAppStoreVersion: ReleaseWithAppStoreVersion?

            public struct ReleaseWithAppStoreVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(releaseWithAppStoreVersion: ReleaseWithAppStoreVersion? = nil) {
                self.releaseWithAppStoreVersion = releaseWithAppStoreVersion
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDomainStatus: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipDomainStatuses
    }

    public struct Attributes: Codable {
        public var domains: [Domain]?
        public var lastUpdatedDate: Date?

        public struct Domain: Codable {
            public var domain: String?
            public var isValid: Bool?
            public var lastUpdatedDate: Date?
            public var errorCode: ErrorCode?

            public enum ErrorCode: String, Codable, CaseIterable {
                case badHTTPResponse = "BAD_HTTP_RESPONSE"
                case badJSONContent = "BAD_JSON_CONTENT"
                case badPkcs7Signature = "BAD_PKCS7_SIGNATURE"
                case cannotReachAasaFile = "CANNOT_REACH_AASA_FILE"
                case dnsError = "DNS_ERROR"
                case insecureRedirectsForbidden = "INSECURE_REDIRECTS_FORBIDDEN"
                case invalidEntitlementMissingSection = "INVALID_ENTITLEMENT_MISSING_SECTION"
                case invalidEntitlementSyntaxError = "INVALID_ENTITLEMENT_SYNTAX_ERROR"
                case invalidEntitlementUnhandledSection = "INVALID_ENTITLEMENT_UNHANDLED_SECTION"
                case invalidEntitlementUnknownID = "INVALID_ENTITLEMENT_UNKNOWN_ID"
                case networkError = "NETWORK_ERROR"
                case networkErrorTemporary = "NETWORK_ERROR_TEMPORARY"
                case otherError = "OTHER_ERROR"
                case timeout = "TIMEOUT"
                case tlsError = "TLS_ERROR"
                case unexpectedError = "UNEXPECTED_ERROR"
            }

            public init(domain: String? = nil, isValid: Bool? = nil, lastUpdatedDate: Date? = nil, errorCode: ErrorCode? = nil) {
                self.domain = domain
                self.isValid = isValid
                self.lastUpdatedDate = lastUpdatedDate
                self.errorCode = errorCode
            }
        }

        public init(domains: [Domain]? = nil, lastUpdatedDate: Date? = nil) {
            self.domains = domains
            self.lastUpdatedDate = lastUpdatedDate
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AppClipDomainStatusResponse: Codable {
    /// AppClipDomainStatus
    public var data: AppClipDomainStatus
    public var links: DocumentLinks

    public init(data: AppClipDomainStatus, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppClipHeaderImage: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClipHeaderImages
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var sourceFileChecksum: String?
        public var imageAsset: ImageAsset?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?

        public init(fileSize: Int? = nil, fileName: String? = nil, sourceFileChecksum: String? = nil, imageAsset: ImageAsset? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.sourceFileChecksum = sourceFileChecksum
            self.imageAsset = imageAsset
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
        }
    }

    public struct Relationships: Codable {
        public var appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization?

        public struct AppClipDefaultExperienceLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperienceLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization? = nil) {
            self.appClipDefaultExperienceLocalization = appClipDefaultExperienceLocalization
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppClipHeaderImageResponse: Codable {
    /// AppClipHeaderImage
    public var data: AppClipHeaderImage
    public var included: [AppClipDefaultExperienceLocalization]?
    public var links: DocumentLinks

    public init(data: AppClipHeaderImage, included: [AppClipDefaultExperienceLocalization]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppClipHeaderImageCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appClipHeaderImages
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public struct Relationships: Codable {
            public var appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization

            public struct AppClipDefaultExperienceLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperienceLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization) {
                self.appClipDefaultExperienceLocalization = appClipDefaultExperienceLocalization
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipHeaderImageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appClipHeaderImages
        }

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClip: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appClips
    }

    public struct Attributes: Codable {
        public var bundleID: String?

        public init(bundleID: String? = nil) {
            self.bundleID = bundleID
        }

        private enum CodingKeys: String, CodingKey {
            case bundleID = "bundleId"
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var appClipDefaultExperiences: AppClipDefaultExperiences?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppClipDefaultExperiences: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(app: App? = nil, appClipDefaultExperiences: AppClipDefaultExperiences? = nil) {
            self.app = app
            self.appClipDefaultExperiences = appClipDefaultExperiences
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppClipsResponse: Codable {
    public var data: [AppClip]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case appClipDefaultExperience(AppClipDefaultExperience)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppClip], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppClipResponse: Codable {
    /// AppClip
    public var data: AppClip
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case appClipDefaultExperience(AppClipDefaultExperience)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppClip, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppCustomProductPageLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageLocalizations
    }

    public struct Attributes: Codable {
        public var locale: String?
        public var promotionalText: String?

        public init(locale: String? = nil, promotionalText: String? = nil) {
            self.locale = locale
            self.promotionalText = promotionalText
        }
    }

    public struct Relationships: Codable {
        public var appCustomProductPageVersion: AppCustomProductPageVersion?
        public var appScreenshotSets: AppScreenshotSets?
        public var appPreviewSets: AppPreviewSets?

        public struct AppCustomProductPageVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppScreenshotSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppPreviewSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appCustomProductPageVersion: AppCustomProductPageVersion? = nil, appScreenshotSets: AppScreenshotSets? = nil, appPreviewSets: AppPreviewSets? = nil) {
            self.appCustomProductPageVersion = appCustomProductPageVersion
            self.appScreenshotSets = appScreenshotSets
            self.appPreviewSets = appPreviewSets
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppCustomProductPageLocalizationInlineCreate: Codable {
    public var type: `Type`
    public var id: String?
    public var attributes: Attributes
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageLocalizations
    }

    public struct Attributes: Codable {
        public var locale: String
        public var promotionalText: String?

        public init(locale: String, promotionalText: String? = nil) {
            self.locale = locale
            self.promotionalText = promotionalText
        }
    }

    public struct Relationships: Codable {
        public var appCustomProductPageVersion: AppCustomProductPageVersion?

        public struct AppCustomProductPageVersion: Codable {
            public var data: Data?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(appCustomProductPageVersion: AppCustomProductPageVersion? = nil) {
            self.appCustomProductPageVersion = appCustomProductPageVersion
        }
    }

    public init(type: `Type`, id: String? = nil, attributes: Attributes, relationships: Relationships? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
    }
}

public struct AppCustomProductPageLocalizationsResponse: Codable {
    public var data: [AppCustomProductPageLocalization]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppCustomProductPageLocalization], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppCustomProductPageLocalizationResponse: Codable {
    /// AppCustomProductPageLocalization
    public var data: AppCustomProductPageLocalization
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppCustomProductPageLocalization, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppCustomProductPageLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPageLocalizations
        }

        public struct Attributes: Codable {
            public var locale: String
            public var promotionalText: String?

            public init(locale: String, promotionalText: String? = nil) {
                self.locale = locale
                self.promotionalText = promotionalText
            }
        }

        public struct Relationships: Codable {
            public var appCustomProductPageVersion: AppCustomProductPageVersion

            public struct AppCustomProductPageVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appCustomProductPageVersion: AppCustomProductPageVersion) {
                self.appCustomProductPageVersion = appCustomProductPageVersion
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppCustomProductPageLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPageLocalizations
        }

        public struct Attributes: Codable {
            public var promotionalText: String?

            public init(promotionalText: String? = nil) {
                self.promotionalText = promotionalText
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppCustomProductPageVersion: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageVersions
    }

    public struct Attributes: Codable {
        public var version: String?
        public var state: State?

        public enum State: String, Codable, CaseIterable {
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
            case rejected = "REJECTED"
        }

        public init(version: String? = nil, state: State? = nil) {
            self.version = version
            self.state = state
        }
    }

    public struct Relationships: Codable {
        public var appCustomProductPage: AppCustomProductPage?
        public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations?

        public struct AppCustomProductPage: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppCustomProductPageLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appCustomProductPage: AppCustomProductPage? = nil, appCustomProductPageLocalizations: AppCustomProductPageLocalizations? = nil) {
            self.appCustomProductPage = appCustomProductPage
            self.appCustomProductPageLocalizations = appCustomProductPageLocalizations
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppCustomProductPageVersionInlineCreate: Codable {
    public var type: `Type`
    public var id: String?
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageVersions
    }

    public struct Relationships: Codable {
        public var appCustomProductPage: AppCustomProductPage?
        public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations?

        public struct AppCustomProductPage: Codable {
            public var data: Data?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct AppCustomProductPageLocalizations: Codable {
            public var data: [Datum]?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: [Datum]? = nil) {
                self.data = data
            }
        }

        public init(appCustomProductPage: AppCustomProductPage? = nil, appCustomProductPageLocalizations: AppCustomProductPageLocalizations? = nil) {
            self.appCustomProductPage = appCustomProductPage
            self.appCustomProductPageLocalizations = appCustomProductPageLocalizations
        }
    }

    public init(type: `Type`, id: String? = nil, relationships: Relationships? = nil) {
        self.type = type
        self.id = id
        self.relationships = relationships
    }
}

public struct AppCustomProductPageVersionsResponse: Codable {
    public var data: [AppCustomProductPageVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appCustomProductPage(AppCustomProductPage)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPage(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppCustomProductPageVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppCustomProductPageVersionResponse: Codable {
    /// AppCustomProductPageVersion
    public var data: AppCustomProductPageVersion
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appCustomProductPage(AppCustomProductPage)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPage(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppCustomProductPageVersion, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppCustomProductPageVersionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPageVersions
        }

        public struct Relationships: Codable {
            public var appCustomProductPage: AppCustomProductPage
            public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations?

            public struct AppCustomProductPage: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPages
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageLocalizations: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(appCustomProductPage: AppCustomProductPage, appCustomProductPageLocalizations: AppCustomProductPageLocalizations? = nil) {
                self.appCustomProductPage = appCustomProductPage
                self.appCustomProductPageLocalizations = appCustomProductPageLocalizations
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppCustomProductPage: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPages
    }

    public struct Attributes: Codable {
        public var name: String?
        public var url: URL?
        public var isVisible: Bool?

        public init(name: String? = nil, url: URL? = nil, isVisible: Bool? = nil) {
            self.name = name
            self.url = url
            self.isVisible = isVisible
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case url
            case isVisible = "visible"
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var appCustomProductPageVersions: AppCustomProductPageVersions?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppCustomProductPageVersions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(app: App? = nil, appCustomProductPageVersions: AppCustomProductPageVersions? = nil) {
            self.app = app
            self.appCustomProductPageVersions = appCustomProductPageVersions
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppCustomProductPagesResponse: Codable {
    public var data: [AppCustomProductPage]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case appCustomProductPageVersion(AppCustomProductPageVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppCustomProductPage], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppCustomProductPageResponse: Codable {
    /// AppCustomProductPage
    public var data: AppCustomProductPage
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case appCustomProductPageVersion(AppCustomProductPageVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppCustomProductPage, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppCustomProductPageCreateRequest: Codable {
    public var data: Data
    public var included: [IncludedItem]?

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPages
        }

        public struct Attributes: Codable {
            public var name: String

            public init(name: String) {
                self.name = name
            }
        }

        public struct Relationships: Codable {
            public var app: App
            public var appCustomProductPageVersions: AppCustomProductPageVersions?
            public var appStoreVersionTemplate: AppStoreVersionTemplate?
            public var customProductPageTemplate: CustomProductPageTemplate?

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageVersions: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct AppStoreVersionTemplate: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct CustomProductPageTemplate: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPages
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(app: App, appCustomProductPageVersions: AppCustomProductPageVersions? = nil, appStoreVersionTemplate: AppStoreVersionTemplate? = nil, customProductPageTemplate: CustomProductPageTemplate? = nil) {
                self.app = app
                self.appCustomProductPageVersions = appCustomProductPageVersions
                self.appStoreVersionTemplate = appStoreVersionTemplate
                self.customProductPageTemplate = customProductPageTemplate
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public enum IncludedItem: Codable {
        case appCustomProductPageLocalizationInlineCreate(AppCustomProductPageLocalizationInlineCreate)
        case appCustomProductPageVersionInlineCreate(AppCustomProductPageVersionInlineCreate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPageLocalizationInlineCreate.self) {
                self = .appCustomProductPageLocalizationInlineCreate(value)
            } else if let value = try? container.decode(AppCustomProductPageVersionInlineCreate.self) {
                self = .appCustomProductPageVersionInlineCreate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPageLocalizationInlineCreate(let value): try container.encode(value)
            case .appCustomProductPageVersionInlineCreate(let value): try container.encode(value)
            }
        }
    }

    public init(data: Data, included: [IncludedItem]? = nil) {
        self.data = data
        self.included = included
    }
}

public struct AppCustomProductPageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPages
        }

        public struct Attributes: Codable {
            public var name: String?
            public var isVisible: Bool?

            public init(name: String? = nil, isVisible: Bool? = nil) {
                self.name = name
                self.isVisible = isVisible
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isVisible = "visible"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEncryptionDeclaration: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appEncryptionDeclarations
    }

    public struct Attributes: Codable {
        public var usesEncryption: Bool?
        public var isExempt: Bool?
        public var containsProprietaryCryptography: Bool?
        public var containsThirdPartyCryptography: Bool?
        public var isAvailableOnFrenchStore: Bool?
        public var platform: Platform?
        public var uploadedDate: Date?
        public var documentURL: String?
        public var documentName: String?
        public var documentType: String?
        public var appEncryptionDeclarationState: AppEncryptionDeclarationState?
        public var codeValue: String?

        public init(usesEncryption: Bool? = nil, isExempt: Bool? = nil, containsProprietaryCryptography: Bool? = nil, containsThirdPartyCryptography: Bool? = nil, isAvailableOnFrenchStore: Bool? = nil, platform: Platform? = nil, uploadedDate: Date? = nil, documentURL: String? = nil, documentName: String? = nil, documentType: String? = nil, appEncryptionDeclarationState: AppEncryptionDeclarationState? = nil, codeValue: String? = nil) {
            self.usesEncryption = usesEncryption
            self.isExempt = isExempt
            self.containsProprietaryCryptography = containsProprietaryCryptography
            self.containsThirdPartyCryptography = containsThirdPartyCryptography
            self.isAvailableOnFrenchStore = isAvailableOnFrenchStore
            self.platform = platform
            self.uploadedDate = uploadedDate
            self.documentURL = documentURL
            self.documentName = documentName
            self.documentType = documentType
            self.appEncryptionDeclarationState = appEncryptionDeclarationState
            self.codeValue = codeValue
        }

        private enum CodingKeys: String, CodingKey {
            case usesEncryption
            case isExempt = "exempt"
            case containsProprietaryCryptography
            case containsThirdPartyCryptography
            case isAvailableOnFrenchStore = "availableOnFrenchStore"
            case platform
            case uploadedDate
            case documentURL = "documentUrl"
            case documentName
            case documentType
            case appEncryptionDeclarationState
            case codeValue
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppEncryptionDeclarationsResponse: Codable {
    public var data: [AppEncryptionDeclaration]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppEncryptionDeclaration], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppEncryptionDeclarationResponse: Codable {
    /// AppEncryptionDeclaration
    public var data: AppEncryptionDeclaration
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: AppEncryptionDeclaration, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppEventLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appEventLocalizations
    }

    public struct Attributes: Codable {
        public var locale: String?
        public var name: String?
        public var shortDescription: String?
        public var longDescription: String?

        public init(locale: String? = nil, name: String? = nil, shortDescription: String? = nil, longDescription: String? = nil) {
            self.locale = locale
            self.name = name
            self.shortDescription = shortDescription
            self.longDescription = longDescription
        }
    }

    public struct Relationships: Codable {
        public var appEvent: AppEvent?
        public var appEventScreenshots: AppEventScreenshots?
        public var appEventVideoClips: AppEventVideoClips?

        public struct AppEvent: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEvents
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppEventScreenshots: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventScreenshots
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppEventVideoClips: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventVideoClips
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appEvent: AppEvent? = nil, appEventScreenshots: AppEventScreenshots? = nil, appEventVideoClips: AppEventVideoClips? = nil) {
            self.appEvent = appEvent
            self.appEventScreenshots = appEventScreenshots
            self.appEventVideoClips = appEventVideoClips
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppEventLocalizationsResponse: Codable {
    public var data: [AppEventLocalization]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appEvent(AppEvent)
        case appEventScreenshot(AppEventScreenshot)
        case appEventVideoClip(AppEventVideoClip)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(AppEventScreenshot.self) {
                self = .appEventScreenshot(value)
            } else if let value = try? container.decode(AppEventVideoClip.self) {
                self = .appEventVideoClip(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appEvent(let value): try container.encode(value)
            case .appEventScreenshot(let value): try container.encode(value)
            case .appEventVideoClip(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppEventLocalization], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppEventLocalizationResponse: Codable {
    /// AppEventLocalization
    public var data: AppEventLocalization
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appEvent(AppEvent)
        case appEventScreenshot(AppEventScreenshot)
        case appEventVideoClip(AppEventVideoClip)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(AppEventScreenshot.self) {
                self = .appEventScreenshot(value)
            } else if let value = try? container.decode(AppEventVideoClip.self) {
                self = .appEventVideoClip(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appEvent(let value): try container.encode(value)
            case .appEventScreenshot(let value): try container.encode(value)
            case .appEventVideoClip(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppEventLocalization, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppEventLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appEventLocalizations
        }

        public struct Attributes: Codable {
            public var locale: String
            public var name: String?
            public var shortDescription: String?
            public var longDescription: String?

            public init(locale: String, name: String? = nil, shortDescription: String? = nil, longDescription: String? = nil) {
                self.locale = locale
                self.name = name
                self.shortDescription = shortDescription
                self.longDescription = longDescription
            }
        }

        public struct Relationships: Codable {
            public var appEvent: AppEvent

            public struct AppEvent: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEvents
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appEvent: AppEvent) {
                self.appEvent = appEvent
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appEventLocalizations
        }

        public struct Attributes: Codable {
            public var name: String?
            public var shortDescription: String?
            public var longDescription: String?

            public init(name: String? = nil, shortDescription: String? = nil, longDescription: String? = nil) {
                self.name = name
                self.shortDescription = shortDescription
                self.longDescription = longDescription
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventScreenshot: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appEventScreenshots
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var imageAsset: ImageAsset?
        public var assetToken: String?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?
        public var appEventAssetType: AppEventAssetType?

        public init(fileSize: Int? = nil, fileName: String? = nil, imageAsset: ImageAsset? = nil, assetToken: String? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil, appEventAssetType: AppEventAssetType? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.imageAsset = imageAsset
            self.assetToken = assetToken
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
            self.appEventAssetType = appEventAssetType
        }
    }

    public struct Relationships: Codable {
        public var appEventLocalization: AppEventLocalization?

        public struct AppEventLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appEventLocalization: AppEventLocalization? = nil) {
            self.appEventLocalization = appEventLocalization
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppEventScreenshotsResponse: Codable {
    public var data: [AppEventScreenshot]
    public var included: [AppEventLocalization]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppEventScreenshot], included: [AppEventLocalization]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppEventScreenshotResponse: Codable {
    /// AppEventScreenshot
    public var data: AppEventScreenshot
    public var included: [AppEventLocalization]?
    public var links: DocumentLinks

    public init(data: AppEventScreenshot, included: [AppEventLocalization]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppEventScreenshotCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appEventScreenshots
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String
            public var appEventAssetType: AppEventAssetType

            public init(fileSize: Int, fileName: String, appEventAssetType: AppEventAssetType) {
                self.fileSize = fileSize
                self.fileName = fileName
                self.appEventAssetType = appEventAssetType
            }
        }

        public struct Relationships: Codable {
            public var appEventLocalization: AppEventLocalization

            public struct AppEventLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEventLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appEventLocalization: AppEventLocalization) {
                self.appEventLocalization = appEventLocalization
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventScreenshotUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appEventScreenshots
        }

        public struct Attributes: Codable {
            public var isUploaded: Bool?

            public init(isUploaded: Bool? = nil) {
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventVideoClip: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appEventVideoClips
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var previewFrameTimeCode: String?
        public var videoURL: String?
        public var previewImage: ImageAsset?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?
        public var appEventAssetType: AppEventAssetType?

        public init(fileSize: Int? = nil, fileName: String? = nil, previewFrameTimeCode: String? = nil, videoURL: String? = nil, previewImage: ImageAsset? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil, appEventAssetType: AppEventAssetType? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.previewFrameTimeCode = previewFrameTimeCode
            self.videoURL = videoURL
            self.previewImage = previewImage
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
            self.appEventAssetType = appEventAssetType
        }

        private enum CodingKeys: String, CodingKey {
            case fileSize
            case fileName
            case previewFrameTimeCode
            case videoURL = "videoUrl"
            case previewImage
            case uploadOperations
            case assetDeliveryState
            case appEventAssetType
        }
    }

    public struct Relationships: Codable {
        public var appEventLocalization: AppEventLocalization?

        public struct AppEventLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appEventLocalization: AppEventLocalization? = nil) {
            self.appEventLocalization = appEventLocalization
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppEventVideoClipsResponse: Codable {
    public var data: [AppEventVideoClip]
    public var included: [AppEventLocalization]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppEventVideoClip], included: [AppEventLocalization]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppEventVideoClipResponse: Codable {
    /// AppEventVideoClip
    public var data: AppEventVideoClip
    public var included: [AppEventLocalization]?
    public var links: DocumentLinks

    public init(data: AppEventVideoClip, included: [AppEventLocalization]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppEventVideoClipCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appEventVideoClips
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String
            public var previewFrameTimeCode: String?
            public var appEventAssetType: AppEventAssetType

            public init(fileSize: Int, fileName: String, previewFrameTimeCode: String? = nil, appEventAssetType: AppEventAssetType) {
                self.fileSize = fileSize
                self.fileName = fileName
                self.previewFrameTimeCode = previewFrameTimeCode
                self.appEventAssetType = appEventAssetType
            }
        }

        public struct Relationships: Codable {
            public var appEventLocalization: AppEventLocalization

            public struct AppEventLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEventLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appEventLocalization: AppEventLocalization) {
                self.appEventLocalization = appEventLocalization
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventVideoClipUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appEventVideoClips
        }

        public struct Attributes: Codable {
            public var previewFrameTimeCode: String?
            public var isUploaded: Bool?

            public init(previewFrameTimeCode: String? = nil, isUploaded: Bool? = nil) {
                self.previewFrameTimeCode = previewFrameTimeCode
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case previewFrameTimeCode
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEvent: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appEvents
    }

    public struct Attributes: Codable {
        public var referenceName: String?
        public var badge: Badge?
        public var eventState: EventState?
        public var deepLink: URL?
        public var purchaseRequirement: PurchaseRequirement?
        public var primaryLocale: String?
        public var priority: Priority?
        public var purpose: Purpose?
        public var territorySchedules: [TerritorySchedule]?
        public var archivedTerritorySchedules: [ArchivedTerritorySchedule]?

        public enum Badge: String, Codable, CaseIterable {
            case liveEvent = "LIVE_EVENT"
            case premiere = "PREMIERE"
            case challenge = "CHALLENGE"
            case competition = "COMPETITION"
            case newSeason = "NEW_SEASON"
            case majorUpdate = "MAJOR_UPDATE"
            case specialEvent = "SPECIAL_EVENT"
        }

        public enum EventState: String, Codable, CaseIterable {
            case draft = "DRAFT"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case rejected = "REJECTED"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case published = "PUBLISHED"
            case past = "PAST"
            case archived = "ARCHIVED"
        }

        public enum PurchaseRequirement: String, Codable, CaseIterable {
            case noCostAssociated = "NO_COST_ASSOCIATED"
            case inAppPurchase = "IN_APP_PURCHASE"
            case subscription = "SUBSCRIPTION"
            case inAppPurchaseAndSubscription = "IN_APP_PURCHASE_AND_SUBSCRIPTION"
            case inAppPurchaseOrSubscription = "IN_APP_PURCHASE_OR_SUBSCRIPTION"
        }

        public enum Priority: String, Codable, CaseIterable {
            case high = "HIGH"
            case normal = "NORMAL"
        }

        public enum Purpose: String, Codable, CaseIterable {
            case appropriateForAllUsers = "APPROPRIATE_FOR_ALL_USERS"
            case attractNewUsers = "ATTRACT_NEW_USERS"
            case keepActiveUsersInformed = "KEEP_ACTIVE_USERS_INFORMED"
            case bringBackLapsedUsers = "BRING_BACK_LAPSED_USERS"
        }

        public struct TerritorySchedule: Codable {
            public var territories: [String]?
            public var publishStart: Date?
            public var eventStart: Date?
            public var eventEnd: Date?

            public init(territories: [String]? = nil, publishStart: Date? = nil, eventStart: Date? = nil, eventEnd: Date? = nil) {
                self.territories = territories
                self.publishStart = publishStart
                self.eventStart = eventStart
                self.eventEnd = eventEnd
            }
        }

        public struct ArchivedTerritorySchedule: Codable {
            public var territories: [String]?
            public var publishStart: Date?
            public var eventStart: Date?
            public var eventEnd: Date?

            public init(territories: [String]? = nil, publishStart: Date? = nil, eventStart: Date? = nil, eventEnd: Date? = nil) {
                self.territories = territories
                self.publishStart = publishStart
                self.eventStart = eventStart
                self.eventEnd = eventEnd
            }
        }

        public init(referenceName: String? = nil, badge: Badge? = nil, eventState: EventState? = nil, deepLink: URL? = nil, purchaseRequirement: PurchaseRequirement? = nil, primaryLocale: String? = nil, priority: Priority? = nil, purpose: Purpose? = nil, territorySchedules: [TerritorySchedule]? = nil, archivedTerritorySchedules: [ArchivedTerritorySchedule]? = nil) {
            self.referenceName = referenceName
            self.badge = badge
            self.eventState = eventState
            self.deepLink = deepLink
            self.purchaseRequirement = purchaseRequirement
            self.primaryLocale = primaryLocale
            self.priority = priority
            self.purpose = purpose
            self.territorySchedules = territorySchedules
            self.archivedTerritorySchedules = archivedTerritorySchedules
        }
    }

    public struct Relationships: Codable {
        public var localizations: Localizations?

        public struct Localizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(localizations: Localizations? = nil) {
            self.localizations = localizations
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppEventsResponse: Codable {
    public var data: [AppEvent]
    public var included: [AppEventLocalization]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppEvent], included: [AppEventLocalization]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppEventResponse: Codable {
    /// AppEvent
    public var data: AppEvent
    public var included: [AppEventLocalization]?
    public var links: DocumentLinks

    public init(data: AppEvent, included: [AppEventLocalization]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppEventCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appEvents
        }

        public struct Attributes: Codable {
            public var referenceName: String
            public var badge: Badge?
            public var deepLink: URL?
            public var purchaseRequirement: PurchaseRequirement?
            public var primaryLocale: String?
            public var priority: Priority?
            public var purpose: Purpose?
            public var territorySchedules: [TerritorySchedule]?

            public enum Badge: String, Codable, CaseIterable {
                case liveEvent = "LIVE_EVENT"
                case premiere = "PREMIERE"
                case challenge = "CHALLENGE"
                case competition = "COMPETITION"
                case newSeason = "NEW_SEASON"
                case majorUpdate = "MAJOR_UPDATE"
                case specialEvent = "SPECIAL_EVENT"
            }

            public enum PurchaseRequirement: String, Codable, CaseIterable {
                case noCostAssociated = "NO_COST_ASSOCIATED"
                case inAppPurchase = "IN_APP_PURCHASE"
                case subscription = "SUBSCRIPTION"
                case inAppPurchaseAndSubscription = "IN_APP_PURCHASE_AND_SUBSCRIPTION"
                case inAppPurchaseOrSubscription = "IN_APP_PURCHASE_OR_SUBSCRIPTION"
            }

            public enum Priority: String, Codable, CaseIterable {
                case high = "HIGH"
                case normal = "NORMAL"
            }

            public enum Purpose: String, Codable, CaseIterable {
                case appropriateForAllUsers = "APPROPRIATE_FOR_ALL_USERS"
                case attractNewUsers = "ATTRACT_NEW_USERS"
                case keepActiveUsersInformed = "KEEP_ACTIVE_USERS_INFORMED"
                case bringBackLapsedUsers = "BRING_BACK_LAPSED_USERS"
            }

            public struct TerritorySchedule: Codable {
                public var territories: [String]?
                public var publishStart: Date?
                public var eventStart: Date?
                public var eventEnd: Date?

                public init(territories: [String]? = nil, publishStart: Date? = nil, eventStart: Date? = nil, eventEnd: Date? = nil) {
                    self.territories = territories
                    self.publishStart = publishStart
                    self.eventStart = eventStart
                    self.eventEnd = eventEnd
                }
            }

            public init(referenceName: String, badge: Badge? = nil, deepLink: URL? = nil, purchaseRequirement: PurchaseRequirement? = nil, primaryLocale: String? = nil, priority: Priority? = nil, purpose: Purpose? = nil, territorySchedules: [TerritorySchedule]? = nil) {
                self.referenceName = referenceName
                self.badge = badge
                self.deepLink = deepLink
                self.purchaseRequirement = purchaseRequirement
                self.primaryLocale = primaryLocale
                self.priority = priority
                self.purpose = purpose
                self.territorySchedules = territorySchedules
            }
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appEvents
        }

        public struct Attributes: Codable {
            public var referenceName: String?
            public var badge: Badge?
            public var deepLink: URL?
            public var purchaseRequirement: PurchaseRequirement?
            public var primaryLocale: String?
            public var priority: Priority?
            public var purpose: Purpose?
            public var territorySchedules: [TerritorySchedule]?

            public enum Badge: String, Codable, CaseIterable {
                case liveEvent = "LIVE_EVENT"
                case premiere = "PREMIERE"
                case challenge = "CHALLENGE"
                case competition = "COMPETITION"
                case newSeason = "NEW_SEASON"
                case majorUpdate = "MAJOR_UPDATE"
                case specialEvent = "SPECIAL_EVENT"
            }

            public enum PurchaseRequirement: String, Codable, CaseIterable {
                case noCostAssociated = "NO_COST_ASSOCIATED"
                case inAppPurchase = "IN_APP_PURCHASE"
                case subscription = "SUBSCRIPTION"
                case inAppPurchaseAndSubscription = "IN_APP_PURCHASE_AND_SUBSCRIPTION"
                case inAppPurchaseOrSubscription = "IN_APP_PURCHASE_OR_SUBSCRIPTION"
            }

            public enum Priority: String, Codable, CaseIterable {
                case high = "HIGH"
                case normal = "NORMAL"
            }

            public enum Purpose: String, Codable, CaseIterable {
                case appropriateForAllUsers = "APPROPRIATE_FOR_ALL_USERS"
                case attractNewUsers = "ATTRACT_NEW_USERS"
                case keepActiveUsersInformed = "KEEP_ACTIVE_USERS_INFORMED"
                case bringBackLapsedUsers = "BRING_BACK_LAPSED_USERS"
            }

            public struct TerritorySchedule: Codable {
                public var territories: [String]?
                public var publishStart: Date?
                public var eventStart: Date?
                public var eventEnd: Date?

                public init(territories: [String]? = nil, publishStart: Date? = nil, eventStart: Date? = nil, eventEnd: Date? = nil) {
                    self.territories = territories
                    self.publishStart = publishStart
                    self.eventStart = eventStart
                    self.eventEnd = eventEnd
                }
            }

            public init(referenceName: String? = nil, badge: Badge? = nil, deepLink: URL? = nil, purchaseRequirement: PurchaseRequirement? = nil, primaryLocale: String? = nil, priority: Priority? = nil, purpose: Purpose? = nil, territorySchedules: [TerritorySchedule]? = nil) {
                self.referenceName = referenceName
                self.badge = badge
                self.deepLink = deepLink
                self.purchaseRequirement = purchaseRequirement
                self.primaryLocale = primaryLocale
                self.priority = priority
                self.purpose = purpose
                self.territorySchedules = territorySchedules
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfoLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appInfoLocalizations
    }

    public struct Attributes: Codable {
        public var locale: String?
        public var name: String?
        public var subtitle: String?
        public var privacyPolicyURL: String?
        public var privacyChoicesURL: String?
        public var privacyPolicyText: String?

        public init(locale: String? = nil, name: String? = nil, subtitle: String? = nil, privacyPolicyURL: String? = nil, privacyChoicesURL: String? = nil, privacyPolicyText: String? = nil) {
            self.locale = locale
            self.name = name
            self.subtitle = subtitle
            self.privacyPolicyURL = privacyPolicyURL
            self.privacyChoicesURL = privacyChoicesURL
            self.privacyPolicyText = privacyPolicyText
        }

        private enum CodingKeys: String, CodingKey {
            case locale
            case name
            case subtitle
            case privacyPolicyURL = "privacyPolicyUrl"
            case privacyChoicesURL = "privacyChoicesUrl"
            case privacyPolicyText
        }
    }

    public struct Relationships: Codable {
        public var appInfo: AppInfo?

        public struct AppInfo: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfos
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appInfo: AppInfo? = nil) {
            self.appInfo = appInfo
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppInfoLocalizationsResponse: Codable {
    public var data: [AppInfoLocalization]
    public var included: [AppInfo]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppInfoLocalization], included: [AppInfo]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppInfoLocalizationResponse: Codable {
    /// AppInfoLocalization
    public var data: AppInfoLocalization
    public var included: [AppInfo]?
    public var links: DocumentLinks

    public init(data: AppInfoLocalization, included: [AppInfo]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppInfoLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appInfoLocalizations
        }

        public struct Attributes: Codable {
            public var locale: String
            public var name: String?
            public var subtitle: String?
            public var privacyPolicyURL: String?
            public var privacyChoicesURL: String?
            public var privacyPolicyText: String?

            public init(locale: String, name: String? = nil, subtitle: String? = nil, privacyPolicyURL: String? = nil, privacyChoicesURL: String? = nil, privacyPolicyText: String? = nil) {
                self.locale = locale
                self.name = name
                self.subtitle = subtitle
                self.privacyPolicyURL = privacyPolicyURL
                self.privacyChoicesURL = privacyChoicesURL
                self.privacyPolicyText = privacyPolicyText
            }

            private enum CodingKeys: String, CodingKey {
                case locale
                case name
                case subtitle
                case privacyPolicyURL = "privacyPolicyUrl"
                case privacyChoicesURL = "privacyChoicesUrl"
                case privacyPolicyText
            }
        }

        public struct Relationships: Codable {
            public var appInfo: AppInfo

            public struct AppInfo: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appInfos
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appInfo: AppInfo) {
                self.appInfo = appInfo
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfoLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appInfoLocalizations
        }

        public struct Attributes: Codable {
            public var name: String?
            public var subtitle: String?
            public var privacyPolicyURL: String?
            public var privacyChoicesURL: String?
            public var privacyPolicyText: String?

            public init(name: String? = nil, subtitle: String? = nil, privacyPolicyURL: String? = nil, privacyChoicesURL: String? = nil, privacyPolicyText: String? = nil) {
                self.name = name
                self.subtitle = subtitle
                self.privacyPolicyURL = privacyPolicyURL
                self.privacyChoicesURL = privacyChoicesURL
                self.privacyPolicyText = privacyPolicyText
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case subtitle
                case privacyPolicyURL = "privacyPolicyUrl"
                case privacyChoicesURL = "privacyChoicesUrl"
                case privacyPolicyText
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfo: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appInfos
    }

    public struct Attributes: Codable {
        public var appStoreState: AppStoreVersionState?
        public var appStoreAgeRating: AppStoreAgeRating?
        public var brazilAgeRating: BrazilAgeRating?
        public var kidsAgeBand: KidsAgeBand?

        public init(appStoreState: AppStoreVersionState? = nil, appStoreAgeRating: AppStoreAgeRating? = nil, brazilAgeRating: BrazilAgeRating? = nil, kidsAgeBand: KidsAgeBand? = nil) {
            self.appStoreState = appStoreState
            self.appStoreAgeRating = appStoreAgeRating
            self.brazilAgeRating = brazilAgeRating
            self.kidsAgeBand = kidsAgeBand
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var ageRatingDeclaration: AgeRatingDeclaration?
        public var appInfoLocalizations: AppInfoLocalizations?
        public var primaryCategory: PrimaryCategory?
        public var primarySubcategoryOne: PrimarySubcategoryOne?
        public var primarySubcategoryTwo: PrimarySubcategoryTwo?
        public var secondaryCategory: SecondaryCategory?
        public var secondarySubcategoryOne: SecondarySubcategoryOne?
        public var secondarySubcategoryTwo: SecondarySubcategoryTwo?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AgeRatingDeclaration: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ageRatingDeclarations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppInfoLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfoLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct PrimaryCategory: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PrimarySubcategoryOne: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PrimarySubcategoryTwo: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct SecondaryCategory: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct SecondarySubcategoryOne: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct SecondarySubcategoryTwo: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil, ageRatingDeclaration: AgeRatingDeclaration? = nil, appInfoLocalizations: AppInfoLocalizations? = nil, primaryCategory: PrimaryCategory? = nil, primarySubcategoryOne: PrimarySubcategoryOne? = nil, primarySubcategoryTwo: PrimarySubcategoryTwo? = nil, secondaryCategory: SecondaryCategory? = nil, secondarySubcategoryOne: SecondarySubcategoryOne? = nil, secondarySubcategoryTwo: SecondarySubcategoryTwo? = nil) {
            self.app = app
            self.ageRatingDeclaration = ageRatingDeclaration
            self.appInfoLocalizations = appInfoLocalizations
            self.primaryCategory = primaryCategory
            self.primarySubcategoryOne = primarySubcategoryOne
            self.primarySubcategoryTwo = primarySubcategoryTwo
            self.secondaryCategory = secondaryCategory
            self.secondarySubcategoryOne = secondarySubcategoryOne
            self.secondarySubcategoryTwo = secondarySubcategoryTwo
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppInfosResponse: Codable {
    public var data: [AppInfo]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appInfoLocalization(AppInfoLocalization)
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppInfoLocalization.self) {
                self = .appInfoLocalization(value)
            } else if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appInfoLocalization(let value): try container.encode(value)
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppInfo], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppInfoResponse: Codable {
    /// AppInfo
    public var data: AppInfo
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appInfoLocalization(AppInfoLocalization)
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppInfoLocalization.self) {
                self = .appInfoLocalization(value)
            } else if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appInfoLocalization(let value): try container.encode(value)
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppInfo, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppInfoUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case appInfos
        }

        public struct Relationships: Codable {
            public var primaryCategory: PrimaryCategory?
            public var primarySubcategoryOne: PrimarySubcategoryOne?
            public var primarySubcategoryTwo: PrimarySubcategoryTwo?
            public var secondaryCategory: SecondaryCategory?
            public var secondarySubcategoryOne: SecondarySubcategoryOne?
            public var secondarySubcategoryTwo: SecondarySubcategoryTwo?

            public struct PrimaryCategory: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct PrimarySubcategoryOne: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct PrimarySubcategoryTwo: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondaryCategory: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondarySubcategoryOne: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondarySubcategoryTwo: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(primaryCategory: PrimaryCategory? = nil, primarySubcategoryOne: PrimarySubcategoryOne? = nil, primarySubcategoryTwo: PrimarySubcategoryTwo? = nil, secondaryCategory: SecondaryCategory? = nil, secondarySubcategoryOne: SecondarySubcategoryOne? = nil, secondarySubcategoryTwo: SecondarySubcategoryTwo? = nil) {
                self.primaryCategory = primaryCategory
                self.primarySubcategoryOne = primarySubcategoryOne
                self.primarySubcategoryTwo = primarySubcategoryTwo
                self.secondaryCategory = secondaryCategory
                self.secondarySubcategoryOne = secondarySubcategoryOne
                self.secondarySubcategoryTwo = secondarySubcategoryTwo
            }
        }

        public init(type: `Type`, id: String, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreOrder: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPreOrders
    }

    public struct Attributes: Codable {
        public var preOrderAvailableDate: NaiveDate?
        public var appReleaseDate: NaiveDate?

        public init(preOrderAvailableDate: NaiveDate? = nil, appReleaseDate: NaiveDate? = nil) {
            self.preOrderAvailableDate = preOrderAvailableDate
            self.appReleaseDate = appReleaseDate
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppPreOrderResponse: Codable {
    /// AppPreOrder
    public var data: AppPreOrder
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: AppPreOrder, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPreOrderCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appPreOrders
        }

        public struct Attributes: Codable {
            public var appReleaseDate: NaiveDate?

            public init(appReleaseDate: NaiveDate? = nil) {
                self.appReleaseDate = appReleaseDate
            }
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreOrderUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appPreOrders
        }

        public struct Attributes: Codable {
            public var appReleaseDate: NaiveDate?

            public init(appReleaseDate: NaiveDate? = nil) {
                self.appReleaseDate = appReleaseDate
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreviewSet: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPreviewSets
    }

    public struct Attributes: Codable {
        public var previewType: PreviewType?

        public init(previewType: PreviewType? = nil) {
            self.previewType = previewType
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersionLocalization: AppStoreVersionLocalization?
        public var appCustomProductPageLocalization: AppCustomProductPageLocalization?
        public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?
        public var appPreviews: AppPreviews?

        public struct AppStoreVersionLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppCustomProductPageLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatmentLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppPreviews: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviews
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil, appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil, appPreviews: AppPreviews? = nil) {
            self.appStoreVersionLocalization = appStoreVersionLocalization
            self.appCustomProductPageLocalization = appCustomProductPageLocalization
            self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
            self.appPreviews = appPreviews
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppPreviewSetsResponse: Codable {
    public var data: [AppPreviewSet]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appPreview(AppPreview)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppPreview.self) {
                self = .appPreview(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appPreview(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppPreviewSet], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppPreviewSetResponse: Codable {
    /// AppPreviewSet
    public var data: AppPreviewSet
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appPreview(AppPreview)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppPreview.self) {
                self = .appPreview(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appPreview(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppPreviewSet, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPreviewSetCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviewSets
        }

        public struct Attributes: Codable {
            public var previewType: PreviewType

            public init(previewType: PreviewType) {
                self.previewType = previewType
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersionLocalization: AppStoreVersionLocalization?
            public var appCustomProductPageLocalization: AppCustomProductPageLocalization?
            public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?

            public struct AppStoreVersionLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatmentLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil, appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil) {
                self.appStoreVersionLocalization = appStoreVersionLocalization
                self.appCustomProductPageLocalization = appCustomProductPageLocalization
                self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships? = nil) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreview: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPreviews
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var sourceFileChecksum: String?
        public var previewFrameTimeCode: String?
        public var mimeType: String?
        public var videoURL: String?
        public var previewImage: ImageAsset?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?

        public init(fileSize: Int? = nil, fileName: String? = nil, sourceFileChecksum: String? = nil, previewFrameTimeCode: String? = nil, mimeType: String? = nil, videoURL: String? = nil, previewImage: ImageAsset? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.sourceFileChecksum = sourceFileChecksum
            self.previewFrameTimeCode = previewFrameTimeCode
            self.mimeType = mimeType
            self.videoURL = videoURL
            self.previewImage = previewImage
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
        }

        private enum CodingKeys: String, CodingKey {
            case fileSize
            case fileName
            case sourceFileChecksum
            case previewFrameTimeCode
            case mimeType
            case videoURL = "videoUrl"
            case previewImage
            case uploadOperations
            case assetDeliveryState
        }
    }

    public struct Relationships: Codable {
        public var appPreviewSet: AppPreviewSet?

        public struct AppPreviewSet: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appPreviewSet: AppPreviewSet? = nil) {
            self.appPreviewSet = appPreviewSet
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppPreviewsResponse: Codable {
    public var data: [AppPreview]
    public var included: [AppPreviewSet]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppPreview], included: [AppPreviewSet]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppPreviewResponse: Codable {
    /// AppPreview
    public var data: AppPreview
    public var included: [AppPreviewSet]?
    public var links: DocumentLinks

    public init(data: AppPreview, included: [AppPreviewSet]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPreviewCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String
            public var previewFrameTimeCode: String?
            public var mimeType: String?

            public init(fileSize: Int, fileName: String, previewFrameTimeCode: String? = nil, mimeType: String? = nil) {
                self.fileSize = fileSize
                self.fileName = fileName
                self.previewFrameTimeCode = previewFrameTimeCode
                self.mimeType = mimeType
            }
        }

        public struct Relationships: Codable {
            public var appPreviewSet: AppPreviewSet

            public struct AppPreviewSet: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appPreviewSets
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appPreviewSet: AppPreviewSet) {
                self.appPreviewSet = appPreviewSet
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreviewUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var previewFrameTimeCode: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, previewFrameTimeCode: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.previewFrameTimeCode = previewFrameTimeCode
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case previewFrameTimeCode
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPricePointV2: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPricePoints
    }

    public struct Attributes: Codable {
        public var customerPrice: String?
        public var proceeds: String?

        public init(customerPrice: String? = nil, proceeds: String? = nil) {
            self.customerPrice = customerPrice
            self.proceeds = proceeds
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var priceTier: PriceTier?
        public var territory: Territory?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PriceTier: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPriceTiers
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Territory: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil, priceTier: PriceTier? = nil, territory: Territory? = nil) {
            self.app = app
            self.priceTier = priceTier
            self.territory = territory
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppPricePointsV2Response: Codable {
    public var data: [AppPricePointV2]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case appPriceTier(AppPriceTier)
        case territory(Territory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appPriceTier(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppPricePointV2], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppPricePoint: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPricePoints
    }

    public struct Attributes: Codable {
        public var customerPrice: String?
        public var proceeds: String?

        public init(customerPrice: String? = nil, proceeds: String? = nil) {
            self.customerPrice = customerPrice
            self.proceeds = proceeds
        }
    }

    public struct Relationships: Codable {
        public var priceTier: PriceTier?
        public var territory: Territory?

        public struct PriceTier: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPriceTiers
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Territory: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(priceTier: PriceTier? = nil, territory: Territory? = nil) {
            self.priceTier = priceTier
            self.territory = territory
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppPricePointsResponse: Codable {
    public var data: [AppPricePoint]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appPriceTier(AppPriceTier)
        case territory(Territory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appPriceTier(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppPricePoint], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppPricePointResponse: Codable {
    /// AppPricePoint
    ///
    /// - warning: Deprecated.
    public var data: AppPricePoint
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appPriceTier(AppPriceTier)
        case territory(Territory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appPriceTier(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppPricePoint, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPriceTier: Codable {
    public var type: `Type`
    public var id: String
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPriceTiers
    }

    public struct Relationships: Codable {
        /// - warning: Deprecated.
        public var pricePoints: PricePoints?

        @available(*, deprecated, message: "Deprecated")
        public struct PricePoints: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPricePoints
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(pricePoints: PricePoints? = nil) {
            self.pricePoints = pricePoints
        }
    }

    public init(type: `Type`, id: String, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.relationships = relationships
        self.links = links
    }
}

public struct AppPriceTiersResponse: Codable {
    public var data: [AppPriceTier]
    public var included: [AppPricePoint]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppPriceTier], included: [AppPricePoint]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppPriceTierResponse: Codable {
    /// AppPriceTier
    public var data: AppPriceTier
    public var included: [AppPricePoint]?
    public var links: DocumentLinks

    public init(data: AppPriceTier, included: [AppPricePoint]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPrice: Codable {
    public var type: `Type`
    public var id: String
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPrices
    }

    public struct Relationships: Codable {
        public var app: App?
        public var priceTier: PriceTier?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PriceTier: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPriceTiers
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil, priceTier: PriceTier? = nil) {
            self.app = app
            self.priceTier = priceTier
        }
    }

    public init(type: `Type`, id: String, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.relationships = relationships
        self.links = links
    }
}

public struct AppPriceInlineCreate: Codable {
    public var type: `Type`
    public var id: String?

    public enum `Type`: String, Codable, CaseIterable {
        case appPrices
    }

    public init(type: `Type`, id: String? = nil) {
        self.type = type
        self.id = id
    }
}

public struct AppPricesResponse: Codable {
    public var data: [AppPrice]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case appPriceTier(AppPriceTier)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appPriceTier(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppPrice], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppPriceResponse: Codable {
    /// AppPrice
    public var data: AppPrice
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case appPriceTier(AppPriceTier)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appPriceTier(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppPrice, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppScreenshotSet: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appScreenshotSets
    }

    public struct Attributes: Codable {
        public var screenshotDisplayType: ScreenshotDisplayType?

        public init(screenshotDisplayType: ScreenshotDisplayType? = nil) {
            self.screenshotDisplayType = screenshotDisplayType
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersionLocalization: AppStoreVersionLocalization?
        public var appCustomProductPageLocalization: AppCustomProductPageLocalization?
        public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?
        public var appScreenshots: AppScreenshots?

        public struct AppStoreVersionLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppCustomProductPageLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatmentLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppScreenshots: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshots
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil, appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil, appScreenshots: AppScreenshots? = nil) {
            self.appStoreVersionLocalization = appStoreVersionLocalization
            self.appCustomProductPageLocalization = appCustomProductPageLocalization
            self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
            self.appScreenshots = appScreenshots
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppScreenshotSetsResponse: Codable {
    public var data: [AppScreenshotSet]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appScreenshot(AppScreenshot)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppScreenshot.self) {
                self = .appScreenshot(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appScreenshot(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppScreenshotSet], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppScreenshotSetResponse: Codable {
    /// AppScreenshotSet
    public var data: AppScreenshotSet
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appScreenshot(AppScreenshot)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppScreenshot.self) {
                self = .appScreenshot(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appScreenshot(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppScreenshotSet, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppScreenshotSetCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshotSets
        }

        public struct Attributes: Codable {
            public var screenshotDisplayType: ScreenshotDisplayType

            public init(screenshotDisplayType: ScreenshotDisplayType) {
                self.screenshotDisplayType = screenshotDisplayType
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersionLocalization: AppStoreVersionLocalization?
            public var appCustomProductPageLocalization: AppCustomProductPageLocalization?
            public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?

            public struct AppStoreVersionLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatmentLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil, appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil) {
                self.appStoreVersionLocalization = appStoreVersionLocalization
                self.appCustomProductPageLocalization = appCustomProductPageLocalization
                self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships? = nil) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshot: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appScreenshots
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var sourceFileChecksum: String?
        public var imageAsset: ImageAsset?
        public var assetToken: String?
        public var assetType: String?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?

        public init(fileSize: Int? = nil, fileName: String? = nil, sourceFileChecksum: String? = nil, imageAsset: ImageAsset? = nil, assetToken: String? = nil, assetType: String? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.sourceFileChecksum = sourceFileChecksum
            self.imageAsset = imageAsset
            self.assetToken = assetToken
            self.assetType = assetType
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
        }
    }

    public struct Relationships: Codable {
        public var appScreenshotSet: AppScreenshotSet?

        public struct AppScreenshotSet: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appScreenshotSet: AppScreenshotSet? = nil) {
            self.appScreenshotSet = appScreenshotSet
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppScreenshotsResponse: Codable {
    public var data: [AppScreenshot]
    public var included: [AppScreenshotSet]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppScreenshot], included: [AppScreenshotSet]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppScreenshotResponse: Codable {
    /// AppScreenshot
    public var data: AppScreenshot
    public var included: [AppScreenshotSet]?
    public var links: DocumentLinks

    public init(data: AppScreenshot, included: [AppScreenshotSet]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppScreenshotCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public struct Relationships: Codable {
            public var appScreenshotSet: AppScreenshotSet

            public struct AppScreenshotSet: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appScreenshotSets
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appScreenshotSet: AppScreenshotSet) {
                self.appScreenshotSet = appScreenshotSet
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewAttachment: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreReviewAttachments
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?

        public init(fileSize: Int? = nil, fileName: String? = nil, sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
        }
    }

    public struct Relationships: Codable {
        public var appStoreReviewDetail: AppStoreReviewDetail?

        public struct AppStoreReviewDetail: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewDetails
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appStoreReviewDetail: AppStoreReviewDetail? = nil) {
            self.appStoreReviewDetail = appStoreReviewDetail
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppStoreReviewAttachmentsResponse: Codable {
    public var data: [AppStoreReviewAttachment]
    public var included: [AppStoreReviewDetail]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppStoreReviewAttachment], included: [AppStoreReviewDetail]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreReviewAttachmentResponse: Codable {
    /// AppStoreReviewAttachment
    public var data: AppStoreReviewAttachment
    public var included: [AppStoreReviewDetail]?
    public var links: DocumentLinks

    public init(data: AppStoreReviewAttachment, included: [AppStoreReviewDetail]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreReviewAttachmentCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewAttachments
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public struct Relationships: Codable {
            public var appStoreReviewDetail: AppStoreReviewDetail

            public struct AppStoreReviewDetail: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreReviewDetails
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreReviewDetail: AppStoreReviewDetail) {
                self.appStoreReviewDetail = appStoreReviewDetail
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewAttachmentUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewAttachments
        }

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewDetail: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreReviewDetails
    }

    public struct Attributes: Codable {
        public var contactFirstName: String?
        public var contactLastName: String?
        public var contactPhone: String?
        public var contactEmail: String?
        public var demoAccountName: String?
        public var demoAccountPassword: String?
        public var isDemoAccountRequired: Bool?
        public var notes: String?

        public init(contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, contactEmail: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
            self.contactFirstName = contactFirstName
            self.contactLastName = contactLastName
            self.contactPhone = contactPhone
            self.contactEmail = contactEmail
            self.demoAccountName = demoAccountName
            self.demoAccountPassword = demoAccountPassword
            self.isDemoAccountRequired = isDemoAccountRequired
            self.notes = notes
        }

        private enum CodingKeys: String, CodingKey {
            case contactFirstName
            case contactLastName
            case contactPhone
            case contactEmail
            case demoAccountName
            case demoAccountPassword
            case isDemoAccountRequired = "demoAccountRequired"
            case notes
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?
        public var appStoreReviewAttachments: AppStoreReviewAttachments?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreReviewAttachments: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewAttachments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil, appStoreReviewAttachments: AppStoreReviewAttachments? = nil) {
            self.appStoreVersion = appStoreVersion
            self.appStoreReviewAttachments = appStoreReviewAttachments
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppStoreReviewDetailResponse: Codable {
    /// AppStoreReviewDetail
    public var data: AppStoreReviewDetail
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appStoreReviewAttachment(AppStoreReviewAttachment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppStoreReviewAttachment.self) {
                self = .appStoreReviewAttachment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appStoreReviewAttachment(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreReviewDetail, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreReviewDetailCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewDetails
        }

        public struct Attributes: Codable {
            public var contactFirstName: String?
            public var contactLastName: String?
            public var contactPhone: String?
            public var contactEmail: String?
            public var demoAccountName: String?
            public var demoAccountPassword: String?
            public var isDemoAccountRequired: Bool?
            public var notes: String?

            public init(contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, contactEmail: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
                self.contactFirstName = contactFirstName
                self.contactLastName = contactLastName
                self.contactPhone = contactPhone
                self.contactEmail = contactEmail
                self.demoAccountName = demoAccountName
                self.demoAccountPassword = demoAccountPassword
                self.isDemoAccountRequired = isDemoAccountRequired
                self.notes = notes
            }

            private enum CodingKeys: String, CodingKey {
                case contactFirstName
                case contactLastName
                case contactPhone
                case contactEmail
                case demoAccountName
                case demoAccountPassword
                case isDemoAccountRequired = "demoAccountRequired"
                case notes
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewDetails
        }

        public struct Attributes: Codable {
            public var contactFirstName: String?
            public var contactLastName: String?
            public var contactPhone: String?
            public var contactEmail: String?
            public var demoAccountName: String?
            public var demoAccountPassword: String?
            public var isDemoAccountRequired: Bool?
            public var notes: String?

            public init(contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, contactEmail: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
                self.contactFirstName = contactFirstName
                self.contactLastName = contactLastName
                self.contactPhone = contactPhone
                self.contactEmail = contactEmail
                self.demoAccountName = demoAccountName
                self.demoAccountPassword = demoAccountPassword
                self.isDemoAccountRequired = isDemoAccountRequired
                self.notes = notes
            }

            private enum CodingKeys: String, CodingKey {
                case contactFirstName
                case contactLastName
                case contactPhone
                case contactEmail
                case demoAccountName
                case demoAccountPassword
                case isDemoAccountRequired = "demoAccountRequired"
                case notes
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionExperimentTreatmentLocalizations
    }

    public struct Attributes: Codable {
        public var locale: String?

        public init(locale: String? = nil) {
            self.locale = locale
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment?
        public var appScreenshotSets: AppScreenshotSets?
        public var appPreviewSets: AppPreviewSets?

        public struct AppStoreVersionExperimentTreatment: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppScreenshotSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppPreviewSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment? = nil, appScreenshotSets: AppScreenshotSets? = nil, appPreviewSets: AppPreviewSets? = nil) {
            self.appStoreVersionExperimentTreatment = appStoreVersionExperimentTreatment
            self.appScreenshotSets = appScreenshotSets
            self.appPreviewSets = appPreviewSets
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppStoreVersionExperimentTreatmentLocalizationsResponse: Codable {
    public var data: [AppStoreVersionExperimentTreatmentLocalization]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppStoreVersionExperimentTreatmentLocalization], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionExperimentTreatmentLocalizationResponse: Codable {
    /// AppStoreVersionExperimentTreatmentLocalization
    public var data: AppStoreVersionExperimentTreatmentLocalization
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersionExperimentTreatmentLocalization, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreVersionExperimentTreatmentLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperimentTreatmentLocalizations
        }

        public struct Attributes: Codable {
            public var locale: String

            public init(locale: String) {
                self.locale = locale
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment

            public struct AppStoreVersionExperimentTreatment: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatments
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment) {
                self.appStoreVersionExperimentTreatment = appStoreVersionExperimentTreatment
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionExperimentTreatment: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionExperimentTreatments
    }

    public struct Attributes: Codable {
        public var name: String?
        public var appIcon: ImageAsset?
        public var appIconName: String?
        public var promotedDate: Date?

        public init(name: String? = nil, appIcon: ImageAsset? = nil, appIconName: String? = nil, promotedDate: Date? = nil) {
            self.name = name
            self.appIcon = appIcon
            self.appIconName = appIconName
            self.promotedDate = promotedDate
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersionExperiment: AppStoreVersionExperiment?
        public var appStoreVersionExperimentTreatmentLocalizations: AppStoreVersionExperimentTreatmentLocalizations?

        public struct AppStoreVersionExperiment: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperimentTreatmentLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatmentLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appStoreVersionExperiment: AppStoreVersionExperiment? = nil, appStoreVersionExperimentTreatmentLocalizations: AppStoreVersionExperimentTreatmentLocalizations? = nil) {
            self.appStoreVersionExperiment = appStoreVersionExperiment
            self.appStoreVersionExperimentTreatmentLocalizations = appStoreVersionExperimentTreatmentLocalizations
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppStoreVersionExperimentTreatmentsResponse: Codable {
    public var data: [AppStoreVersionExperimentTreatment]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppStoreVersionExperimentTreatment], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionExperimentTreatmentResponse: Codable {
    /// AppStoreVersionExperimentTreatment
    public var data: AppStoreVersionExperimentTreatment
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersionExperimentTreatment, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreVersionExperimentTreatmentCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperimentTreatments
        }

        public struct Attributes: Codable {
            public var name: String
            public var appIconName: String?

            public init(name: String, appIconName: String? = nil) {
                self.name = name
                self.appIconName = appIconName
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersionExperiment: AppStoreVersionExperiment

            public struct AppStoreVersionExperiment: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperiments
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersionExperiment: AppStoreVersionExperiment) {
                self.appStoreVersionExperiment = appStoreVersionExperiment
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionExperimentTreatmentUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperimentTreatments
        }

        public struct Attributes: Codable {
            public var name: String?
            public var appIconName: String?

            public init(name: String? = nil, appIconName: String? = nil) {
                self.name = name
                self.appIconName = appIconName
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionExperiment: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionExperiments
    }

    public struct Attributes: Codable {
        public var name: String?
        public var trafficProportion: Int?
        public var state: State?
        public var isReviewRequired: Bool?
        public var startDate: Date?
        public var endDate: Date?

        public enum State: String, Codable, CaseIterable {
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case rejected = "REJECTED"
            case completed = "COMPLETED"
            case stopped = "STOPPED"
        }

        public init(name: String? = nil, trafficProportion: Int? = nil, state: State? = nil, isReviewRequired: Bool? = nil, startDate: Date? = nil, endDate: Date? = nil) {
            self.name = name
            self.trafficProportion = trafficProportion
            self.state = state
            self.isReviewRequired = isReviewRequired
            self.startDate = startDate
            self.endDate = endDate
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case trafficProportion
            case state
            case isReviewRequired = "reviewRequired"
            case startDate
            case endDate
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?
        public var appStoreVersionExperimentTreatments: AppStoreVersionExperimentTreatments?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperimentTreatments: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil, appStoreVersionExperimentTreatments: AppStoreVersionExperimentTreatments? = nil) {
            self.appStoreVersion = appStoreVersion
            self.appStoreVersionExperimentTreatments = appStoreVersionExperimentTreatments
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppStoreVersionExperimentsResponse: Codable {
    public var data: [AppStoreVersionExperiment]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppStoreVersionExperiment], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionExperimentResponse: Codable {
    /// AppStoreVersionExperiment
    public var data: AppStoreVersionExperiment
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersionExperiment, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreVersionExperimentCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperiments
        }

        public struct Attributes: Codable {
            public var name: String
            public var trafficProportion: Int

            public init(name: String, trafficProportion: Int) {
                self.name = name
                self.trafficProportion = trafficProportion
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionExperimentUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperiments
        }

        public struct Attributes: Codable {
            public var name: String?
            public var trafficProportion: Int?
            public var isStarted: Bool?

            public init(name: String? = nil, trafficProportion: Int? = nil, isStarted: Bool? = nil) {
                self.name = name
                self.trafficProportion = trafficProportion
                self.isStarted = isStarted
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case trafficProportion
                case isStarted = "started"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionLocalizations
    }

    public struct Attributes: Codable {
        public var description: String?
        public var locale: String?
        public var keywords: String?
        public var marketingURL: URL?
        public var promotionalText: String?
        public var supportURL: URL?
        public var whatsNew: String?

        public init(description: String? = nil, locale: String? = nil, keywords: String? = nil, marketingURL: URL? = nil, promotionalText: String? = nil, supportURL: URL? = nil, whatsNew: String? = nil) {
            self.description = description
            self.locale = locale
            self.keywords = keywords
            self.marketingURL = marketingURL
            self.promotionalText = promotionalText
            self.supportURL = supportURL
            self.whatsNew = whatsNew
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case locale
            case keywords
            case marketingURL = "marketingUrl"
            case promotionalText
            case supportURL = "supportUrl"
            case whatsNew
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?
        public var appScreenshotSets: AppScreenshotSets?
        public var appPreviewSets: AppPreviewSets?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppScreenshotSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppPreviewSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil, appScreenshotSets: AppScreenshotSets? = nil, appPreviewSets: AppPreviewSets? = nil) {
            self.appStoreVersion = appStoreVersion
            self.appScreenshotSets = appScreenshotSets
            self.appPreviewSets = appPreviewSets
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppStoreVersionLocalizationsResponse: Codable {
    public var data: [AppStoreVersionLocalization]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppStoreVersionLocalization], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionLocalizationResponse: Codable {
    /// AppStoreVersionLocalization
    public var data: AppStoreVersionLocalization
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersionLocalization, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreVersionLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionLocalizations
        }

        public struct Attributes: Codable {
            public var description: String?
            public var locale: String
            public var keywords: String?
            public var marketingURL: URL?
            public var promotionalText: String?
            public var supportURL: URL?
            public var whatsNew: String?

            public init(description: String? = nil, locale: String, keywords: String? = nil, marketingURL: URL? = nil, promotionalText: String? = nil, supportURL: URL? = nil, whatsNew: String? = nil) {
                self.description = description
                self.locale = locale
                self.keywords = keywords
                self.marketingURL = marketingURL
                self.promotionalText = promotionalText
                self.supportURL = supportURL
                self.whatsNew = whatsNew
            }

            private enum CodingKeys: String, CodingKey {
                case description
                case locale
                case keywords
                case marketingURL = "marketingUrl"
                case promotionalText
                case supportURL = "supportUrl"
                case whatsNew
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionLocalizations
        }

        public struct Attributes: Codable {
            public var description: String?
            public var keywords: String?
            public var marketingURL: URL?
            public var promotionalText: String?
            public var supportURL: URL?
            public var whatsNew: String?

            public init(description: String? = nil, keywords: String? = nil, marketingURL: URL? = nil, promotionalText: String? = nil, supportURL: URL? = nil, whatsNew: String? = nil) {
                self.description = description
                self.keywords = keywords
                self.marketingURL = marketingURL
                self.promotionalText = promotionalText
                self.supportURL = supportURL
                self.whatsNew = whatsNew
            }

            private enum CodingKeys: String, CodingKey {
                case description
                case keywords
                case marketingURL = "marketingUrl"
                case promotionalText
                case supportURL = "supportUrl"
                case whatsNew
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionPhasedRelease: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionPhasedReleases
    }

    public struct Attributes: Codable {
        public var phasedReleaseState: PhasedReleaseState?
        public var startDate: Date?
        public var totalPauseDuration: Int?
        public var currentDayNumber: Int?

        public init(phasedReleaseState: PhasedReleaseState? = nil, startDate: Date? = nil, totalPauseDuration: Int? = nil, currentDayNumber: Int? = nil) {
            self.phasedReleaseState = phasedReleaseState
            self.startDate = startDate
            self.totalPauseDuration = totalPauseDuration
            self.currentDayNumber = currentDayNumber
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AppStoreVersionPhasedReleaseResponse: Codable {
    /// AppStoreVersionPhasedRelease
    public var data: AppStoreVersionPhasedRelease
    public var links: DocumentLinks

    public init(data: AppStoreVersionPhasedRelease, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionPhasedReleaseCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPhasedReleases
        }

        public struct Attributes: Codable {
            public var phasedReleaseState: PhasedReleaseState?

            public init(phasedReleaseState: PhasedReleaseState? = nil) {
                self.phasedReleaseState = phasedReleaseState
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionPhasedReleaseUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPhasedReleases
        }

        public struct Attributes: Codable {
            public var phasedReleaseState: PhasedReleaseState?

            public init(phasedReleaseState: PhasedReleaseState? = nil) {
                self.phasedReleaseState = phasedReleaseState
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionPromotion: Codable {
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionPromotions
    }

    public init(type: `Type`, id: String, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.links = links
    }
}

public struct AppStoreVersionPromotionResponse: Codable {
    /// AppStoreVersionPromotion
    public var data: AppStoreVersionPromotion
    public var links: DocumentLinks

    public init(data: AppStoreVersionPromotion, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionPromotionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPromotions
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion
            public var appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppStoreVersionExperimentTreatment: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatments
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion, appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment) {
                self.appStoreVersion = appStoreVersion
                self.appStoreVersionExperimentTreatment = appStoreVersionExperimentTreatment
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionReleaseRequest: Codable {
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionReleaseRequests
    }

    public init(type: `Type`, id: String, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.links = links
    }
}

public struct AppStoreVersionReleaseRequestResponse: Codable {
    /// AppStoreVersionReleaseRequest
    public var data: AppStoreVersionReleaseRequest
    public var links: DocumentLinks

    public init(data: AppStoreVersionReleaseRequest, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionReleaseRequestCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionReleaseRequests
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppStoreVersionSubmission: Codable {
    public var type: `Type`
    public var id: String
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionSubmissions
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public init(type: `Type`, id: String, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.relationships = relationships
        self.links = links
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppStoreVersionSubmissionResponse: Codable {
    /// AppStoreVersionSubmission
    ///
    /// - warning: Deprecated.
    public var data: AppStoreVersionSubmission
    public var included: [AppStoreVersion]?
    public var links: DocumentLinks

    public init(data: AppStoreVersionSubmission, included: [AppStoreVersion]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppStoreVersionSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionSubmissions
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersion: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersions
    }

    public struct Attributes: Codable {
        public var platform: Platform?
        public var versionString: String?
        public var appStoreState: AppStoreVersionState?
        public var copyright: String?
        public var releaseType: ReleaseType?
        public var earliestReleaseDate: Date?
        /// - warning: Deprecated.
        public var usesIdfa: Bool?
        public var isDownloadable: Bool?
        public var createdDate: Date?

        public enum ReleaseType: String, Codable, CaseIterable {
            case manual = "MANUAL"
            case afterApproval = "AFTER_APPROVAL"
            case scheduled = "SCHEDULED"
        }

        public init(platform: Platform? = nil, versionString: String? = nil, appStoreState: AppStoreVersionState? = nil, copyright: String? = nil, releaseType: ReleaseType? = nil, earliestReleaseDate: Date? = nil, usesIdfa: Bool? = nil, isDownloadable: Bool? = nil, createdDate: Date? = nil) {
            self.platform = platform
            self.versionString = versionString
            self.appStoreState = appStoreState
            self.copyright = copyright
            self.releaseType = releaseType
            self.earliestReleaseDate = earliestReleaseDate
            self.usesIdfa = usesIdfa
            self.isDownloadable = isDownloadable
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case platform
            case versionString
            case appStoreState
            case copyright
            case releaseType
            case earliestReleaseDate
            case usesIdfa
            case isDownloadable = "downloadable"
            case createdDate
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        /// - warning: Deprecated.
        public var ageRatingDeclaration: AgeRatingDeclaration?
        public var appStoreVersionLocalizations: AppStoreVersionLocalizations?
        public var build: Build?
        public var appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease?
        public var routingAppCoverage: RoutingAppCoverage?
        public var appStoreReviewDetail: AppStoreReviewDetail?
        public var appStoreVersionSubmission: AppStoreVersionSubmission?
        public var idfaDeclaration: IdfaDeclaration?
        public var appClipDefaultExperience: AppClipDefaultExperience?
        public var appStoreVersionExperiments: AppStoreVersionExperiments?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        @available(*, deprecated, message: "Deprecated")
        public struct AgeRatingDeclaration: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ageRatingDeclarations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Build: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionPhasedRelease: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionPhasedReleases
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct RoutingAppCoverage: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case routingAppCoverages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreReviewDetail: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewDetails
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionSubmission: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionSubmissions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct IdfaDeclaration: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case idfaDeclarations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppClipDefaultExperience: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperiments: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(app: App? = nil, ageRatingDeclaration: AgeRatingDeclaration? = nil, appStoreVersionLocalizations: AppStoreVersionLocalizations? = nil, build: Build? = nil, appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease? = nil, routingAppCoverage: RoutingAppCoverage? = nil, appStoreReviewDetail: AppStoreReviewDetail? = nil, appStoreVersionSubmission: AppStoreVersionSubmission? = nil, idfaDeclaration: IdfaDeclaration? = nil, appClipDefaultExperience: AppClipDefaultExperience? = nil, appStoreVersionExperiments: AppStoreVersionExperiments? = nil) {
            self.app = app
            self.ageRatingDeclaration = ageRatingDeclaration
            self.appStoreVersionLocalizations = appStoreVersionLocalizations
            self.build = build
            self.appStoreVersionPhasedRelease = appStoreVersionPhasedRelease
            self.routingAppCoverage = routingAppCoverage
            self.appStoreReviewDetail = appStoreReviewDetail
            self.appStoreVersionSubmission = appStoreVersionSubmission
            self.idfaDeclaration = idfaDeclaration
            self.appClipDefaultExperience = appClipDefaultExperience
            self.appStoreVersionExperiments = appStoreVersionExperiments
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppStoreVersionsResponse: Codable {
    public var data: [AppStoreVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case build(Build)
        case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
        case routingAppCoverage(RoutingAppCoverage)
        case appStoreReviewDetail(AppStoreReviewDetail)
        case appStoreVersionSubmission(AppStoreVersionSubmission)
        case idfaDeclaration(IdfaDeclaration)
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appStoreVersionExperiment(AppStoreVersionExperiment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(AppStoreVersionPhasedRelease.self) {
                self = .appStoreVersionPhasedRelease(value)
            } else if let value = try? container.decode(RoutingAppCoverage.self) {
                self = .routingAppCoverage(value)
            } else if let value = try? container.decode(AppStoreReviewDetail.self) {
                self = .appStoreReviewDetail(value)
            } else if let value = try? container.decode(AppStoreVersionSubmission.self) {
                self = .appStoreVersionSubmission(value)
            } else if let value = try? container.decode(IdfaDeclaration.self) {
                self = .idfaDeclaration(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .appStoreVersionPhasedRelease(let value): try container.encode(value)
            case .routingAppCoverage(let value): try container.encode(value)
            case .appStoreReviewDetail(let value): try container.encode(value)
            case .appStoreVersionSubmission(let value): try container.encode(value)
            case .idfaDeclaration(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppStoreVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionResponse: Codable {
    /// AppStoreVersion
    public var data: AppStoreVersion
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case build(Build)
        case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
        case routingAppCoverage(RoutingAppCoverage)
        case appStoreReviewDetail(AppStoreReviewDetail)
        case appStoreVersionSubmission(AppStoreVersionSubmission)
        case idfaDeclaration(IdfaDeclaration)
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appStoreVersionExperiment(AppStoreVersionExperiment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(AppStoreVersionPhasedRelease.self) {
                self = .appStoreVersionPhasedRelease(value)
            } else if let value = try? container.decode(RoutingAppCoverage.self) {
                self = .routingAppCoverage(value)
            } else if let value = try? container.decode(AppStoreReviewDetail.self) {
                self = .appStoreReviewDetail(value)
            } else if let value = try? container.decode(AppStoreVersionSubmission.self) {
                self = .appStoreVersionSubmission(value)
            } else if let value = try? container.decode(IdfaDeclaration.self) {
                self = .idfaDeclaration(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .appStoreVersionPhasedRelease(let value): try container.encode(value)
            case .routingAppCoverage(let value): try container.encode(value)
            case .appStoreReviewDetail(let value): try container.encode(value)
            case .appStoreVersionSubmission(let value): try container.encode(value)
            case .idfaDeclaration(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersion, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreVersionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public struct Attributes: Codable {
            public var platform: Platform
            public var versionString: String
            public var copyright: String?
            public var releaseType: ReleaseType?
            public var earliestReleaseDate: Date?
            /// - warning: Deprecated.
            public var usesIdfa: Bool?

            public enum ReleaseType: String, Codable, CaseIterable {
                case manual = "MANUAL"
                case afterApproval = "AFTER_APPROVAL"
                case scheduled = "SCHEDULED"
            }

            public init(platform: Platform, versionString: String, copyright: String? = nil, releaseType: ReleaseType? = nil, earliestReleaseDate: Date? = nil, usesIdfa: Bool? = nil) {
                self.platform = platform
                self.versionString = versionString
                self.copyright = copyright
                self.releaseType = releaseType
                self.earliestReleaseDate = earliestReleaseDate
                self.usesIdfa = usesIdfa
            }
        }

        public struct Relationships: Codable {
            public var app: App
            public var appStoreVersionLocalizations: AppStoreVersionLocalizations?
            public var build: Build?

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppStoreVersionLocalizations: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Build: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(app: App, appStoreVersionLocalizations: AppStoreVersionLocalizations? = nil, build: Build? = nil) {
                self.app = app
                self.appStoreVersionLocalizations = appStoreVersionLocalizations
                self.build = build
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public struct Attributes: Codable {
            public var versionString: String?
            public var copyright: String?
            public var releaseType: ReleaseType?
            public var earliestReleaseDate: Date?
            /// - warning: Deprecated.
            public var usesIdfa: Bool?
            public var isDownloadable: Bool?

            public enum ReleaseType: String, Codable, CaseIterable {
                case manual = "MANUAL"
                case afterApproval = "AFTER_APPROVAL"
                case scheduled = "SCHEDULED"
            }

            public init(versionString: String? = nil, copyright: String? = nil, releaseType: ReleaseType? = nil, earliestReleaseDate: Date? = nil, usesIdfa: Bool? = nil, isDownloadable: Bool? = nil) {
                self.versionString = versionString
                self.copyright = copyright
                self.releaseType = releaseType
                self.earliestReleaseDate = earliestReleaseDate
                self.usesIdfa = usesIdfa
                self.isDownloadable = isDownloadable
            }

            private enum CodingKeys: String, CodingKey {
                case versionString
                case copyright
                case releaseType
                case earliestReleaseDate
                case usesIdfa
                case isDownloadable = "downloadable"
            }
        }

        public struct Relationships: Codable {
            public var build: Build?
            public var appClipDefaultExperience: AppClipDefaultExperience?

            public struct Build: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppClipDefaultExperience: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(build: Build? = nil, appClipDefaultExperience: AppClipDefaultExperience? = nil) {
                self.build = build
                self.appClipDefaultExperience = appClipDefaultExperience
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct App: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case apps
    }

    public struct Attributes: Codable {
        public var name: String?
        public var bundleID: String?
        public var sku: String?
        public var primaryLocale: String?
        public var isOrEverWasMadeForKids: Bool?
        public var subscriptionStatusURL: URL?
        public var subscriptionStatusURLVersion: SubscriptionStatusURLVersion?
        public var subscriptionStatusURLForSandbox: URL?
        public var subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion?
        public var isAvailableInNewTerritories: Bool?
        public var contentRightsDeclaration: ContentRightsDeclaration?

        public enum ContentRightsDeclaration: String, Codable, CaseIterable {
            case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
            case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
        }

        public init(name: String? = nil, bundleID: String? = nil, sku: String? = nil, primaryLocale: String? = nil, isOrEverWasMadeForKids: Bool? = nil, subscriptionStatusURL: URL? = nil, subscriptionStatusURLVersion: SubscriptionStatusURLVersion? = nil, subscriptionStatusURLForSandbox: URL? = nil, subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion? = nil, isAvailableInNewTerritories: Bool? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil) {
            self.name = name
            self.bundleID = bundleID
            self.sku = sku
            self.primaryLocale = primaryLocale
            self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
            self.subscriptionStatusURL = subscriptionStatusURL
            self.subscriptionStatusURLVersion = subscriptionStatusURLVersion
            self.subscriptionStatusURLForSandbox = subscriptionStatusURLForSandbox
            self.subscriptionStatusURLVersionForSandbox = subscriptionStatusURLVersionForSandbox
            self.isAvailableInNewTerritories = isAvailableInNewTerritories
            self.contentRightsDeclaration = contentRightsDeclaration
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case bundleID = "bundleId"
            case sku
            case primaryLocale
            case isOrEverWasMadeForKids
            case subscriptionStatusURL = "subscriptionStatusUrl"
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case isAvailableInNewTerritories = "availableInNewTerritories"
            case contentRightsDeclaration
        }
    }

    public struct Relationships: Codable {
        public var ciProduct: CiProduct?
        public var betaGroups: BetaGroups?
        public var appStoreVersions: AppStoreVersions?
        public var preReleaseVersions: PreReleaseVersions?
        public var betaAppLocalizations: BetaAppLocalizations?
        public var builds: Builds?
        public var betaLicenseAgreement: BetaLicenseAgreement?
        public var betaAppReviewDetail: BetaAppReviewDetail?
        public var appInfos: AppInfos?
        public var appClips: AppClips?
        public var endUserLicenseAgreement: EndUserLicenseAgreement?
        public var preOrder: PreOrder?
        public var prices: Prices?
        public var availableTerritories: AvailableTerritories?
        public var inAppPurchases: InAppPurchases?
        public var gameCenterEnabledVersions: GameCenterEnabledVersions?
        public var appCustomProductPages: AppCustomProductPages?
        public var appEvents: AppEvents?
        public var reviewSubmissions: ReviewSubmissions?

        public struct CiProduct: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciProducts
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaGroups: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaGroups
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppStoreVersions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct PreReleaseVersions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case preReleaseVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaAppLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Builds: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaLicenseAgreement: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaLicenseAgreements
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaAppReviewDetail: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppReviewDetails
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppInfos: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfos
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppClips: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClips
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct EndUserLicenseAgreement: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case endUserLicenseAgreements
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PreOrder: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreOrders
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Prices: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPrices
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AvailableTerritories: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct InAppPurchases: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case inAppPurchases
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct GameCenterEnabledVersions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case gameCenterEnabledVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppCustomProductPages: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppEvents: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEvents
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct ReviewSubmissions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case reviewSubmissions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(ciProduct: CiProduct? = nil, betaGroups: BetaGroups? = nil, appStoreVersions: AppStoreVersions? = nil, preReleaseVersions: PreReleaseVersions? = nil, betaAppLocalizations: BetaAppLocalizations? = nil, builds: Builds? = nil, betaLicenseAgreement: BetaLicenseAgreement? = nil, betaAppReviewDetail: BetaAppReviewDetail? = nil, appInfos: AppInfos? = nil, appClips: AppClips? = nil, endUserLicenseAgreement: EndUserLicenseAgreement? = nil, preOrder: PreOrder? = nil, prices: Prices? = nil, availableTerritories: AvailableTerritories? = nil, inAppPurchases: InAppPurchases? = nil, gameCenterEnabledVersions: GameCenterEnabledVersions? = nil, appCustomProductPages: AppCustomProductPages? = nil, appEvents: AppEvents? = nil, reviewSubmissions: ReviewSubmissions? = nil) {
            self.ciProduct = ciProduct
            self.betaGroups = betaGroups
            self.appStoreVersions = appStoreVersions
            self.preReleaseVersions = preReleaseVersions
            self.betaAppLocalizations = betaAppLocalizations
            self.builds = builds
            self.betaLicenseAgreement = betaLicenseAgreement
            self.betaAppReviewDetail = betaAppReviewDetail
            self.appInfos = appInfos
            self.appClips = appClips
            self.endUserLicenseAgreement = endUserLicenseAgreement
            self.preOrder = preOrder
            self.prices = prices
            self.availableTerritories = availableTerritories
            self.inAppPurchases = inAppPurchases
            self.gameCenterEnabledVersions = gameCenterEnabledVersions
            self.appCustomProductPages = appCustomProductPages
            self.appEvents = appEvents
            self.reviewSubmissions = reviewSubmissions
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct AppsResponse: Codable {
    public var data: [App]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case betaGroup(BetaGroup)
        case appStoreVersion(AppStoreVersion)
        case prereleaseVersion(PrereleaseVersion)
        case betaAppLocalization(BetaAppLocalization)
        case build(Build)
        case betaLicenseAgreement(BetaLicenseAgreement)
        case betaAppReviewDetail(BetaAppReviewDetail)
        case appInfo(AppInfo)
        case appClip(AppClip)
        case endUserLicenseAgreement(EndUserLicenseAgreement)
        case appPreOrder(AppPreOrder)
        case appPrice(AppPrice)
        case territory(Territory)
        case inAppPurchase(InAppPurchase)
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case appCustomProductPage(AppCustomProductPage)
        case appEvent(AppEvent)
        case reviewSubmission(ReviewSubmission)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaAppLocalization.self) {
                self = .betaAppLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaLicenseAgreement.self) {
                self = .betaLicenseAgreement(value)
            } else if let value = try? container.decode(BetaAppReviewDetail.self) {
                self = .betaAppReviewDetail(value)
            } else if let value = try? container.decode(AppInfo.self) {
                self = .appInfo(value)
            } else if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(EndUserLicenseAgreement.self) {
                self = .endUserLicenseAgreement(value)
            } else if let value = try? container.decode(AppPreOrder.self) {
                self = .appPreOrder(value)
            } else if let value = try? container.decode(AppPrice.self) {
                self = .appPrice(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else if let value = try? container.decode(InAppPurchase.self) {
                self = .inAppPurchase(value)
            } else if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(ReviewSubmission.self) {
                self = .reviewSubmission(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaAppLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaLicenseAgreement(let value): try container.encode(value)
            case .betaAppReviewDetail(let value): try container.encode(value)
            case .appInfo(let value): try container.encode(value)
            case .appClip(let value): try container.encode(value)
            case .endUserLicenseAgreement(let value): try container.encode(value)
            case .appPreOrder(let value): try container.encode(value)
            case .appPrice(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            case .inAppPurchase(let value): try container.encode(value)
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .appCustomProductPage(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            case .reviewSubmission(let value): try container.encode(value)
            }
        }
    }

    public init(data: [App], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppResponse: Codable {
    /// App
    public var data: App
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case betaGroup(BetaGroup)
        case appStoreVersion(AppStoreVersion)
        case prereleaseVersion(PrereleaseVersion)
        case betaAppLocalization(BetaAppLocalization)
        case build(Build)
        case betaLicenseAgreement(BetaLicenseAgreement)
        case betaAppReviewDetail(BetaAppReviewDetail)
        case appInfo(AppInfo)
        case appClip(AppClip)
        case endUserLicenseAgreement(EndUserLicenseAgreement)
        case appPreOrder(AppPreOrder)
        case appPrice(AppPrice)
        case territory(Territory)
        case inAppPurchase(InAppPurchase)
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case appCustomProductPage(AppCustomProductPage)
        case appEvent(AppEvent)
        case reviewSubmission(ReviewSubmission)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaAppLocalization.self) {
                self = .betaAppLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaLicenseAgreement.self) {
                self = .betaLicenseAgreement(value)
            } else if let value = try? container.decode(BetaAppReviewDetail.self) {
                self = .betaAppReviewDetail(value)
            } else if let value = try? container.decode(AppInfo.self) {
                self = .appInfo(value)
            } else if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(EndUserLicenseAgreement.self) {
                self = .endUserLicenseAgreement(value)
            } else if let value = try? container.decode(AppPreOrder.self) {
                self = .appPreOrder(value)
            } else if let value = try? container.decode(AppPrice.self) {
                self = .appPrice(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else if let value = try? container.decode(InAppPurchase.self) {
                self = .inAppPurchase(value)
            } else if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(ReviewSubmission.self) {
                self = .reviewSubmission(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaAppLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaLicenseAgreement(let value): try container.encode(value)
            case .betaAppReviewDetail(let value): try container.encode(value)
            case .appInfo(let value): try container.encode(value)
            case .appClip(let value): try container.encode(value)
            case .endUserLicenseAgreement(let value): try container.encode(value)
            case .appPreOrder(let value): try container.encode(value)
            case .appPrice(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            case .inAppPurchase(let value): try container.encode(value)
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .appCustomProductPage(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            case .reviewSubmission(let value): try container.encode(value)
            }
        }
    }

    public init(data: App, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppUpdateRequest: Codable {
    public var data: Data
    public var included: [AppPriceInlineCreate]?

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public struct Attributes: Codable {
            public var bundleID: String?
            public var primaryLocale: String?
            public var subscriptionStatusURL: URL?
            public var subscriptionStatusURLVersion: SubscriptionStatusURLVersion?
            public var subscriptionStatusURLForSandbox: URL?
            public var subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion?
            public var isAvailableInNewTerritories: Bool?
            public var contentRightsDeclaration: ContentRightsDeclaration?

            public enum ContentRightsDeclaration: String, Codable, CaseIterable {
                case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
                case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
            }

            public init(bundleID: String? = nil, primaryLocale: String? = nil, subscriptionStatusURL: URL? = nil, subscriptionStatusURLVersion: SubscriptionStatusURLVersion? = nil, subscriptionStatusURLForSandbox: URL? = nil, subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion? = nil, isAvailableInNewTerritories: Bool? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil) {
                self.bundleID = bundleID
                self.primaryLocale = primaryLocale
                self.subscriptionStatusURL = subscriptionStatusURL
                self.subscriptionStatusURLVersion = subscriptionStatusURLVersion
                self.subscriptionStatusURLForSandbox = subscriptionStatusURLForSandbox
                self.subscriptionStatusURLVersionForSandbox = subscriptionStatusURLVersionForSandbox
                self.isAvailableInNewTerritories = isAvailableInNewTerritories
                self.contentRightsDeclaration = contentRightsDeclaration
            }

            private enum CodingKeys: String, CodingKey {
                case bundleID = "bundleId"
                case primaryLocale
                case subscriptionStatusURL = "subscriptionStatusUrl"
                case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
                case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
                case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                case isAvailableInNewTerritories = "availableInNewTerritories"
                case contentRightsDeclaration
            }
        }

        public struct Relationships: Codable {
            public var prices: Prices?
            public var availableTerritories: AvailableTerritories?

            public struct Prices: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appPrices
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct AvailableTerritories: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(prices: Prices? = nil, availableTerritories: AvailableTerritories? = nil) {
                self.prices = prices
                self.availableTerritories = availableTerritories
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data, included: [AppPriceInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}

public struct BetaAppClipInvocationLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppClipInvocationLocalizations
    }

    public struct Attributes: Codable {
        public var title: String?
        public var locale: String?

        public init(title: String? = nil, locale: String? = nil) {
            self.title = title
            self.locale = locale
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct BetaAppClipInvocationLocalizationInlineCreate: Codable {
    public var type: `Type`
    public var id: String?
    public var attributes: Attributes
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppClipInvocationLocalizations
    }

    public struct Attributes: Codable {
        public var title: String
        public var locale: String

        public init(title: String, locale: String) {
            self.title = title
            self.locale = locale
        }
    }

    public struct Relationships: Codable {
        public var betaAppClipInvocation: BetaAppClipInvocation?

        public struct BetaAppClipInvocation: Codable {
            public var data: Data?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppClipInvocations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(betaAppClipInvocation: BetaAppClipInvocation? = nil) {
            self.betaAppClipInvocation = betaAppClipInvocation
        }
    }

    public init(type: `Type`, id: String? = nil, attributes: Attributes, relationships: Relationships? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
    }
}

public struct BetaAppClipInvocationLocalizationResponse: Codable {
    /// BetaAppClipInvocationLocalization
    public var data: BetaAppClipInvocationLocalization
    public var links: DocumentLinks

    public init(data: BetaAppClipInvocationLocalization, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BetaAppClipInvocationLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocationLocalizations
        }

        public struct Attributes: Codable {
            public var title: String
            public var locale: String

            public init(title: String, locale: String) {
                self.title = title
                self.locale = locale
            }
        }

        public struct Relationships: Codable {
            public var betaAppClipInvocation: BetaAppClipInvocation

            public struct BetaAppClipInvocation: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaAppClipInvocations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(betaAppClipInvocation: BetaAppClipInvocation) {
                self.betaAppClipInvocation = betaAppClipInvocation
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppClipInvocationLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocationLocalizations
        }

        public struct Attributes: Codable {
            public var title: String?

            public init(title: String? = nil) {
                self.title = title
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppClipInvocation: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppClipInvocations
    }

    public struct Attributes: Codable {
        public var url: URL?

        public init(url: URL? = nil) {
            self.url = url
        }
    }

    public struct Relationships: Codable {
        public var betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations?

        public struct BetaAppClipInvocationLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppClipInvocationLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations? = nil) {
            self.betaAppClipInvocationLocalizations = betaAppClipInvocationLocalizations
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaAppClipInvocationsResponse: Codable {
    public var data: [BetaAppClipInvocation]
    public var included: [BetaAppClipInvocationLocalization]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaAppClipInvocation], included: [BetaAppClipInvocationLocalization]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaAppClipInvocationResponse: Codable {
    /// BetaAppClipInvocation
    public var data: BetaAppClipInvocation
    public var included: [BetaAppClipInvocationLocalization]?
    public var links: DocumentLinks

    public init(data: BetaAppClipInvocation, included: [BetaAppClipInvocationLocalization]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaAppClipInvocationCreateRequest: Codable {
    public var data: Data
    public var included: [BetaAppClipInvocationLocalizationInlineCreate]?

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocations
        }

        public struct Attributes: Codable {
            public var url: URL

            public init(url: URL) {
                self.url = url
            }
        }

        public struct Relationships: Codable {
            public var buildBundle: BuildBundle
            public var betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations

            public struct BuildBundle: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case buildBundles
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct BetaAppClipInvocationLocalizations: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaAppClipInvocationLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(buildBundle: BuildBundle, betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations) {
                self.buildBundle = buildBundle
                self.betaAppClipInvocationLocalizations = betaAppClipInvocationLocalizations
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data, included: [BetaAppClipInvocationLocalizationInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}

public struct BetaAppClipInvocationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocations
        }

        public struct Attributes: Codable {
            public var url: URL?

            public init(url: URL? = nil) {
                self.url = url
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppLocalizations
    }

    public struct Attributes: Codable {
        public var feedbackEmail: String?
        public var marketingURL: String?
        public var privacyPolicyURL: String?
        public var tvOsPrivacyPolicy: String?
        public var description: String?
        public var locale: String?

        public init(feedbackEmail: String? = nil, marketingURL: String? = nil, privacyPolicyURL: String? = nil, tvOsPrivacyPolicy: String? = nil, description: String? = nil, locale: String? = nil) {
            self.feedbackEmail = feedbackEmail
            self.marketingURL = marketingURL
            self.privacyPolicyURL = privacyPolicyURL
            self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
            self.description = description
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case feedbackEmail
            case marketingURL = "marketingUrl"
            case privacyPolicyURL = "privacyPolicyUrl"
            case tvOsPrivacyPolicy
            case description
            case locale
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaAppLocalizationsResponse: Codable {
    public var data: [BetaAppLocalization]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaAppLocalization], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaAppLocalizationResponse: Codable {
    /// BetaAppLocalization
    public var data: BetaAppLocalization
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: BetaAppLocalization, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaAppLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppLocalizations
        }

        public struct Attributes: Codable {
            public var feedbackEmail: String?
            public var marketingURL: String?
            public var privacyPolicyURL: String?
            public var tvOsPrivacyPolicy: String?
            public var description: String?
            public var locale: String

            public init(feedbackEmail: String? = nil, marketingURL: String? = nil, privacyPolicyURL: String? = nil, tvOsPrivacyPolicy: String? = nil, description: String? = nil, locale: String) {
                self.feedbackEmail = feedbackEmail
                self.marketingURL = marketingURL
                self.privacyPolicyURL = privacyPolicyURL
                self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
                self.description = description
                self.locale = locale
            }

            private enum CodingKeys: String, CodingKey {
                case feedbackEmail
                case marketingURL = "marketingUrl"
                case privacyPolicyURL = "privacyPolicyUrl"
                case tvOsPrivacyPolicy
                case description
                case locale
            }
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppLocalizations
        }

        public struct Attributes: Codable {
            public var feedbackEmail: String?
            public var marketingURL: String?
            public var privacyPolicyURL: String?
            public var tvOsPrivacyPolicy: String?
            public var description: String?

            public init(feedbackEmail: String? = nil, marketingURL: String? = nil, privacyPolicyURL: String? = nil, tvOsPrivacyPolicy: String? = nil, description: String? = nil) {
                self.feedbackEmail = feedbackEmail
                self.marketingURL = marketingURL
                self.privacyPolicyURL = privacyPolicyURL
                self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
                self.description = description
            }

            private enum CodingKeys: String, CodingKey {
                case feedbackEmail
                case marketingURL = "marketingUrl"
                case privacyPolicyURL = "privacyPolicyUrl"
                case tvOsPrivacyPolicy
                case description
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppReviewDetail: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppReviewDetails
    }

    public struct Attributes: Codable {
        public var contactFirstName: String?
        public var contactLastName: String?
        public var contactPhone: String?
        public var contactEmail: String?
        public var demoAccountName: String?
        public var demoAccountPassword: String?
        public var isDemoAccountRequired: Bool?
        public var notes: String?

        public init(contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, contactEmail: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
            self.contactFirstName = contactFirstName
            self.contactLastName = contactLastName
            self.contactPhone = contactPhone
            self.contactEmail = contactEmail
            self.demoAccountName = demoAccountName
            self.demoAccountPassword = demoAccountPassword
            self.isDemoAccountRequired = isDemoAccountRequired
            self.notes = notes
        }

        private enum CodingKeys: String, CodingKey {
            case contactFirstName
            case contactLastName
            case contactPhone
            case contactEmail
            case demoAccountName
            case demoAccountPassword
            case isDemoAccountRequired = "demoAccountRequired"
            case notes
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaAppReviewDetailsResponse: Codable {
    public var data: [BetaAppReviewDetail]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaAppReviewDetail], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaAppReviewDetailResponse: Codable {
    /// BetaAppReviewDetail
    public var data: BetaAppReviewDetail
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: BetaAppReviewDetail, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaAppReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppReviewDetails
        }

        public struct Attributes: Codable {
            public var contactFirstName: String?
            public var contactLastName: String?
            public var contactPhone: String?
            public var contactEmail: String?
            public var demoAccountName: String?
            public var demoAccountPassword: String?
            public var isDemoAccountRequired: Bool?
            public var notes: String?

            public init(contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, contactEmail: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
                self.contactFirstName = contactFirstName
                self.contactLastName = contactLastName
                self.contactPhone = contactPhone
                self.contactEmail = contactEmail
                self.demoAccountName = demoAccountName
                self.demoAccountPassword = demoAccountPassword
                self.isDemoAccountRequired = isDemoAccountRequired
                self.notes = notes
            }

            private enum CodingKeys: String, CodingKey {
                case contactFirstName
                case contactLastName
                case contactPhone
                case contactEmail
                case demoAccountName
                case demoAccountPassword
                case isDemoAccountRequired = "demoAccountRequired"
                case notes
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppReviewSubmission: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppReviewSubmissions
    }

    public struct Attributes: Codable {
        public var betaReviewState: BetaReviewState?
        public var submittedDate: Date?

        public init(betaReviewState: BetaReviewState? = nil, submittedDate: Date? = nil) {
            self.betaReviewState = betaReviewState
            self.submittedDate = submittedDate
        }
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaAppReviewSubmissionsResponse: Codable {
    public var data: [BetaAppReviewSubmission]
    public var included: [Build]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaAppReviewSubmission], included: [Build]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaAppReviewSubmissionResponse: Codable {
    /// BetaAppReviewSubmission
    public var data: BetaAppReviewSubmission
    public var included: [Build]?
    public var links: DocumentLinks

    public init(data: BetaAppReviewSubmission, included: [Build]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaAppReviewSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppReviewSubmissions
        }

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaBuildLocalization: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaBuildLocalizations
    }

    public struct Attributes: Codable {
        public var whatsNew: String?
        public var locale: String?

        public init(whatsNew: String? = nil, locale: String? = nil) {
            self.whatsNew = whatsNew
            self.locale = locale
        }
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaBuildLocalizationsResponse: Codable {
    public var data: [BetaBuildLocalization]
    public var included: [Build]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaBuildLocalization], included: [Build]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaBuildLocalizationResponse: Codable {
    /// BetaBuildLocalization
    public var data: BetaBuildLocalization
    public var included: [Build]?
    public var links: DocumentLinks

    public init(data: BetaBuildLocalization, included: [Build]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaBuildLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaBuildLocalizations
        }

        public struct Attributes: Codable {
            public var whatsNew: String?
            public var locale: String

            public init(whatsNew: String? = nil, locale: String) {
                self.whatsNew = whatsNew
                self.locale = locale
            }
        }

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaBuildLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaBuildLocalizations
        }

        public struct Attributes: Codable {
            public var whatsNew: String?

            public init(whatsNew: String? = nil) {
                self.whatsNew = whatsNew
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaGroup: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaGroups
    }

    public struct Attributes: Codable {
        public var name: String?
        public var createdDate: Date?
        public var isInternalGroup: Bool?
        public var hasAccessToAllBuilds: Bool?
        public var isPublicLinkEnabled: Bool?
        public var publicLinkID: String?
        public var isPublicLinkLimitEnabled: Bool?
        public var publicLinkLimit: Int?
        public var publicLink: String?
        public var isFeedbackEnabled: Bool?
        public var isIosBuildsAvailableForAppleSiliconMac: Bool?

        public init(name: String? = nil, createdDate: Date? = nil, isInternalGroup: Bool? = nil, hasAccessToAllBuilds: Bool? = nil, isPublicLinkEnabled: Bool? = nil, publicLinkID: String? = nil, isPublicLinkLimitEnabled: Bool? = nil, publicLinkLimit: Int? = nil, publicLink: String? = nil, isFeedbackEnabled: Bool? = nil, isIosBuildsAvailableForAppleSiliconMac: Bool? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.isInternalGroup = isInternalGroup
            self.hasAccessToAllBuilds = hasAccessToAllBuilds
            self.isPublicLinkEnabled = isPublicLinkEnabled
            self.publicLinkID = publicLinkID
            self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
            self.publicLinkLimit = publicLinkLimit
            self.publicLink = publicLink
            self.isFeedbackEnabled = isFeedbackEnabled
            self.isIosBuildsAvailableForAppleSiliconMac = isIosBuildsAvailableForAppleSiliconMac
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case createdDate
            case isInternalGroup
            case hasAccessToAllBuilds
            case isPublicLinkEnabled = "publicLinkEnabled"
            case publicLinkID = "publicLinkId"
            case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
            case publicLinkLimit
            case publicLink
            case isFeedbackEnabled = "feedbackEnabled"
            case isIosBuildsAvailableForAppleSiliconMac = "iosBuildsAvailableForAppleSiliconMac"
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var builds: Builds?
        public var betaTesters: BetaTesters?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Builds: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaTesters: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaTesters
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(app: App? = nil, builds: Builds? = nil, betaTesters: BetaTesters? = nil) {
            self.app = app
            self.builds = builds
            self.betaTesters = betaTesters
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaGroupsResponse: Codable {
    public var data: [BetaGroup]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case build(Build)
        case betaTester(BetaTester)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            }
        }
    }

    public init(data: [BetaGroup], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaGroupResponse: Codable {
    /// BetaGroup
    public var data: BetaGroup
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case build(Build)
        case betaTester(BetaTester)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            }
        }
    }

    public init(data: BetaGroup, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaGroupCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public struct Attributes: Codable {
            public var name: String
            public var isInternalGroup: Bool?
            public var hasAccessToAllBuilds: Bool?
            public var isPublicLinkEnabled: Bool?
            public var isPublicLinkLimitEnabled: Bool?
            public var publicLinkLimit: Int?
            public var isFeedbackEnabled: Bool?

            public init(name: String, isInternalGroup: Bool? = nil, hasAccessToAllBuilds: Bool? = nil, isPublicLinkEnabled: Bool? = nil, isPublicLinkLimitEnabled: Bool? = nil, publicLinkLimit: Int? = nil, isFeedbackEnabled: Bool? = nil) {
                self.name = name
                self.isInternalGroup = isInternalGroup
                self.hasAccessToAllBuilds = hasAccessToAllBuilds
                self.isPublicLinkEnabled = isPublicLinkEnabled
                self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
                self.publicLinkLimit = publicLinkLimit
                self.isFeedbackEnabled = isFeedbackEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isInternalGroup
                case hasAccessToAllBuilds
                case isPublicLinkEnabled = "publicLinkEnabled"
                case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
                case publicLinkLimit
                case isFeedbackEnabled = "feedbackEnabled"
            }
        }

        public struct Relationships: Codable {
            public var app: App
            public var builds: Builds?
            public var betaTesters: BetaTesters?

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Builds: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct BetaTesters: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaTesters
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(app: App, builds: Builds? = nil, betaTesters: BetaTesters? = nil) {
                self.app = app
                self.builds = builds
                self.betaTesters = betaTesters
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaGroupUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public struct Attributes: Codable {
            public var name: String?
            public var isPublicLinkEnabled: Bool?
            public var isPublicLinkLimitEnabled: Bool?
            public var publicLinkLimit: Int?
            public var isFeedbackEnabled: Bool?
            public var isIosBuildsAvailableForAppleSiliconMac: Bool?

            public init(name: String? = nil, isPublicLinkEnabled: Bool? = nil, isPublicLinkLimitEnabled: Bool? = nil, publicLinkLimit: Int? = nil, isFeedbackEnabled: Bool? = nil, isIosBuildsAvailableForAppleSiliconMac: Bool? = nil) {
                self.name = name
                self.isPublicLinkEnabled = isPublicLinkEnabled
                self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
                self.publicLinkLimit = publicLinkLimit
                self.isFeedbackEnabled = isFeedbackEnabled
                self.isIosBuildsAvailableForAppleSiliconMac = isIosBuildsAvailableForAppleSiliconMac
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isPublicLinkEnabled = "publicLinkEnabled"
                case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
                case publicLinkLimit
                case isFeedbackEnabled = "feedbackEnabled"
                case isIosBuildsAvailableForAppleSiliconMac = "iosBuildsAvailableForAppleSiliconMac"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaLicenseAgreement: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaLicenseAgreements
    }

    public struct Attributes: Codable {
        public var agreementText: String?

        public init(agreementText: String? = nil) {
            self.agreementText = agreementText
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaLicenseAgreementsResponse: Codable {
    public var data: [BetaLicenseAgreement]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaLicenseAgreement], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaLicenseAgreementResponse: Codable {
    /// BetaLicenseAgreement
    public var data: BetaLicenseAgreement
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: BetaLicenseAgreement, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaLicenseAgreementUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaLicenseAgreements
        }

        public struct Attributes: Codable {
            public var agreementText: String?

            public init(agreementText: String? = nil) {
                self.agreementText = agreementText
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaTesterInvitation: Codable {
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaTesterInvitations
    }

    public init(type: `Type`, id: String, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.links = links
    }
}

public struct BetaTesterInvitationResponse: Codable {
    /// BetaTesterInvitation
    public var data: BetaTesterInvitation
    public var links: DocumentLinks

    public init(data: BetaTesterInvitation, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BetaTesterInvitationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesterInvitations
        }

        public struct Relationships: Codable {
            public var betaTester: BetaTester
            public var app: App

            public struct BetaTester: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaTesters
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(betaTester: BetaTester, app: App) {
                self.betaTester = betaTester
                self.app = app
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaTester: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaTesters
    }

    public struct Attributes: Codable {
        public var firstName: String?
        public var lastName: String?
        public var email: String?
        public var inviteType: BetaInviteType?

        public init(firstName: String? = nil, lastName: String? = nil, email: String? = nil, inviteType: BetaInviteType? = nil) {
            self.firstName = firstName
            self.lastName = lastName
            self.email = email
            self.inviteType = inviteType
        }
    }

    public struct Relationships: Codable {
        public var apps: Apps?
        public var betaGroups: BetaGroups?
        public var builds: Builds?

        public struct Apps: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaGroups: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaGroups
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Builds: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(apps: Apps? = nil, betaGroups: BetaGroups? = nil, builds: Builds? = nil) {
            self.apps = apps
            self.betaGroups = betaGroups
            self.builds = builds
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BetaTestersResponse: Codable {
    public var data: [BetaTester]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case betaGroup(BetaGroup)
        case build(Build)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            }
        }
    }

    public init(data: [BetaTester], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaTesterResponse: Codable {
    /// BetaTester
    public var data: BetaTester
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case betaGroup(BetaGroup)
        case build(Build)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            }
        }
    }

    public init(data: BetaTester, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaTesterCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public struct Attributes: Codable {
            public var firstName: String?
            public var lastName: String?
            public var email: String

            public init(firstName: String? = nil, lastName: String? = nil, email: String) {
                self.firstName = firstName
                self.lastName = lastName
                self.email = email
            }
        }

        public struct Relationships: Codable {
            public var betaGroups: BetaGroups?
            public var builds: Builds?

            public struct BetaGroups: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaGroups
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Builds: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(betaGroups: BetaGroups? = nil, builds: Builds? = nil) {
                self.betaGroups = betaGroups
                self.builds = builds
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships? = nil) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaDetail: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case buildBetaDetails
    }

    public struct Attributes: Codable {
        public var isAutoNotifyEnabled: Bool?
        public var internalBuildState: InternalBetaState?
        public var externalBuildState: ExternalBetaState?

        public init(isAutoNotifyEnabled: Bool? = nil, internalBuildState: InternalBetaState? = nil, externalBuildState: ExternalBetaState? = nil) {
            self.isAutoNotifyEnabled = isAutoNotifyEnabled
            self.internalBuildState = internalBuildState
            self.externalBuildState = externalBuildState
        }

        private enum CodingKeys: String, CodingKey {
            case isAutoNotifyEnabled = "autoNotifyEnabled"
            case internalBuildState
            case externalBuildState
        }
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BuildBetaDetailsResponse: Codable {
    public var data: [BuildBetaDetail]
    public var included: [Build]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BuildBetaDetail], included: [Build]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BuildBetaDetailResponse: Codable {
    /// BuildBetaDetail
    public var data: BuildBetaDetail
    public var included: [Build]?
    public var links: DocumentLinks

    public init(data: BuildBetaDetail, included: [Build]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BuildBetaDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case buildBetaDetails
        }

        public struct Attributes: Codable {
            public var isAutoNotifyEnabled: Bool?

            public init(isAutoNotifyEnabled: Bool? = nil) {
                self.isAutoNotifyEnabled = isAutoNotifyEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case isAutoNotifyEnabled = "autoNotifyEnabled"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaNotification: Codable {
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case buildBetaNotifications
    }

    public init(type: `Type`, id: String, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.links = links
    }
}

public struct BuildBetaNotificationResponse: Codable {
    /// BuildBetaNotification
    public var data: BuildBetaNotification
    public var links: DocumentLinks

    public init(data: BuildBetaNotification, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BuildBetaNotificationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case buildBetaNotifications
        }

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBundleFileSize: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case buildBundleFileSizes
    }

    public struct Attributes: Codable {
        public var deviceModel: String?
        public var osVersion: String?
        public var downloadBytes: Int?
        public var installBytes: Int?

        public init(deviceModel: String? = nil, osVersion: String? = nil, downloadBytes: Int? = nil, installBytes: Int? = nil) {
            self.deviceModel = deviceModel
            self.osVersion = osVersion
            self.downloadBytes = downloadBytes
            self.installBytes = installBytes
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct BuildBundleFileSizesResponse: Codable {
    public var data: [BuildBundleFileSize]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BuildBundleFileSize], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BuildBundle: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case buildBundles
    }

    public struct Attributes: Codable {
        public var bundleID: String?
        public var bundleType: BundleType?
        public var sdkBuild: String?
        public var platformBuild: String?
        public var fileName: String?
        public var hasSirikit: Bool?
        public var hasOnDemandResources: Bool?
        public var hasPrerenderedIcon: Bool?
        public var usesLocationServices: Bool?
        public var isIosBuildMacAppStoreCompatible: Bool?
        public var isIncludesSymbols: Bool?
        public var dSYMURL: URL?
        public var supportedArchitectures: [String]?
        public var requiredCapabilities: [String]?
        public var deviceProtocols: [String]?
        public var locales: [String]?
        public var entitlements: [String: [String: String]]?

        public enum BundleType: String, Codable, CaseIterable {
            case app = "APP"
            case appClip = "APP_CLIP"
        }

        public init(bundleID: String? = nil, bundleType: BundleType? = nil, sdkBuild: String? = nil, platformBuild: String? = nil, fileName: String? = nil, hasSirikit: Bool? = nil, hasOnDemandResources: Bool? = nil, hasPrerenderedIcon: Bool? = nil, usesLocationServices: Bool? = nil, isIosBuildMacAppStoreCompatible: Bool? = nil, isIncludesSymbols: Bool? = nil, dSYMURL: URL? = nil, supportedArchitectures: [String]? = nil, requiredCapabilities: [String]? = nil, deviceProtocols: [String]? = nil, locales: [String]? = nil, entitlements: [String: [String: String]]? = nil) {
            self.bundleID = bundleID
            self.bundleType = bundleType
            self.sdkBuild = sdkBuild
            self.platformBuild = platformBuild
            self.fileName = fileName
            self.hasSirikit = hasSirikit
            self.hasOnDemandResources = hasOnDemandResources
            self.hasPrerenderedIcon = hasPrerenderedIcon
            self.usesLocationServices = usesLocationServices
            self.isIosBuildMacAppStoreCompatible = isIosBuildMacAppStoreCompatible
            self.isIncludesSymbols = isIncludesSymbols
            self.dSYMURL = dSYMURL
            self.supportedArchitectures = supportedArchitectures
            self.requiredCapabilities = requiredCapabilities
            self.deviceProtocols = deviceProtocols
            self.locales = locales
            self.entitlements = entitlements
        }

        private enum CodingKeys: String, CodingKey {
            case bundleID = "bundleId"
            case bundleType
            case sdkBuild
            case platformBuild
            case fileName
            case hasSirikit
            case hasOnDemandResources
            case hasPrerenderedIcon
            case usesLocationServices
            case isIosBuildMacAppStoreCompatible
            case isIncludesSymbols = "includesSymbols"
            case dSYMURL = "dSYMUrl"
            case supportedArchitectures
            case requiredCapabilities
            case deviceProtocols
            case locales
            case entitlements
        }
    }

    public struct Relationships: Codable {
        public var appClipDomainCacheStatus: AppClipDomainCacheStatus?
        public var appClipDomainDebugStatus: AppClipDomainDebugStatus?
        public var betaAppClipInvocations: BetaAppClipInvocations?
        public var buildBundleFileSizes: BuildBundleFileSizes?

        public struct AppClipDomainCacheStatus: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDomainStatuses
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppClipDomainDebugStatus: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDomainStatuses
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaAppClipInvocations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppClipInvocations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BuildBundleFileSizes: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case buildBundleFileSizes
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appClipDomainCacheStatus: AppClipDomainCacheStatus? = nil, appClipDomainDebugStatus: AppClipDomainDebugStatus? = nil, betaAppClipInvocations: BetaAppClipInvocations? = nil, buildBundleFileSizes: BuildBundleFileSizes? = nil) {
            self.appClipDomainCacheStatus = appClipDomainCacheStatus
            self.appClipDomainDebugStatus = appClipDomainDebugStatus
            self.betaAppClipInvocations = betaAppClipInvocations
            self.buildBundleFileSizes = buildBundleFileSizes
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BuildIcon: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case buildIcons
    }

    public struct Attributes: Codable {
        public var name: String?
        public var iconAsset: ImageAsset?
        public var iconType: IconAssetType?

        public init(name: String? = nil, iconAsset: ImageAsset? = nil, iconType: IconAssetType? = nil) {
            self.name = name
            self.iconAsset = iconAsset
            self.iconType = iconType
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct BuildIconsResponse: Codable {
    public var data: [BuildIcon]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BuildIcon], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct Build: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case builds
    }

    public struct Attributes: Codable {
        public var version: String?
        public var uploadedDate: Date?
        public var expirationDate: Date?
        public var isExpired: Bool?
        public var minOsVersion: String?
        public var lsMinimumSystemVersion: String?
        public var computedMinMacOsVersion: String?
        public var iconAssetToken: ImageAsset?
        public var processingState: ProcessingState?
        public var buildAudienceType: BuildAudienceType?
        public var usesNonExemptEncryption: Bool?

        public enum ProcessingState: String, Codable, CaseIterable {
            case processing = "PROCESSING"
            case failed = "FAILED"
            case invalid = "INVALID"
            case valid = "VALID"
        }

        public init(version: String? = nil, uploadedDate: Date? = nil, expirationDate: Date? = nil, isExpired: Bool? = nil, minOsVersion: String? = nil, lsMinimumSystemVersion: String? = nil, computedMinMacOsVersion: String? = nil, iconAssetToken: ImageAsset? = nil, processingState: ProcessingState? = nil, buildAudienceType: BuildAudienceType? = nil, usesNonExemptEncryption: Bool? = nil) {
            self.version = version
            self.uploadedDate = uploadedDate
            self.expirationDate = expirationDate
            self.isExpired = isExpired
            self.minOsVersion = minOsVersion
            self.lsMinimumSystemVersion = lsMinimumSystemVersion
            self.computedMinMacOsVersion = computedMinMacOsVersion
            self.iconAssetToken = iconAssetToken
            self.processingState = processingState
            self.buildAudienceType = buildAudienceType
            self.usesNonExemptEncryption = usesNonExemptEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case version
            case uploadedDate
            case expirationDate
            case isExpired = "expired"
            case minOsVersion
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case iconAssetToken
            case processingState
            case buildAudienceType
            case usesNonExemptEncryption
        }
    }

    public struct Relationships: Codable {
        public var preReleaseVersion: PreReleaseVersion?
        public var individualTesters: IndividualTesters?
        public var betaGroups: BetaGroups?
        public var betaBuildLocalizations: BetaBuildLocalizations?
        public var appEncryptionDeclaration: AppEncryptionDeclaration?
        public var betaAppReviewSubmission: BetaAppReviewSubmission?
        public var app: App?
        public var buildBetaDetail: BuildBetaDetail?
        public var appStoreVersion: AppStoreVersion?
        public var icons: Icons?
        public var buildBundles: BuildBundles?

        public struct PreReleaseVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case preReleaseVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct IndividualTesters: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaTesters
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaGroups: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaGroups
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaBuildLocalizations: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaBuildLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppEncryptionDeclaration: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEncryptionDeclarations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaAppReviewSubmission: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppReviewSubmissions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BuildBetaDetail: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case buildBetaDetails
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Icons: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case buildIcons
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BuildBundles: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case buildBundles
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(preReleaseVersion: PreReleaseVersion? = nil, individualTesters: IndividualTesters? = nil, betaGroups: BetaGroups? = nil, betaBuildLocalizations: BetaBuildLocalizations? = nil, appEncryptionDeclaration: AppEncryptionDeclaration? = nil, betaAppReviewSubmission: BetaAppReviewSubmission? = nil, app: App? = nil, buildBetaDetail: BuildBetaDetail? = nil, appStoreVersion: AppStoreVersion? = nil, icons: Icons? = nil, buildBundles: BuildBundles? = nil) {
            self.preReleaseVersion = preReleaseVersion
            self.individualTesters = individualTesters
            self.betaGroups = betaGroups
            self.betaBuildLocalizations = betaBuildLocalizations
            self.appEncryptionDeclaration = appEncryptionDeclaration
            self.betaAppReviewSubmission = betaAppReviewSubmission
            self.app = app
            self.buildBetaDetail = buildBetaDetail
            self.appStoreVersion = appStoreVersion
            self.icons = icons
            self.buildBundles = buildBundles
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BuildsResponse: Codable {
    public var data: [Build]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case prereleaseVersion(PrereleaseVersion)
        case betaTester(BetaTester)
        case betaGroup(BetaGroup)
        case betaBuildLocalization(BetaBuildLocalization)
        case appEncryptionDeclaration(AppEncryptionDeclaration)
        case betaAppReviewSubmission(BetaAppReviewSubmission)
        case app(App)
        case buildBetaDetail(BuildBetaDetail)
        case appStoreVersion(AppStoreVersion)
        case buildIcon(BuildIcon)
        case buildBundle(BuildBundle)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(BetaBuildLocalization.self) {
                self = .betaBuildLocalization(value)
            } else if let value = try? container.decode(AppEncryptionDeclaration.self) {
                self = .appEncryptionDeclaration(value)
            } else if let value = try? container.decode(BetaAppReviewSubmission.self) {
                self = .betaAppReviewSubmission(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BuildBetaDetail.self) {
                self = .buildBetaDetail(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(BuildIcon.self) {
                self = .buildIcon(value)
            } else if let value = try? container.decode(BuildBundle.self) {
                self = .buildBundle(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .betaBuildLocalization(let value): try container.encode(value)
            case .appEncryptionDeclaration(let value): try container.encode(value)
            case .betaAppReviewSubmission(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            case .buildBetaDetail(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .buildIcon(let value): try container.encode(value)
            case .buildBundle(let value): try container.encode(value)
            }
        }
    }

    public init(data: [Build], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BuildResponse: Codable {
    /// Build
    public var data: Build
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case prereleaseVersion(PrereleaseVersion)
        case betaTester(BetaTester)
        case betaGroup(BetaGroup)
        case betaBuildLocalization(BetaBuildLocalization)
        case appEncryptionDeclaration(AppEncryptionDeclaration)
        case betaAppReviewSubmission(BetaAppReviewSubmission)
        case app(App)
        case buildBetaDetail(BuildBetaDetail)
        case appStoreVersion(AppStoreVersion)
        case buildIcon(BuildIcon)
        case buildBundle(BuildBundle)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(BetaBuildLocalization.self) {
                self = .betaBuildLocalization(value)
            } else if let value = try? container.decode(AppEncryptionDeclaration.self) {
                self = .appEncryptionDeclaration(value)
            } else if let value = try? container.decode(BetaAppReviewSubmission.self) {
                self = .betaAppReviewSubmission(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BuildBetaDetail.self) {
                self = .buildBetaDetail(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(BuildIcon.self) {
                self = .buildIcon(value)
            } else if let value = try? container.decode(BuildBundle.self) {
                self = .buildBundle(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .betaBuildLocalization(let value): try container.encode(value)
            case .appEncryptionDeclaration(let value): try container.encode(value)
            case .betaAppReviewSubmission(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            case .buildBetaDetail(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .buildIcon(let value): try container.encode(value)
            case .buildBundle(let value): try container.encode(value)
            }
        }
    }

    public init(data: Build, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BuildUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public struct Attributes: Codable {
            public var isExpired: Bool?
            public var usesNonExemptEncryption: Bool?

            public init(isExpired: Bool? = nil, usesNonExemptEncryption: Bool? = nil) {
                self.isExpired = isExpired
                self.usesNonExemptEncryption = usesNonExemptEncryption
            }

            private enum CodingKeys: String, CodingKey {
                case isExpired = "expired"
                case usesNonExemptEncryption
            }
        }

        public struct Relationships: Codable {
            public var appEncryptionDeclaration: AppEncryptionDeclaration?

            public struct AppEncryptionDeclaration: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEncryptionDeclarations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appEncryptionDeclaration: AppEncryptionDeclaration? = nil) {
                self.appEncryptionDeclaration = appEncryptionDeclaration
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDCapability: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case bundleIDCapabilities = "bundleIdCapabilities"
    }

    public struct Attributes: Codable {
        public var capabilityType: CapabilityType?
        public var settings: [CapabilitySetting]?

        public init(capabilityType: CapabilityType? = nil, settings: [CapabilitySetting]? = nil) {
            self.capabilityType = capabilityType
            self.settings = settings
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct BundleIDCapabilitiesResponse: Codable {
    public var data: [BundleIDCapability]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BundleIDCapability], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BundleIDCapabilityResponse: Codable {
    /// BundleIdCapability
    public var data: BundleIDCapability
    public var links: DocumentLinks

    public init(data: BundleIDCapability, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BundleIDCapabilityCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDCapabilities = "bundleIdCapabilities"
        }

        public struct Attributes: Codable {
            public var capabilityType: CapabilityType
            public var settings: [CapabilitySetting]?

            public init(capabilityType: CapabilityType, settings: [CapabilitySetting]? = nil) {
                self.capabilityType = capabilityType
                self.settings = settings
            }
        }

        public struct Relationships: Codable {
            public var bundleID: BundleID

            public struct BundleID: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case bundleIDs = "bundleIds"
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(bundleID: BundleID) {
                self.bundleID = bundleID
            }

            private enum CodingKeys: String, CodingKey {
                case bundleID = "bundleId"
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDCapabilityUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDCapabilities = "bundleIdCapabilities"
        }

        public struct Attributes: Codable {
            public var capabilityType: CapabilityType?
            public var settings: [CapabilitySetting]?

            public init(capabilityType: CapabilityType? = nil, settings: [CapabilitySetting]? = nil) {
                self.capabilityType = capabilityType
                self.settings = settings
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleID: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case bundleIDs = "bundleIds"
    }

    public struct Attributes: Codable {
        public var name: String?
        public var platform: BundleIDPlatform?
        public var identifier: String?
        public var seedID: String?

        public init(name: String? = nil, platform: BundleIDPlatform? = nil, identifier: String? = nil, seedID: String? = nil) {
            self.name = name
            self.platform = platform
            self.identifier = identifier
            self.seedID = seedID
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case platform
            case identifier
            case seedID = "seedId"
        }
    }

    public struct Relationships: Codable {
        public var profiles: Profiles?
        public var bundleIDCapabilities: BundleIDCapabilities?
        public var app: App?

        public struct Profiles: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case profiles
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BundleIDCapabilities: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDCapabilities = "bundleIdCapabilities"
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(profiles: Profiles? = nil, bundleIDCapabilities: BundleIDCapabilities? = nil, app: App? = nil) {
            self.profiles = profiles
            self.bundleIDCapabilities = bundleIDCapabilities
            self.app = app
        }

        private enum CodingKeys: String, CodingKey {
            case profiles
            case bundleIDCapabilities = "bundleIdCapabilities"
            case app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct BundleIDsResponse: Codable {
    public var data: [BundleID]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case profile(Profile)
        case bundleIDCapability(BundleIDCapability)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Profile.self) {
                self = .profile(value)
            } else if let value = try? container.decode(BundleIDCapability.self) {
                self = .bundleIDCapability(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .profile(let value): try container.encode(value)
            case .bundleIDCapability(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: [BundleID], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BundleIDResponse: Codable {
    /// BundleId
    public var data: BundleID
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case profile(Profile)
        case bundleIDCapability(BundleIDCapability)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Profile.self) {
                self = .profile(value)
            } else if let value = try? container.decode(BundleIDCapability.self) {
                self = .bundleIDCapability(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .profile(let value): try container.encode(value)
            case .bundleIDCapability(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: BundleID, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BundleIDCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDs = "bundleIds"
        }

        public struct Attributes: Codable {
            public var name: String
            public var platform: BundleIDPlatform
            public var identifier: String
            public var seedID: String?

            public init(name: String, platform: BundleIDPlatform, identifier: String, seedID: String? = nil) {
                self.name = name
                self.platform = platform
                self.identifier = identifier
                self.seedID = seedID
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case platform
                case identifier
                case seedID = "seedId"
            }
        }

        public init(type: `Type`, attributes: Attributes) {
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDs = "bundleIds"
        }

        public struct Attributes: Codable {
            public var name: String?

            public init(name: String? = nil) {
                self.name = name
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct Certificate: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case certificates
    }

    public struct Attributes: Codable {
        public var name: String?
        public var certificateType: CertificateType?
        public var displayName: String?
        public var serialNumber: String?
        public var platform: BundleIDPlatform?
        public var expirationDate: Date?
        public var certificateContent: String?

        public init(name: String? = nil, certificateType: CertificateType? = nil, displayName: String? = nil, serialNumber: String? = nil, platform: BundleIDPlatform? = nil, expirationDate: Date? = nil, certificateContent: String? = nil) {
            self.name = name
            self.certificateType = certificateType
            self.displayName = displayName
            self.serialNumber = serialNumber
            self.platform = platform
            self.expirationDate = expirationDate
            self.certificateContent = certificateContent
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct CertificatesResponse: Codable {
    public var data: [Certificate]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [Certificate], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct CertificateResponse: Codable {
    /// Certificate
    public var data: Certificate
    public var links: DocumentLinks

    public init(data: Certificate, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct CertificateCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case certificates
        }

        public struct Attributes: Codable {
            public var csrContent: String
            public var certificateType: CertificateType

            public init(csrContent: String, certificateType: CertificateType) {
                self.csrContent = csrContent
                self.certificateType = certificateType
            }
        }

        public init(type: `Type`, attributes: Attributes) {
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiArtifact: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciArtifacts
    }

    public struct Attributes: Codable {
        public var fileType: FileType?
        public var fileName: String?
        public var fileSize: Int?
        public var downloadURL: URL?

        public enum FileType: String, Codable, CaseIterable {
            case archive = "ARCHIVE"
            case archiveExport = "ARCHIVE_EXPORT"
            case logBundle = "LOG_BUNDLE"
            case resultBundle = "RESULT_BUNDLE"
            case testProducts = "TEST_PRODUCTS"
            case xcodebuildProducts = "XCODEBUILD_PRODUCTS"
        }

        public init(fileType: FileType? = nil, fileName: String? = nil, fileSize: Int? = nil, downloadURL: URL? = nil) {
            self.fileType = fileType
            self.fileName = fileName
            self.fileSize = fileSize
            self.downloadURL = downloadURL
        }

        private enum CodingKeys: String, CodingKey {
            case fileType
            case fileName
            case fileSize
            case downloadURL = "downloadUrl"
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct CiArtifactsResponse: Codable {
    public var data: [CiArtifact]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [CiArtifact], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct CiArtifactResponse: Codable {
    /// CiArtifact
    public var data: CiArtifact
    public var links: DocumentLinks

    public init(data: CiArtifact, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct CiBuildAction: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciBuildActions
    }

    public struct Attributes: Codable {
        public var name: String?
        public var actionType: CiActionType?
        public var startedDate: Date?
        public var finishedDate: Date?
        public var issueCounts: CiIssueCounts?
        public var executionProgress: CiExecutionProgress?
        public var completionStatus: CiCompletionStatus?
        public var isRequiredToPass: Bool?

        public init(name: String? = nil, actionType: CiActionType? = nil, startedDate: Date? = nil, finishedDate: Date? = nil, issueCounts: CiIssueCounts? = nil, executionProgress: CiExecutionProgress? = nil, completionStatus: CiCompletionStatus? = nil, isRequiredToPass: Bool? = nil) {
            self.name = name
            self.actionType = actionType
            self.startedDate = startedDate
            self.finishedDate = finishedDate
            self.issueCounts = issueCounts
            self.executionProgress = executionProgress
            self.completionStatus = completionStatus
            self.isRequiredToPass = isRequiredToPass
        }
    }

    public struct Relationships: Codable {
        public var buildRun: BuildRun?

        public struct BuildRun: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciBuildRuns
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(buildRun: BuildRun? = nil) {
            self.buildRun = buildRun
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct CiBuildActionsResponse: Codable {
    public var data: [CiBuildAction]
    public var included: [CiBuildRun]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [CiBuildAction], included: [CiBuildRun]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct CiBuildActionResponse: Codable {
    /// CiBuildAction
    public var data: CiBuildAction
    public var included: [CiBuildRun]?
    public var links: DocumentLinks

    public init(data: CiBuildAction, included: [CiBuildRun]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct CiBuildRun: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciBuildRuns
    }

    public struct Attributes: Codable {
        public var number: Int?
        public var createdDate: Date?
        public var startedDate: Date?
        public var finishedDate: Date?
        public var sourceCommit: SourceCommit?
        public var destinationCommit: DestinationCommit?
        public var isPullRequestBuild: Bool?
        public var issueCounts: CiIssueCounts?
        public var executionProgress: CiExecutionProgress?
        public var completionStatus: CiCompletionStatus?
        public var startReason: StartReason?
        public var cancelReason: CancelReason?

        public struct SourceCommit: Codable {
            public var commitSha: String?
            public var message: String?
            public var author: CiGitUser?
            public var committer: CiGitUser?
            public var webURL: URL?

            public init(commitSha: String? = nil, message: String? = nil, author: CiGitUser? = nil, committer: CiGitUser? = nil, webURL: URL? = nil) {
                self.commitSha = commitSha
                self.message = message
                self.author = author
                self.committer = committer
                self.webURL = webURL
            }

            private enum CodingKeys: String, CodingKey {
                case commitSha
                case message
                case author
                case committer
                case webURL = "webUrl"
            }
        }

        public struct DestinationCommit: Codable {
            public var commitSha: String?
            public var message: String?
            public var author: CiGitUser?
            public var committer: CiGitUser?
            public var webURL: URL?

            public init(commitSha: String? = nil, message: String? = nil, author: CiGitUser? = nil, committer: CiGitUser? = nil, webURL: URL? = nil) {
                self.commitSha = commitSha
                self.message = message
                self.author = author
                self.committer = committer
                self.webURL = webURL
            }

            private enum CodingKeys: String, CodingKey {
                case commitSha
                case message
                case author
                case committer
                case webURL = "webUrl"
            }
        }

        public enum StartReason: String, Codable, CaseIterable {
            case gitRefChange = "GIT_REF_CHANGE"
            case manual = "MANUAL"
            case manualRebuild = "MANUAL_REBUILD"
            case pullRequestOpen = "PULL_REQUEST_OPEN"
            case pullRequestUpdate = "PULL_REQUEST_UPDATE"
            case schedule = "SCHEDULE"
        }

        public enum CancelReason: String, Codable, CaseIterable {
            case automaticallyByNewerBuild = "AUTOMATICALLY_BY_NEWER_BUILD"
            case manuallyByUser = "MANUALLY_BY_USER"
        }

        public init(number: Int? = nil, createdDate: Date? = nil, startedDate: Date? = nil, finishedDate: Date? = nil, sourceCommit: SourceCommit? = nil, destinationCommit: DestinationCommit? = nil, isPullRequestBuild: Bool? = nil, issueCounts: CiIssueCounts? = nil, executionProgress: CiExecutionProgress? = nil, completionStatus: CiCompletionStatus? = nil, startReason: StartReason? = nil, cancelReason: CancelReason? = nil) {
            self.number = number
            self.createdDate = createdDate
            self.startedDate = startedDate
            self.finishedDate = finishedDate
            self.sourceCommit = sourceCommit
            self.destinationCommit = destinationCommit
            self.isPullRequestBuild = isPullRequestBuild
            self.issueCounts = issueCounts
            self.executionProgress = executionProgress
            self.completionStatus = completionStatus
            self.startReason = startReason
            self.cancelReason = cancelReason
        }
    }

    public struct Relationships: Codable {
        public var builds: Builds?
        public var workflow: Workflow?
        public var product: Product?
        public var sourceBranchOrTag: SourceBranchOrTag?
        public var destinationBranch: DestinationBranch?
        public var pullRequest: PullRequest?

        public struct Builds: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Workflow: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciWorkflows
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Product: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciProducts
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct SourceBranchOrTag: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmGitReferences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct DestinationBranch: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmGitReferences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PullRequest: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmPullRequests
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(builds: Builds? = nil, workflow: Workflow? = nil, product: Product? = nil, sourceBranchOrTag: SourceBranchOrTag? = nil, destinationBranch: DestinationBranch? = nil, pullRequest: PullRequest? = nil) {
            self.builds = builds
            self.workflow = workflow
            self.product = product
            self.sourceBranchOrTag = sourceBranchOrTag
            self.destinationBranch = destinationBranch
            self.pullRequest = pullRequest
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct CiBuildRunsResponse: Codable {
    public var data: [CiBuildRun]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case build(Build)
        case ciWorkflow(CiWorkflow)
        case ciProduct(CiProduct)
        case scmGitReference(ScmGitReference)
        case scmPullRequest(ScmPullRequest)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(CiWorkflow.self) {
                self = .ciWorkflow(value)
            } else if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else if let value = try? container.decode(ScmPullRequest.self) {
                self = .scmPullRequest(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .ciWorkflow(let value): try container.encode(value)
            case .ciProduct(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            case .scmPullRequest(let value): try container.encode(value)
            }
        }
    }

    public init(data: [CiBuildRun], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct CiBuildRunResponse: Codable {
    /// CiBuildRun
    public var data: CiBuildRun
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case build(Build)
        case ciWorkflow(CiWorkflow)
        case ciProduct(CiProduct)
        case scmGitReference(ScmGitReference)
        case scmPullRequest(ScmPullRequest)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(CiWorkflow.self) {
                self = .ciWorkflow(value)
            } else if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else if let value = try? container.decode(ScmPullRequest.self) {
                self = .scmPullRequest(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .ciWorkflow(let value): try container.encode(value)
            case .ciProduct(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            case .scmPullRequest(let value): try container.encode(value)
            }
        }
    }

    public init(data: CiBuildRun, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct CiBuildRunCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case ciBuildRuns
        }

        public struct Attributes: Codable {
            public var isClean: Bool?

            public init(isClean: Bool? = nil) {
                self.isClean = isClean
            }

            private enum CodingKeys: String, CodingKey {
                case isClean = "clean"
            }
        }

        public struct Relationships: Codable {
            public var buildRun: BuildRun?
            public var workflow: Workflow?
            public var sourceBranchOrTag: SourceBranchOrTag?
            public var pullRequest: PullRequest?

            public struct BuildRun: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciBuildRuns
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct Workflow: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciWorkflows
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SourceBranchOrTag: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case scmGitReferences
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct PullRequest: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case scmPullRequests
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(buildRun: BuildRun? = nil, workflow: Workflow? = nil, sourceBranchOrTag: SourceBranchOrTag? = nil, pullRequest: PullRequest? = nil) {
                self.buildRun = buildRun
                self.workflow = workflow
                self.sourceBranchOrTag = sourceBranchOrTag
                self.pullRequest = pullRequest
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiIssue: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciIssues
    }

    public struct Attributes: Codable {
        public var issueType: IssueType?
        public var message: String?
        public var fileSource: FileLocation?
        public var category: String?

        public enum IssueType: String, Codable, CaseIterable {
            case analyzerWarning = "ANALYZER_WARNING"
            case error = "ERROR"
            case testFailure = "TEST_FAILURE"
            case warning = "WARNING"
        }

        public init(issueType: IssueType? = nil, message: String? = nil, fileSource: FileLocation? = nil, category: String? = nil) {
            self.issueType = issueType
            self.message = message
            self.fileSource = fileSource
            self.category = category
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct CiIssuesResponse: Codable {
    public var data: [CiIssue]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [CiIssue], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct CiIssueResponse: Codable {
    /// CiIssue
    public var data: CiIssue
    public var links: DocumentLinks

    public init(data: CiIssue, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct CiMacOsVersion: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciMacOsVersions
    }

    public struct Attributes: Codable {
        public var version: String?
        public var name: String?

        public init(version: String? = nil, name: String? = nil) {
            self.version = version
            self.name = name
        }
    }

    public struct Relationships: Codable {
        public var xcodeVersions: XcodeVersions?

        public struct XcodeVersions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciXcodeVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(xcodeVersions: XcodeVersions? = nil) {
            self.xcodeVersions = xcodeVersions
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct CiMacOsVersionsResponse: Codable {
    public var data: [CiMacOsVersion]
    public var included: [CiXcodeVersion]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [CiMacOsVersion], included: [CiXcodeVersion]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct CiMacOsVersionResponse: Codable {
    /// CiMacOsVersion
    public var data: CiMacOsVersion
    public var included: [CiXcodeVersion]?
    public var links: DocumentLinks

    public init(data: CiMacOsVersion, included: [CiXcodeVersion]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct CiProduct: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciProducts
    }

    public struct Attributes: Codable {
        public var name: String?
        public var createdDate: Date?
        public var productType: ProductType?

        public enum ProductType: String, Codable, CaseIterable {
            case app = "APP"
            case framework = "FRAMEWORK"
        }

        public init(name: String? = nil, createdDate: Date? = nil, productType: ProductType? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.productType = productType
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var bundleID: BundleID?
        public var primaryRepositories: PrimaryRepositories?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BundleID: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDs = "bundleIds"
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PrimaryRepositories: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(app: App? = nil, bundleID: BundleID? = nil, primaryRepositories: PrimaryRepositories? = nil) {
            self.app = app
            self.bundleID = bundleID
            self.primaryRepositories = primaryRepositories
        }

        private enum CodingKeys: String, CodingKey {
            case app
            case bundleID = "bundleId"
            case primaryRepositories
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct CiProductsResponse: Codable {
    public var data: [CiProduct]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case bundleID(BundleID)
        case scmRepository(ScmRepository)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .bundleID(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            }
        }
    }

    public init(data: [CiProduct], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct CiProductResponse: Codable {
    /// CiProduct
    public var data: CiProduct
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case bundleID(BundleID)
        case scmRepository(ScmRepository)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .bundleID(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            }
        }
    }

    public init(data: CiProduct, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct CiTestResult: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciTestResults
    }

    public struct Attributes: Codable {
        public var className: String?
        public var name: String?
        public var status: CiTestStatus?
        public var fileSource: FileLocation?
        public var message: String?
        public var destinationTestResults: [DestinationTestResult]?

        public struct DestinationTestResult: Codable {
            public var uuid: String?
            public var deviceName: String?
            public var osVersion: String?
            public var status: CiTestStatus?
            public var duration: Double?

            public init(uuid: String? = nil, deviceName: String? = nil, osVersion: String? = nil, status: CiTestStatus? = nil, duration: Double? = nil) {
                self.uuid = uuid
                self.deviceName = deviceName
                self.osVersion = osVersion
                self.status = status
                self.duration = duration
            }
        }

        public init(className: String? = nil, name: String? = nil, status: CiTestStatus? = nil, fileSource: FileLocation? = nil, message: String? = nil, destinationTestResults: [DestinationTestResult]? = nil) {
            self.className = className
            self.name = name
            self.status = status
            self.fileSource = fileSource
            self.message = message
            self.destinationTestResults = destinationTestResults
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct CiTestResultsResponse: Codable {
    public var data: [CiTestResult]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [CiTestResult], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct CiTestResultResponse: Codable {
    /// CiTestResult
    public var data: CiTestResult
    public var links: DocumentLinks

    public init(data: CiTestResult, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct CiWorkflow: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciWorkflows
    }

    public struct Attributes: Codable {
        public var name: String?
        public var description: String?
        public var branchStartCondition: CiBranchStartCondition?
        public var tagStartCondition: CiTagStartCondition?
        public var pullRequestStartCondition: CiPullRequestStartCondition?
        public var scheduledStartCondition: CiScheduledStartCondition?
        public var actions: [CiAction]?
        public var isEnabled: Bool?
        public var isLockedForEditing: Bool?
        public var isClean: Bool?
        public var containerFilePath: String?
        public var lastModifiedDate: Date?

        public init(name: String? = nil, description: String? = nil, branchStartCondition: CiBranchStartCondition? = nil, tagStartCondition: CiTagStartCondition? = nil, pullRequestStartCondition: CiPullRequestStartCondition? = nil, scheduledStartCondition: CiScheduledStartCondition? = nil, actions: [CiAction]? = nil, isEnabled: Bool? = nil, isLockedForEditing: Bool? = nil, isClean: Bool? = nil, containerFilePath: String? = nil, lastModifiedDate: Date? = nil) {
            self.name = name
            self.description = description
            self.branchStartCondition = branchStartCondition
            self.tagStartCondition = tagStartCondition
            self.pullRequestStartCondition = pullRequestStartCondition
            self.scheduledStartCondition = scheduledStartCondition
            self.actions = actions
            self.isEnabled = isEnabled
            self.isLockedForEditing = isLockedForEditing
            self.isClean = isClean
            self.containerFilePath = containerFilePath
            self.lastModifiedDate = lastModifiedDate
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case description
            case branchStartCondition
            case tagStartCondition
            case pullRequestStartCondition
            case scheduledStartCondition
            case actions
            case isEnabled
            case isLockedForEditing
            case isClean = "clean"
            case containerFilePath
            case lastModifiedDate
        }
    }

    public struct Relationships: Codable {
        public var product: Product?
        public var repository: Repository?
        public var xcodeVersion: XcodeVersion?
        public var macOsVersion: MacOsVersion?

        public struct Product: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciProducts
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Repository: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct XcodeVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciXcodeVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct MacOsVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciMacOsVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(product: Product? = nil, repository: Repository? = nil, xcodeVersion: XcodeVersion? = nil, macOsVersion: MacOsVersion? = nil) {
            self.product = product
            self.repository = repository
            self.xcodeVersion = xcodeVersion
            self.macOsVersion = macOsVersion
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct CiWorkflowsResponse: Codable {
    public var data: [CiWorkflow]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case scmRepository(ScmRepository)
        case ciXcodeVersion(CiXcodeVersion)
        case ciMacOsVersion(CiMacOsVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else if let value = try? container.decode(CiXcodeVersion.self) {
                self = .ciXcodeVersion(value)
            } else if let value = try? container.decode(CiMacOsVersion.self) {
                self = .ciMacOsVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            case .ciXcodeVersion(let value): try container.encode(value)
            case .ciMacOsVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: [CiWorkflow], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct CiWorkflowResponse: Codable {
    /// CiWorkflow
    public var data: CiWorkflow
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case scmRepository(ScmRepository)
        case ciXcodeVersion(CiXcodeVersion)
        case ciMacOsVersion(CiMacOsVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else if let value = try? container.decode(CiXcodeVersion.self) {
                self = .ciXcodeVersion(value)
            } else if let value = try? container.decode(CiMacOsVersion.self) {
                self = .ciMacOsVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            case .ciXcodeVersion(let value): try container.encode(value)
            case .ciMacOsVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: CiWorkflow, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct CiWorkflowCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case ciWorkflows
        }

        public struct Attributes: Codable {
            public var name: String
            public var description: String
            public var branchStartCondition: CiBranchStartCondition?
            public var tagStartCondition: CiTagStartCondition?
            public var pullRequestStartCondition: CiPullRequestStartCondition?
            public var scheduledStartCondition: CiScheduledStartCondition?
            public var actions: [CiAction]
            public var isEnabled: Bool
            public var isLockedForEditing: Bool?
            public var isClean: Bool
            public var containerFilePath: String

            public init(name: String, description: String, branchStartCondition: CiBranchStartCondition? = nil, tagStartCondition: CiTagStartCondition? = nil, pullRequestStartCondition: CiPullRequestStartCondition? = nil, scheduledStartCondition: CiScheduledStartCondition? = nil, actions: [CiAction], isEnabled: Bool, isLockedForEditing: Bool? = nil, isClean: Bool, containerFilePath: String) {
                self.name = name
                self.description = description
                self.branchStartCondition = branchStartCondition
                self.tagStartCondition = tagStartCondition
                self.pullRequestStartCondition = pullRequestStartCondition
                self.scheduledStartCondition = scheduledStartCondition
                self.actions = actions
                self.isEnabled = isEnabled
                self.isLockedForEditing = isLockedForEditing
                self.isClean = isClean
                self.containerFilePath = containerFilePath
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case branchStartCondition
                case tagStartCondition
                case pullRequestStartCondition
                case scheduledStartCondition
                case actions
                case isEnabled
                case isLockedForEditing
                case isClean = "clean"
                case containerFilePath
            }
        }

        public struct Relationships: Codable {
            public var product: Product
            public var repository: Repository
            public var xcodeVersion: XcodeVersion
            public var macOsVersion: MacOsVersion

            public struct Product: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciProducts
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Repository: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case scmRepositories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct XcodeVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciXcodeVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct MacOsVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciMacOsVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(product: Product, repository: Repository, xcodeVersion: XcodeVersion, macOsVersion: MacOsVersion) {
                self.product = product
                self.repository = repository
                self.xcodeVersion = xcodeVersion
                self.macOsVersion = macOsVersion
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiWorkflowUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case ciWorkflows
        }

        public struct Attributes: Codable {
            public var name: String?
            public var description: String?
            public var branchStartCondition: CiBranchStartCondition?
            public var tagStartCondition: CiTagStartCondition?
            public var pullRequestStartCondition: CiPullRequestStartCondition?
            public var scheduledStartCondition: CiScheduledStartCondition?
            public var actions: [CiAction]?
            public var isEnabled: Bool?
            public var isLockedForEditing: Bool?
            public var isClean: Bool?
            public var containerFilePath: String?

            public init(name: String? = nil, description: String? = nil, branchStartCondition: CiBranchStartCondition? = nil, tagStartCondition: CiTagStartCondition? = nil, pullRequestStartCondition: CiPullRequestStartCondition? = nil, scheduledStartCondition: CiScheduledStartCondition? = nil, actions: [CiAction]? = nil, isEnabled: Bool? = nil, isLockedForEditing: Bool? = nil, isClean: Bool? = nil, containerFilePath: String? = nil) {
                self.name = name
                self.description = description
                self.branchStartCondition = branchStartCondition
                self.tagStartCondition = tagStartCondition
                self.pullRequestStartCondition = pullRequestStartCondition
                self.scheduledStartCondition = scheduledStartCondition
                self.actions = actions
                self.isEnabled = isEnabled
                self.isLockedForEditing = isLockedForEditing
                self.isClean = isClean
                self.containerFilePath = containerFilePath
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case description
                case branchStartCondition
                case tagStartCondition
                case pullRequestStartCondition
                case scheduledStartCondition
                case actions
                case isEnabled
                case isLockedForEditing
                case isClean = "clean"
                case containerFilePath
            }
        }

        public struct Relationships: Codable {
            public var xcodeVersion: XcodeVersion?
            public var macOsVersion: MacOsVersion?

            public struct XcodeVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciXcodeVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct MacOsVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciMacOsVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(xcodeVersion: XcodeVersion? = nil, macOsVersion: MacOsVersion? = nil) {
                self.xcodeVersion = xcodeVersion
                self.macOsVersion = macOsVersion
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiXcodeVersion: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case ciXcodeVersions
    }

    public struct Attributes: Codable {
        public var version: String?
        public var name: String?
        public var testDestinations: [TestDestination]?

        public struct TestDestination: Codable {
            public var deviceTypeName: String?
            public var deviceTypeIdentifier: String?
            public var availableRuntimes: [AvailableRuntime]?
            public var kind: CiTestDestinationKind?

            public struct AvailableRuntime: Codable {
                public var runtimeName: String?
                public var runtimeIdentifier: String?

                public init(runtimeName: String? = nil, runtimeIdentifier: String? = nil) {
                    self.runtimeName = runtimeName
                    self.runtimeIdentifier = runtimeIdentifier
                }
            }

            public init(deviceTypeName: String? = nil, deviceTypeIdentifier: String? = nil, availableRuntimes: [AvailableRuntime]? = nil, kind: CiTestDestinationKind? = nil) {
                self.deviceTypeName = deviceTypeName
                self.deviceTypeIdentifier = deviceTypeIdentifier
                self.availableRuntimes = availableRuntimes
                self.kind = kind
            }
        }

        public init(version: String? = nil, name: String? = nil, testDestinations: [TestDestination]? = nil) {
            self.version = version
            self.name = name
            self.testDestinations = testDestinations
        }
    }

    public struct Relationships: Codable {
        public var macOsVersions: MacOsVersions?

        public struct MacOsVersions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciMacOsVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(macOsVersions: MacOsVersions? = nil) {
            self.macOsVersions = macOsVersions
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct CiXcodeVersionsResponse: Codable {
    public var data: [CiXcodeVersion]
    public var included: [CiMacOsVersion]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [CiXcodeVersion], included: [CiMacOsVersion]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct CiXcodeVersionResponse: Codable {
    /// CiXcodeVersion
    public var data: CiXcodeVersion
    public var included: [CiMacOsVersion]?
    public var links: DocumentLinks

    public init(data: CiXcodeVersion, included: [CiMacOsVersion]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct Device: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case devices
    }

    public struct Attributes: Codable {
        public var name: String?
        public var platform: BundleIDPlatform?
        public var udid: String?
        public var deviceClass: DeviceClass?
        public var status: Status?
        public var model: String?
        public var addedDate: Date?

        public enum DeviceClass: String, Codable, CaseIterable {
            case appleWatch = "APPLE_WATCH"
            case ipad = "IPAD"
            case iphone = "IPHONE"
            case ipod = "IPOD"
            case appleTv = "APPLE_TV"
            case mac = "MAC"
        }

        public enum Status: String, Codable, CaseIterable {
            case enabled = "ENABLED"
            case disabled = "DISABLED"
        }

        public init(name: String? = nil, platform: BundleIDPlatform? = nil, udid: String? = nil, deviceClass: DeviceClass? = nil, status: Status? = nil, model: String? = nil, addedDate: Date? = nil) {
            self.name = name
            self.platform = platform
            self.udid = udid
            self.deviceClass = deviceClass
            self.status = status
            self.model = model
            self.addedDate = addedDate
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct DevicesResponse: Codable {
    public var data: [Device]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [Device], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct DeviceResponse: Codable {
    /// Device
    public var data: Device
    public var links: DocumentLinks

    public init(data: Device, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct DeviceCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case devices
        }

        public struct Attributes: Codable {
            public var name: String
            public var platform: BundleIDPlatform
            public var udid: String

            public init(name: String, platform: BundleIDPlatform, udid: String) {
                self.name = name
                self.platform = platform
                self.udid = udid
            }
        }

        public init(type: `Type`, attributes: Attributes) {
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DeviceUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case devices
        }

        public struct Attributes: Codable {
            public var name: String?
            public var status: Status?

            public enum Status: String, Codable, CaseIterable {
                case enabled = "ENABLED"
                case disabled = "DISABLED"
            }

            public init(name: String? = nil, status: Status? = nil) {
                self.name = name
                self.status = status
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DiagnosticLog: Codable {
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case diagnosticLogs
    }

    public init(type: `Type`, id: String, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.links = links
    }
}

public struct DiagnosticLogsResponse: Codable {
    public var data: [DiagnosticLog]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [DiagnosticLog], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct DiagnosticSignature: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case diagnosticSignatures
    }

    public struct Attributes: Codable {
        public var diagnosticType: DiagnosticType?
        public var signature: String?
        public var weight: Double?

        public enum DiagnosticType: String, Codable, CaseIterable {
            case diskWrites = "DISK_WRITES"
        }

        public init(diagnosticType: DiagnosticType? = nil, signature: String? = nil, weight: Double? = nil) {
            self.diagnosticType = diagnosticType
            self.signature = signature
            self.weight = weight
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct DiagnosticSignaturesResponse: Codable {
    public var data: [DiagnosticSignature]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [DiagnosticSignature], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct EndUserLicenseAgreement: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case endUserLicenseAgreements
    }

    public struct Attributes: Codable {
        public var agreementText: String?

        public init(agreementText: String? = nil) {
            self.agreementText = agreementText
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var territories: Territories?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Territories: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(app: App? = nil, territories: Territories? = nil) {
            self.app = app
            self.territories = territories
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct EndUserLicenseAgreementResponse: Codable {
    /// EndUserLicenseAgreement
    public var data: EndUserLicenseAgreement
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case territory(Territory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            }
        }
    }

    public init(data: EndUserLicenseAgreement, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct EndUserLicenseAgreementCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case endUserLicenseAgreements
        }

        public struct Attributes: Codable {
            public var agreementText: String

            public init(agreementText: String) {
                self.agreementText = agreementText
            }
        }

        public struct Relationships: Codable {
            public var app: App
            public var territories: Territories

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Territories: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(app: App, territories: Territories) {
                self.app = app
                self.territories = territories
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct EndUserLicenseAgreementUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case endUserLicenseAgreements
        }

        public struct Attributes: Codable {
            public var agreementText: String?

            public init(agreementText: String? = nil) {
                self.agreementText = agreementText
            }
        }

        public struct Relationships: Codable {
            public var territories: Territories?

            public struct Territories: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(territories: Territories? = nil) {
                self.territories = territories
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct GameCenterEnabledVersion: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case gameCenterEnabledVersions
    }

    public struct Attributes: Codable {
        public var platform: Platform?
        public var versionString: String?
        public var iconAsset: ImageAsset?

        public init(platform: Platform? = nil, versionString: String? = nil, iconAsset: ImageAsset? = nil) {
            self.platform = platform
            self.versionString = versionString
            self.iconAsset = iconAsset
        }
    }

    public struct Relationships: Codable {
        public var compatibleVersions: CompatibleVersions?
        public var app: App?

        public struct CompatibleVersions: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case gameCenterEnabledVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(compatibleVersions: CompatibleVersions? = nil, app: App? = nil) {
            self.compatibleVersions = compatibleVersions
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct GameCenterEnabledVersionsResponse: Codable {
    public var data: [GameCenterEnabledVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: [GameCenterEnabledVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclaration: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case idfaDeclarations
    }

    public struct Attributes: Codable {
        public var isServesAds: Bool?
        public var isAttributesAppInstallationToPreviousAd: Bool?
        public var isAttributesActionWithPreviousAd: Bool?
        public var isHonorsLimitedAdTracking: Bool?

        public init(isServesAds: Bool? = nil, isAttributesAppInstallationToPreviousAd: Bool? = nil, isAttributesActionWithPreviousAd: Bool? = nil, isHonorsLimitedAdTracking: Bool? = nil) {
            self.isServesAds = isServesAds
            self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
            self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
            self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
        }

        private enum CodingKeys: String, CodingKey {
            case isServesAds = "servesAds"
            case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
            case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
            case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclarationResponse: Codable {
    /// IdfaDeclaration
    ///
    /// - warning: Deprecated.
    public var data: IdfaDeclaration
    public var included: [AppStoreVersion]?
    public var links: DocumentLinks

    public init(data: IdfaDeclaration, included: [AppStoreVersion]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclarationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case idfaDeclarations
        }

        public struct Attributes: Codable {
            public var isServesAds: Bool
            public var isAttributesAppInstallationToPreviousAd: Bool
            public var isAttributesActionWithPreviousAd: Bool
            public var isHonorsLimitedAdTracking: Bool

            public init(isServesAds: Bool, isAttributesAppInstallationToPreviousAd: Bool, isAttributesActionWithPreviousAd: Bool, isHonorsLimitedAdTracking: Bool) {
                self.isServesAds = isServesAds
                self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
                self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
                self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
            }

            private enum CodingKeys: String, CodingKey {
                case isServesAds = "servesAds"
                case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
                case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
                case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclarationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case idfaDeclarations
        }

        public struct Attributes: Codable {
            public var isServesAds: Bool?
            public var isAttributesAppInstallationToPreviousAd: Bool?
            public var isAttributesActionWithPreviousAd: Bool?
            public var isHonorsLimitedAdTracking: Bool?

            public init(isServesAds: Bool? = nil, isAttributesAppInstallationToPreviousAd: Bool? = nil, isAttributesActionWithPreviousAd: Bool? = nil, isHonorsLimitedAdTracking: Bool? = nil) {
                self.isServesAds = isServesAds
                self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
                self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
                self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
            }

            private enum CodingKeys: String, CodingKey {
                case isServesAds = "servesAds"
                case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
                case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
                case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct InAppPurchase: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case inAppPurchases
    }

    public struct Attributes: Codable {
        public var referenceName: String?
        public var productID: String?
        public var inAppPurchaseType: InAppPurchaseType?
        public var state: State?

        public enum InAppPurchaseType: String, Codable, CaseIterable {
            case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
            case nonConsumable = "NON_CONSUMABLE"
            case consumable = "CONSUMABLE"
            case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
            case freeSubscription = "FREE_SUBSCRIPTION"
        }

        public enum State: String, Codable, CaseIterable {
            case created = "CREATED"
            case developerSignedOff = "DEVELOPER_SIGNED_OFF"
            case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
            case deletionInProgress = "DELETION_IN_PROGRESS"
            case approved = "APPROVED"
            case deleted = "DELETED"
            case removedFromSale = "REMOVED_FROM_SALE"
            case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
            case waitingForUpload = "WAITING_FOR_UPLOAD"
            case processingContent = "PROCESSING_CONTENT"
            case replaced = "REPLACED"
            case rejected = "REJECTED"
            case waitingForScreenshot = "WAITING_FOR_SCREENSHOT"
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case missingMetadata = "MISSING_METADATA"
            case readyToSubmit = "READY_TO_SUBMIT"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        }

        public init(referenceName: String? = nil, productID: String? = nil, inAppPurchaseType: InAppPurchaseType? = nil, state: State? = nil) {
            self.referenceName = referenceName
            self.productID = productID
            self.inAppPurchaseType = inAppPurchaseType
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case referenceName
            case productID = "productId"
            case inAppPurchaseType
            case state
        }
    }

    public struct Relationships: Codable {
        public var apps: Apps?

        public struct Apps: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(apps: Apps? = nil) {
            self.apps = apps
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct InAppPurchasesResponse: Codable {
    public var data: [InAppPurchase]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [InAppPurchase], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct InAppPurchaseResponse: Codable {
    /// InAppPurchase
    public var data: InAppPurchase
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: InAppPurchase, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct PerfPowerMetric: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case perfPowerMetrics
    }

    public struct Attributes: Codable {
        public var platform: Platform?
        public var metricType: MetricType?
        public var deviceType: String?

        public enum Platform: String, Codable, CaseIterable {
            case ios = "IOS"
        }

        public enum MetricType: String, Codable, CaseIterable {
            case disk = "DISK"
            case hang = "HANG"
            case battery = "BATTERY"
            case launch = "LAUNCH"
            case memory = "MEMORY"
            case animation = "ANIMATION"
            case termination = "TERMINATION"
        }

        public init(platform: Platform? = nil, metricType: MetricType? = nil, deviceType: String? = nil) {
            self.platform = platform
            self.metricType = metricType
            self.deviceType = deviceType
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct PerfPowerMetricsResponse: Codable {
    public var data: [PerfPowerMetric]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [PerfPowerMetric], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct PrereleaseVersion: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case preReleaseVersions
    }

    public struct Attributes: Codable {
        public var version: String?
        public var platform: Platform?

        public init(version: String? = nil, platform: Platform? = nil) {
            self.version = version
            self.platform = platform
        }
    }

    public struct Relationships: Codable {
        public var builds: Builds?
        public var app: App?

        public struct Builds: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(builds: Builds? = nil, app: App? = nil) {
            self.builds = builds
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct PreReleaseVersionsResponse: Codable {
    public var data: [PrereleaseVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case build(Build)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: [PrereleaseVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct PrereleaseVersionResponse: Codable {
    /// PrereleaseVersion
    public var data: PrereleaseVersion
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case build(Build)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: PrereleaseVersion, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct Profile: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case profiles
    }

    public struct Attributes: Codable {
        public var name: String?
        public var platform: BundleIDPlatform?
        public var profileType: ProfileType?
        public var profileState: ProfileState?
        public var profileContent: String?
        public var uuid: String?
        public var createdDate: Date?
        public var expirationDate: Date?

        public enum ProfileType: String, Codable, CaseIterable {
            case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
            case iosAppStore = "IOS_APP_STORE"
            case iosAppAdhoc = "IOS_APP_ADHOC"
            case iosAppInhouse = "IOS_APP_INHOUSE"
            case macAppDevelopment = "MAC_APP_DEVELOPMENT"
            case macAppStore = "MAC_APP_STORE"
            case macAppDirect = "MAC_APP_DIRECT"
            case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
            case tvosAppStore = "TVOS_APP_STORE"
            case tvosAppAdhoc = "TVOS_APP_ADHOC"
            case tvosAppInhouse = "TVOS_APP_INHOUSE"
            case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
            case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
            case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
        }

        public enum ProfileState: String, Codable, CaseIterable {
            case active = "ACTIVE"
            case invalid = "INVALID"
        }

        public init(name: String? = nil, platform: BundleIDPlatform? = nil, profileType: ProfileType? = nil, profileState: ProfileState? = nil, profileContent: String? = nil, uuid: String? = nil, createdDate: Date? = nil, expirationDate: Date? = nil) {
            self.name = name
            self.platform = platform
            self.profileType = profileType
            self.profileState = profileState
            self.profileContent = profileContent
            self.uuid = uuid
            self.createdDate = createdDate
            self.expirationDate = expirationDate
        }
    }

    public struct Relationships: Codable {
        public var bundleID: BundleID?
        public var devices: Devices?
        public var certificates: Certificates?

        public struct BundleID: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDs = "bundleIds"
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Devices: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case devices
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct Certificates: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case certificates
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(bundleID: BundleID? = nil, devices: Devices? = nil, certificates: Certificates? = nil) {
            self.bundleID = bundleID
            self.devices = devices
            self.certificates = certificates
        }

        private enum CodingKeys: String, CodingKey {
            case bundleID = "bundleId"
            case devices
            case certificates
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct ProfilesResponse: Codable {
    public var data: [Profile]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case bundleID(BundleID)
        case device(Device)
        case certificate(Certificate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(Device.self) {
                self = .device(value)
            } else if let value = try? container.decode(Certificate.self) {
                self = .certificate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .bundleID(let value): try container.encode(value)
            case .device(let value): try container.encode(value)
            case .certificate(let value): try container.encode(value)
            }
        }
    }

    public init(data: [Profile], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct ProfileResponse: Codable {
    /// Profile
    public var data: Profile
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case bundleID(BundleID)
        case device(Device)
        case certificate(Certificate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(Device.self) {
                self = .device(value)
            } else if let value = try? container.decode(Certificate.self) {
                self = .certificate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .bundleID(let value): try container.encode(value)
            case .device(let value): try container.encode(value)
            case .certificate(let value): try container.encode(value)
            }
        }
    }

    public init(data: Profile, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct ProfileCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case profiles
        }

        public struct Attributes: Codable {
            public var name: String
            public var profileType: ProfileType

            public enum ProfileType: String, Codable, CaseIterable {
                case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
                case iosAppStore = "IOS_APP_STORE"
                case iosAppAdhoc = "IOS_APP_ADHOC"
                case iosAppInhouse = "IOS_APP_INHOUSE"
                case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                case macAppStore = "MAC_APP_STORE"
                case macAppDirect = "MAC_APP_DIRECT"
                case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
                case tvosAppStore = "TVOS_APP_STORE"
                case tvosAppAdhoc = "TVOS_APP_ADHOC"
                case tvosAppInhouse = "TVOS_APP_INHOUSE"
                case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
                case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
                case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
            }

            public init(name: String, profileType: ProfileType) {
                self.name = name
                self.profileType = profileType
            }
        }

        public struct Relationships: Codable {
            public var bundleID: BundleID
            public var devices: Devices?
            public var certificates: Certificates

            public struct BundleID: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case bundleIDs = "bundleIds"
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Devices: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case devices
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Certificates: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case certificates
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(bundleID: BundleID, devices: Devices? = nil, certificates: Certificates) {
                self.bundleID = bundleID
                self.devices = devices
                self.certificates = certificates
            }

            private enum CodingKeys: String, CodingKey {
                case bundleID = "bundleId"
                case devices
                case certificates
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmissionItem: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case reviewSubmissionItems
    }

    public struct Attributes: Codable {
        public var state: State?

        public enum State: String, Codable, CaseIterable {
            case readyForReview = "READY_FOR_REVIEW"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case rejected = "REJECTED"
            case removed = "REMOVED"
        }

        public init(state: State? = nil) {
            self.state = state
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?
        public var appCustomProductPageVersion: AppCustomProductPageVersion?
        public var appStoreVersionExperiment: AppStoreVersionExperiment?
        public var appEvent: AppEvent?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppCustomProductPageVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreVersionExperiment: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppEvent: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEvents
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil, appCustomProductPageVersion: AppCustomProductPageVersion? = nil, appStoreVersionExperiment: AppStoreVersionExperiment? = nil, appEvent: AppEvent? = nil) {
            self.appStoreVersion = appStoreVersion
            self.appCustomProductPageVersion = appCustomProductPageVersion
            self.appStoreVersionExperiment = appStoreVersionExperiment
            self.appEvent = appEvent
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct ReviewSubmissionItemsResponse: Codable {
    public var data: [ReviewSubmissionItem]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appEvent(AppEvent)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            }
        }
    }

    public init(data: [ReviewSubmissionItem], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct ReviewSubmissionItemResponse: Codable {
    /// ReviewSubmissionItem
    public var data: ReviewSubmissionItem
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appEvent(AppEvent)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            }
        }
    }

    public init(data: ReviewSubmissionItem, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct ReviewSubmissionItemCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissionItems
        }

        public struct Relationships: Codable {
            public var reviewSubmission: ReviewSubmission
            public var appStoreVersion: AppStoreVersion?
            public var appCustomProductPageVersion: AppCustomProductPageVersion?
            public var appStoreVersionExperiment: AppStoreVersionExperiment?
            public var appEvent: AppEvent?

            public struct ReviewSubmission: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case reviewSubmissions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppStoreVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppStoreVersionExperiment: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperiments
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppEvent: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEvents
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(reviewSubmission: ReviewSubmission, appStoreVersion: AppStoreVersion? = nil, appCustomProductPageVersion: AppCustomProductPageVersion? = nil, appStoreVersionExperiment: AppStoreVersionExperiment? = nil, appEvent: AppEvent? = nil) {
                self.reviewSubmission = reviewSubmission
                self.appStoreVersion = appStoreVersion
                self.appCustomProductPageVersion = appCustomProductPageVersion
                self.appStoreVersionExperiment = appStoreVersionExperiment
                self.appEvent = appEvent
            }
        }

        public init(type: `Type`, relationships: Relationships) {
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmissionItemUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissionItems
        }

        public struct Attributes: Codable {
            public var isResolved: Bool?
            public var isRemoved: Bool?

            public init(isResolved: Bool? = nil, isRemoved: Bool? = nil) {
                self.isResolved = isResolved
                self.isRemoved = isRemoved
            }

            private enum CodingKeys: String, CodingKey {
                case isResolved = "resolved"
                case isRemoved = "removed"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmission: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case reviewSubmissions
    }

    public struct Attributes: Codable {
        public var platform: Platform?
        public var submittedDate: Date?
        public var state: State?

        public enum State: String, Codable, CaseIterable {
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case unresolvedIssues = "UNRESOLVED_ISSUES"
            case canceling = "CANCELING"
            case completing = "COMPLETING"
            case complete = "COMPLETE"
        }

        public init(platform: Platform? = nil, submittedDate: Date? = nil, state: State? = nil) {
            self.platform = platform
            self.submittedDate = submittedDate
            self.state = state
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var items: Items?
        public var appStoreVersionForReview: AppStoreVersionForReview?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Items: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case reviewSubmissionItems
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppStoreVersionForReview: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil, items: Items? = nil, appStoreVersionForReview: AppStoreVersionForReview? = nil) {
            self.app = app
            self.items = items
            self.appStoreVersionForReview = appStoreVersionForReview
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct ReviewSubmissionsResponse: Codable {
    public var data: [ReviewSubmission]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case reviewSubmissionItem(ReviewSubmissionItem)
        case appStoreVersion(AppStoreVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(ReviewSubmissionItem.self) {
                self = .reviewSubmissionItem(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .reviewSubmissionItem(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: [ReviewSubmission], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct ReviewSubmissionResponse: Codable {
    /// ReviewSubmission
    public var data: ReviewSubmission
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case reviewSubmissionItem(ReviewSubmissionItem)
        case appStoreVersion(AppStoreVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(ReviewSubmissionItem.self) {
                self = .reviewSubmissionItem(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .reviewSubmissionItem(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: ReviewSubmission, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct ReviewSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissions
        }

        public struct Attributes: Codable {
            public var platform: Platform

            public init(platform: Platform) {
                self.platform = platform
            }
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmissionUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissions
        }

        public struct Attributes: Codable {
            public var isSubmitted: Bool?
            public var isCanceled: Bool?

            public init(isSubmitted: Bool? = nil, isCanceled: Bool? = nil) {
                self.isSubmitted = isSubmitted
                self.isCanceled = isCanceled
            }

            private enum CodingKeys: String, CodingKey {
                case isSubmitted = "submitted"
                case isCanceled = "canceled"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct RoutingAppCoverage: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case routingAppCoverages
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?

        public init(fileSize: Int? = nil, fileName: String? = nil, sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct RoutingAppCoverageResponse: Codable {
    /// RoutingAppCoverage
    public var data: RoutingAppCoverage
    public var included: [AppStoreVersion]?
    public var links: DocumentLinks

    public init(data: RoutingAppCoverage, included: [AppStoreVersion]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct RoutingAppCoverageCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case routingAppCoverages
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct RoutingAppCoverageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case routingAppCoverages
        }

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ScmGitReference: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case scmGitReferences
    }

    public struct Attributes: Codable {
        public var name: String?
        public var canonicalName: String?
        public var isDeleted: Bool?
        public var kind: CiGitRefKind?

        public init(name: String? = nil, canonicalName: String? = nil, isDeleted: Bool? = nil, kind: CiGitRefKind? = nil) {
            self.name = name
            self.canonicalName = canonicalName
            self.isDeleted = isDeleted
            self.kind = kind
        }
    }

    public struct Relationships: Codable {
        public var repository: Repository?

        public struct Repository: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(repository: Repository? = nil) {
            self.repository = repository
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct ScmGitReferencesResponse: Codable {
    public var data: [ScmGitReference]
    public var included: [ScmRepository]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [ScmGitReference], included: [ScmRepository]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct ScmGitReferenceResponse: Codable {
    /// ScmGitReference
    public var data: ScmGitReference
    public var included: [ScmRepository]?
    public var links: DocumentLinks

    public init(data: ScmGitReference, included: [ScmRepository]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct ScmProvider: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case scmProviders
    }

    public struct Attributes: Codable {
        public var scmProviderType: ScmProviderType?
        public var url: URL?

        public init(scmProviderType: ScmProviderType? = nil, url: URL? = nil) {
            self.scmProviderType = scmProviderType
            self.url = url
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct ScmProvidersResponse: Codable {
    public var data: [ScmProvider]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [ScmProvider], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct ScmProviderResponse: Codable {
    /// ScmProvider
    public var data: ScmProvider
    public var links: DocumentLinks

    public init(data: ScmProvider, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct ScmPullRequest: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case scmPullRequests
    }

    public struct Attributes: Codable {
        public var title: String?
        public var number: Int?
        public var webURL: URL?
        public var sourceRepositoryOwner: String?
        public var sourceRepositoryName: String?
        public var sourceBranchName: String?
        public var destinationRepositoryOwner: String?
        public var destinationRepositoryName: String?
        public var destinationBranchName: String?
        public var isClosed: Bool?
        public var isCrossRepository: Bool?

        public init(title: String? = nil, number: Int? = nil, webURL: URL? = nil, sourceRepositoryOwner: String? = nil, sourceRepositoryName: String? = nil, sourceBranchName: String? = nil, destinationRepositoryOwner: String? = nil, destinationRepositoryName: String? = nil, destinationBranchName: String? = nil, isClosed: Bool? = nil, isCrossRepository: Bool? = nil) {
            self.title = title
            self.number = number
            self.webURL = webURL
            self.sourceRepositoryOwner = sourceRepositoryOwner
            self.sourceRepositoryName = sourceRepositoryName
            self.sourceBranchName = sourceBranchName
            self.destinationRepositoryOwner = destinationRepositoryOwner
            self.destinationRepositoryName = destinationRepositoryName
            self.destinationBranchName = destinationBranchName
            self.isClosed = isClosed
            self.isCrossRepository = isCrossRepository
        }

        private enum CodingKeys: String, CodingKey {
            case title
            case number
            case webURL = "webUrl"
            case sourceRepositoryOwner
            case sourceRepositoryName
            case sourceBranchName
            case destinationRepositoryOwner
            case destinationRepositoryName
            case destinationBranchName
            case isClosed
            case isCrossRepository
        }
    }

    public struct Relationships: Codable {
        public var repository: Repository?

        public struct Repository: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(repository: Repository? = nil) {
            self.repository = repository
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct ScmPullRequestsResponse: Codable {
    public var data: [ScmPullRequest]
    public var included: [ScmRepository]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [ScmPullRequest], included: [ScmRepository]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct ScmPullRequestResponse: Codable {
    /// ScmPullRequest
    public var data: ScmPullRequest
    public var included: [ScmRepository]?
    public var links: DocumentLinks

    public init(data: ScmPullRequest, included: [ScmRepository]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct ScmRepository: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case scmRepositories
    }

    public struct Attributes: Codable {
        public var lastAccessedDate: Date?
        public var httpCloneURL: URL?
        public var sshCloneURL: URL?
        public var ownerName: String?
        public var repositoryName: String?

        public init(lastAccessedDate: Date? = nil, httpCloneURL: URL? = nil, sshCloneURL: URL? = nil, ownerName: String? = nil, repositoryName: String? = nil) {
            self.lastAccessedDate = lastAccessedDate
            self.httpCloneURL = httpCloneURL
            self.sshCloneURL = sshCloneURL
            self.ownerName = ownerName
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case lastAccessedDate
            case httpCloneURL = "httpCloneUrl"
            case sshCloneURL = "sshCloneUrl"
            case ownerName
            case repositoryName
        }
    }

    public struct Relationships: Codable {
        public var scmProvider: ScmProvider?
        public var defaultBranch: DefaultBranch?

        public struct ScmProvider: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmProviders
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct DefaultBranch: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmGitReferences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(scmProvider: ScmProvider? = nil, defaultBranch: DefaultBranch? = nil) {
            self.scmProvider = scmProvider
            self.defaultBranch = defaultBranch
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct ScmRepositoriesResponse: Codable {
    public var data: [ScmRepository]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case scmProvider(ScmProvider)
        case scmGitReference(ScmGitReference)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(ScmProvider.self) {
                self = .scmProvider(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .scmProvider(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            }
        }
    }

    public init(data: [ScmRepository], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct ScmRepositoryResponse: Codable {
    /// ScmRepository
    public var data: ScmRepository
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case scmProvider(ScmProvider)
        case scmGitReference(ScmGitReference)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(ScmProvider.self) {
                self = .scmProvider(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .scmProvider(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            }
        }
    }

    public init(data: ScmRepository, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct Territory: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case territories
    }

    public struct Attributes: Codable {
        public var currency: String?

        public init(currency: String? = nil) {
            self.currency = currency
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct TerritoriesResponse: Codable {
    public var data: [Territory]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [Territory], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct TerritoryResponse: Codable {
    /// Territory
    public var data: Territory
    public var links: DocumentLinks

    public init(data: Territory, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct UserInvitation: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case userInvitations
    }

    public struct Attributes: Codable {
        public var email: String?
        public var firstName: String?
        public var lastName: String?
        public var expirationDate: Date?
        public var roles: [UserRole]?
        public var isAllAppsVisible: Bool?
        public var isProvisioningAllowed: Bool?

        public init(email: String? = nil, firstName: String? = nil, lastName: String? = nil, expirationDate: Date? = nil, roles: [UserRole]? = nil, isAllAppsVisible: Bool? = nil, isProvisioningAllowed: Bool? = nil) {
            self.email = email
            self.firstName = firstName
            self.lastName = lastName
            self.expirationDate = expirationDate
            self.roles = roles
            self.isAllAppsVisible = isAllAppsVisible
            self.isProvisioningAllowed = isProvisioningAllowed
        }

        private enum CodingKeys: String, CodingKey {
            case email
            case firstName
            case lastName
            case expirationDate
            case roles
            case isAllAppsVisible = "allAppsVisible"
            case isProvisioningAllowed = "provisioningAllowed"
        }
    }

    public struct Relationships: Codable {
        public var visibleApps: VisibleApps?

        public struct VisibleApps: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(visibleApps: VisibleApps? = nil) {
            self.visibleApps = visibleApps
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct UserInvitationsResponse: Codable {
    public var data: [UserInvitation]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [UserInvitation], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct UserInvitationResponse: Codable {
    /// UserInvitation
    public var data: UserInvitation
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: UserInvitation, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct UserInvitationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case userInvitations
        }

        public struct Attributes: Codable {
            public var email: String
            public var firstName: String
            public var lastName: String
            public var roles: [UserRole]
            public var isAllAppsVisible: Bool?
            public var isProvisioningAllowed: Bool?

            public init(email: String, firstName: String, lastName: String, roles: [UserRole], isAllAppsVisible: Bool? = nil, isProvisioningAllowed: Bool? = nil) {
                self.email = email
                self.firstName = firstName
                self.lastName = lastName
                self.roles = roles
                self.isAllAppsVisible = isAllAppsVisible
                self.isProvisioningAllowed = isProvisioningAllowed
            }

            private enum CodingKeys: String, CodingKey {
                case email
                case firstName
                case lastName
                case roles
                case isAllAppsVisible = "allAppsVisible"
                case isProvisioningAllowed = "provisioningAllowed"
            }
        }

        public struct Relationships: Codable {
            public var visibleApps: VisibleApps?

            public struct VisibleApps: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships? = nil) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct User: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case users
    }

    public struct Attributes: Codable {
        public var username: String?
        public var firstName: String?
        public var lastName: String?
        public var roles: [UserRole]?
        public var isAllAppsVisible: Bool?
        public var isProvisioningAllowed: Bool?

        public init(username: String? = nil, firstName: String? = nil, lastName: String? = nil, roles: [UserRole]? = nil, isAllAppsVisible: Bool? = nil, isProvisioningAllowed: Bool? = nil) {
            self.username = username
            self.firstName = firstName
            self.lastName = lastName
            self.roles = roles
            self.isAllAppsVisible = isAllAppsVisible
            self.isProvisioningAllowed = isProvisioningAllowed
        }

        private enum CodingKeys: String, CodingKey {
            case username
            case firstName
            case lastName
            case roles
            case isAllAppsVisible = "allAppsVisible"
            case isProvisioningAllowed = "provisioningAllowed"
        }
    }

    public struct Relationships: Codable {
        public var visibleApps: VisibleApps?

        public struct VisibleApps: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(visibleApps: VisibleApps? = nil) {
            self.visibleApps = visibleApps
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct UsersResponse: Codable {
    public var data: [User]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [User], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct UserResponse: Codable {
    /// User
    public var data: User
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: User, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct UserUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case users
        }

        public struct Attributes: Codable {
            public var roles: [UserRole]?
            public var isAllAppsVisible: Bool?
            public var isProvisioningAllowed: Bool?

            public init(roles: [UserRole]? = nil, isAllAppsVisible: Bool? = nil, isProvisioningAllowed: Bool? = nil) {
                self.roles = roles
                self.isAllAppsVisible = isAllAppsVisible
                self.isProvisioningAllowed = isProvisioningAllowed
            }

            private enum CodingKeys: String, CodingKey {
                case roles
                case isAllAppsVisible = "allAppsVisible"
                case isProvisioningAllowed = "provisioningAllowed"
            }
        }

        public struct Relationships: Codable {
            public var visibleApps: VisibleApps?

            public struct VisibleApps: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEncryptionDeclarationBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppPreviewSetAppPreviewsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppPreviewSetAppPreviewsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppScreenshotSetAppScreenshotsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppScreenshotSetAppScreenshotsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppStoreVersionAppClipDefaultExperienceLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionAppClipDefaultExperienceLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionBuildLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionBuildLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppBetaTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaGroupBetaTestersLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaGroupBetaTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaGroupBuildsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaGroupBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaTesterAppsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaTesterAppsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaTesterBetaGroupsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaTesterBetaGroupsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaTesterBuildsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaTesterBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BuildAppEncryptionDeclarationLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appEncryptionDeclarations
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BuildAppEncryptionDeclarationLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appEncryptionDeclarations
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaGroupsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BuildIndividualTestersLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BuildIndividualTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct GameCenterEnabledVersionCompatibleVersionsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case gameCenterEnabledVersions
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct GameCenterEnabledVersionCompatibleVersionsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case gameCenterEnabledVersions
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct UserVisibleAppsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct UserVisibleAppsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct ErrorResponse: Codable {
    public var errors: [Error]?

    public struct Error: Codable {
        public var id: String?
        public var status: String
        public var code: String
        public var title: String
        public var detail: String
        public var source: Source?

        public enum Source: Codable {
            case errorSourcePointer(ErrorSourcePointer)
            case errorSourceParameter(ErrorSourceParameter)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(ErrorSourcePointer.self) {
                    self = .errorSourcePointer(value)
                } else if let value = try? container.decode(ErrorSourceParameter.self) {
                    self = .errorSourceParameter(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .errorSourcePointer(let value): try container.encode(value)
                case .errorSourceParameter(let value): try container.encode(value)
                }
            }
        }

        public init(id: String? = nil, status: String, code: String, title: String, detail: String, source: Source? = nil) {
            self.id = id
            self.status = status
            self.code = code
            self.title = title
            self.detail = detail
            self.source = source
        }
    }

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Parameter
public struct ErrorSourceParameter: Codable {
    public var parameter: String?

    public init(parameter: String? = nil) {
        self.parameter = parameter
    }
}

/// JsonPointer
public struct ErrorSourcePointer: Codable {
    public var pointer: String?

    public init(pointer: String? = nil) {
        self.pointer = pointer
    }
}

public struct PagedDocumentLinks: Codable {
    public var this: String
    public var first: String?
    public var next: String?

    public init(this: String, first: String? = nil, next: String? = nil) {
        self.this = this
        self.first = first
        self.next = next
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case first
        case next
    }
}

public struct PagingInformation: Codable {
    public var paging: Paging

    public struct Paging: Codable {
        public var total: Int?
        public var limit: Int

        public init(total: Int? = nil, limit: Int) {
            self.total = total
            self.limit = limit
        }
    }

    public init(paging: Paging) {
        self.paging = paging
    }
}

public struct DocumentLinks: Codable {
    public var this: String

    public init(this: String) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct ResourceLinks: Codable {
    public var this: String

    public init(this: String) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public enum AppClipAction: String, Codable, CaseIterable {
    case `open` = "OPEN"
    case view = "VIEW"
    case play = "PLAY"
}

public enum AppClipAdvancedExperienceLanguage: String, Codable, CaseIterable {
    case ar = "AR"
    case ca = "CA"
    case cs = "CS"
    case da = "DA"
    case de = "DE"
    case el = "EL"
    case en = "EN"
    case es = "ES"
    case fi = "FI"
    case fr = "FR"
    case he = "HE"
    case hi = "HI"
    case hr = "HR"
    case hu = "HU"
    case id = "ID"
    case it = "IT"
    case ja = "JA"
    case ko = "KO"
    case ms = "MS"
    case nl = "NL"
    case no = "NO"
    case pl = "PL"
    case pt = "PT"
    case ro = "RO"
    case ru = "RU"
    case sk = "SK"
    case sv = "SV"
    case th = "TH"
    case tr = "TR"
    case uk = "UK"
    case vi = "VI"
    case zh = "ZH"
}

public enum AppEncryptionDeclarationState: String, Codable, CaseIterable {
    case inReview = "IN_REVIEW"
    case approved = "APPROVED"
    case rejected = "REJECTED"
    case invalid = "INVALID"
    case expired = "EXPIRED"
}

public enum AppEventAssetType: String, Codable, CaseIterable {
    case eventCard = "EVENT_CARD"
    case eventDetailsPage = "EVENT_DETAILS_PAGE"
}

public struct AppMediaAssetState: Codable {
    public var errors: [AppMediaStateError]?
    public var warnings: [AppMediaStateError]?
    public var state: State?

    public enum State: String, Codable, CaseIterable {
        case awaitingUpload = "AWAITING_UPLOAD"
        case uploadComplete = "UPLOAD_COMPLETE"
        case complete = "COMPLETE"
        case failed = "FAILED"
    }

    public init(errors: [AppMediaStateError]? = nil, warnings: [AppMediaStateError]? = nil, state: State? = nil) {
        self.errors = errors
        self.warnings = warnings
        self.state = state
    }
}

public struct AppMediaStateError: Codable {
    public var code: String?
    public var description: String?

    public init(code: String? = nil, description: String? = nil) {
        self.code = code
        self.description = description
    }
}

public enum AppStoreAgeRating: String, Codable, CaseIterable {
    case fourPlus = "FOUR_PLUS"
    case ninePlus = "NINE_PLUS"
    case twelvePlus = "TWELVE_PLUS"
    case seventeenPlus = "SEVENTEEN_PLUS"
}

public enum AppStoreVersionState: String, Codable, CaseIterable {
    case accepted = "ACCEPTED"
    case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
    case developerRejected = "DEVELOPER_REJECTED"
    case inReview = "IN_REVIEW"
    case invalidBinary = "INVALID_BINARY"
    case metadataRejected = "METADATA_REJECTED"
    case pendingAppleRelease = "PENDING_APPLE_RELEASE"
    case pendingContract = "PENDING_CONTRACT"
    case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
    case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
    case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
    case processingForAppStore = "PROCESSING_FOR_APP_STORE"
    case readyForReview = "READY_FOR_REVIEW"
    case readyForSale = "READY_FOR_SALE"
    case rejected = "REJECTED"
    case removedFromSale = "REMOVED_FROM_SALE"
    case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
    case waitingForReview = "WAITING_FOR_REVIEW"
    case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
}

public enum BetaInviteType: String, Codable, CaseIterable {
    case email = "EMAIL"
    case publicLink = "PUBLIC_LINK"
}

public enum BetaReviewState: String, Codable, CaseIterable {
    case waitingForReview = "WAITING_FOR_REVIEW"
    case inReview = "IN_REVIEW"
    case rejected = "REJECTED"
    case approved = "APPROVED"
}

public enum BrazilAgeRating: String, Codable, CaseIterable {
    case l = "L"
    case ten = "TEN"
    case twelve = "TWELVE"
    case fourteen = "FOURTEEN"
    case sixteen = "SIXTEEN"
    case eighteen = "EIGHTEEN"
}

public enum BuildAudienceType: String, Codable, CaseIterable {
    case internalOnly = "INTERNAL_ONLY"
    case appStoreEligible = "APP_STORE_ELIGIBLE"
}

public enum BundleIDPlatform: String, Codable, CaseIterable {
    case ios = "IOS"
    case macOs = "MAC_OS"
}

public struct CapabilityOption: Codable {
    public var key: Key?
    public var name: String?
    public var description: String?
    public var isEnabledByDefault: Bool?
    public var isEnabled: Bool?
    public var isSupportsWildcard: Bool?

    public enum Key: String, Codable, CaseIterable {
        case xcode5 = "XCODE_5"
        case xcode6 = "XCODE_6"
        case completeProtection = "COMPLETE_PROTECTION"
        case protectedUnlessOpen = "PROTECTED_UNLESS_OPEN"
        case protectedUntilFirstUserAuth = "PROTECTED_UNTIL_FIRST_USER_AUTH"
        case primaryAppConsent = "PRIMARY_APP_CONSENT"
    }

    public init(key: Key? = nil, name: String? = nil, description: String? = nil, isEnabledByDefault: Bool? = nil, isEnabled: Bool? = nil, isSupportsWildcard: Bool? = nil) {
        self.key = key
        self.name = name
        self.description = description
        self.isEnabledByDefault = isEnabledByDefault
        self.isEnabled = isEnabled
        self.isSupportsWildcard = isSupportsWildcard
    }

    private enum CodingKeys: String, CodingKey {
        case key
        case name
        case description
        case isEnabledByDefault = "enabledByDefault"
        case isEnabled = "enabled"
        case isSupportsWildcard = "supportsWildcard"
    }
}

public struct CapabilitySetting: Codable {
    public var key: Key?
    public var name: String?
    public var description: String?
    public var isEnabledByDefault: Bool?
    public var isVisible: Bool?
    public var allowedInstances: AllowedInstances?
    public var minInstances: Int?
    public var options: [CapabilityOption]?

    public enum Key: String, Codable, CaseIterable {
        case icloudVersion = "ICLOUD_VERSION"
        case dataProtectionPermissionLevel = "DATA_PROTECTION_PERMISSION_LEVEL"
        case appleIDAuthAppConsent = "APPLE_ID_AUTH_APP_CONSENT"
    }

    public enum AllowedInstances: String, Codable, CaseIterable {
        case entry = "ENTRY"
        case single = "SINGLE"
        case multiple = "MULTIPLE"
    }

    public init(key: Key? = nil, name: String? = nil, description: String? = nil, isEnabledByDefault: Bool? = nil, isVisible: Bool? = nil, allowedInstances: AllowedInstances? = nil, minInstances: Int? = nil, options: [CapabilityOption]? = nil) {
        self.key = key
        self.name = name
        self.description = description
        self.isEnabledByDefault = isEnabledByDefault
        self.isVisible = isVisible
        self.allowedInstances = allowedInstances
        self.minInstances = minInstances
        self.options = options
    }

    private enum CodingKeys: String, CodingKey {
        case key
        case name
        case description
        case isEnabledByDefault = "enabledByDefault"
        case isVisible = "visible"
        case allowedInstances
        case minInstances
        case options
    }
}

public enum CapabilityType: String, Codable, CaseIterable {
    case icloud = "ICLOUD"
    case inAppPurchase = "IN_APP_PURCHASE"
    case gameCenter = "GAME_CENTER"
    case pushNotifications = "PUSH_NOTIFICATIONS"
    case wallet = "WALLET"
    case interAppAudio = "INTER_APP_AUDIO"
    case maps = "MAPS"
    case associatedDomains = "ASSOCIATED_DOMAINS"
    case personalVpn = "PERSONAL_VPN"
    case appGroups = "APP_GROUPS"
    case healthkit = "HEALTHKIT"
    case homekit = "HOMEKIT"
    case wirelessAccessoryConfiguration = "WIRELESS_ACCESSORY_CONFIGURATION"
    case applePay = "APPLE_PAY"
    case dataProtection = "DATA_PROTECTION"
    case sirikit = "SIRIKIT"
    case networkExtensions = "NETWORK_EXTENSIONS"
    case multipath = "MULTIPATH"
    case hotSpot = "HOT_SPOT"
    case nfcTagReading = "NFC_TAG_READING"
    case classkit = "CLASSKIT"
    case autofillCredentialProvider = "AUTOFILL_CREDENTIAL_PROVIDER"
    case accessWifiInformation = "ACCESS_WIFI_INFORMATION"
    case networkCustomProtocol = "NETWORK_CUSTOM_PROTOCOL"
    case coremediaHlsLowLatency = "COREMEDIA_HLS_LOW_LATENCY"
    case systemExtensionInstall = "SYSTEM_EXTENSION_INSTALL"
    case userManagement = "USER_MANAGEMENT"
    case appleIDAuth = "APPLE_ID_AUTH"
}

public enum CertificateType: String, Codable, CaseIterable {
    case iosDevelopment = "IOS_DEVELOPMENT"
    case iosDistribution = "IOS_DISTRIBUTION"
    case macAppDistribution = "MAC_APP_DISTRIBUTION"
    case macInstallerDistribution = "MAC_INSTALLER_DISTRIBUTION"
    case macAppDevelopment = "MAC_APP_DEVELOPMENT"
    case developerIDKext = "DEVELOPER_ID_KEXT"
    case developerIDApplication = "DEVELOPER_ID_APPLICATION"
    case development = "DEVELOPMENT"
    case distribution = "DISTRIBUTION"
    case passTypeID = "PASS_TYPE_ID"
    case passTypeIDWithNfc = "PASS_TYPE_ID_WITH_NFC"
}

public struct CiAction: Codable {
    public var name: String?
    public var actionType: CiActionType?
    public var destination: Destination?
    public var buildDistributionAudience: BuildAudienceType?
    public var testConfiguration: TestConfiguration?
    public var scheme: String?
    public var platform: Platform?
    public var isRequiredToPass: Bool?

    public enum Destination: String, Codable, CaseIterable {
        case anyIosDevice = "ANY_IOS_DEVICE"
        case anyIosSimulator = "ANY_IOS_SIMULATOR"
        case anyTvosDevice = "ANY_TVOS_DEVICE"
        case anyTvosSimulator = "ANY_TVOS_SIMULATOR"
        case anyWatchosDevice = "ANY_WATCHOS_DEVICE"
        case anyWatchosSimulator = "ANY_WATCHOS_SIMULATOR"
        case anyMac = "ANY_MAC"
        case anyMacCatalyst = "ANY_MAC_CATALYST"
    }

    public struct TestConfiguration: Codable {
        public var kind: Kind?
        public var testPlanName: String?
        public var testDestinations: [CiTestDestination]?

        public enum Kind: String, Codable, CaseIterable {
            case useSchemeSettings = "USE_SCHEME_SETTINGS"
            case specificTestPlans = "SPECIFIC_TEST_PLANS"
        }

        public init(kind: Kind? = nil, testPlanName: String? = nil, testDestinations: [CiTestDestination]? = nil) {
            self.kind = kind
            self.testPlanName = testPlanName
            self.testDestinations = testDestinations
        }
    }

    public enum Platform: String, Codable, CaseIterable {
        case macos = "MACOS"
        case ios = "IOS"
        case tvos = "TVOS"
        case watchos = "WATCHOS"
    }

    public init(name: String? = nil, actionType: CiActionType? = nil, destination: Destination? = nil, buildDistributionAudience: BuildAudienceType? = nil, testConfiguration: TestConfiguration? = nil, scheme: String? = nil, platform: Platform? = nil, isRequiredToPass: Bool? = nil) {
        self.name = name
        self.actionType = actionType
        self.destination = destination
        self.buildDistributionAudience = buildDistributionAudience
        self.testConfiguration = testConfiguration
        self.scheme = scheme
        self.platform = platform
        self.isRequiredToPass = isRequiredToPass
    }
}

public enum CiActionType: String, Codable, CaseIterable {
    case build = "BUILD"
    case analyze = "ANALYZE"
    case test = "TEST"
    case archive = "ARCHIVE"
}

public struct CiBranchPatterns: Codable {
    public var isAllMatch: Bool?
    public var patterns: [Pattern]?

    public struct Pattern: Codable {
        public var pattern: String?
        public var isPrefix: Bool?

        public init(pattern: String? = nil, isPrefix: Bool? = nil) {
            self.pattern = pattern
            self.isPrefix = isPrefix
        }
    }

    public init(isAllMatch: Bool? = nil, patterns: [Pattern]? = nil) {
        self.isAllMatch = isAllMatch
        self.patterns = patterns
    }
}

public struct CiBranchStartCondition: Codable {
    public var source: CiBranchPatterns?
    public var filesAndFoldersRule: CiFilesAndFoldersRule?
    public var isAutoCancel: Bool?

    public init(source: CiBranchPatterns? = nil, filesAndFoldersRule: CiFilesAndFoldersRule? = nil, isAutoCancel: Bool? = nil) {
        self.source = source
        self.filesAndFoldersRule = filesAndFoldersRule
        self.isAutoCancel = isAutoCancel
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case filesAndFoldersRule
        case isAutoCancel = "autoCancel"
    }
}

public enum CiCompletionStatus: String, Codable, CaseIterable {
    case succeeded = "SUCCEEDED"
    case failed = "FAILED"
    case errored = "ERRORED"
    case canceled = "CANCELED"
    case skipped = "SKIPPED"
}

public enum CiExecutionProgress: String, Codable, CaseIterable {
    case pending = "PENDING"
    case running = "RUNNING"
    case complete = "COMPLETE"
}

public struct CiFilesAndFoldersRule: Codable {
    public var mode: Mode?
    public var matchers: [CiStartConditionFileMatcher]?

    public enum Mode: String, Codable, CaseIterable {
        case startIfAnyFileMatches = "START_IF_ANY_FILE_MATCHES"
        case doNotStartIfAllFilesMatch = "DO_NOT_START_IF_ALL_FILES_MATCH"
    }

    public init(mode: Mode? = nil, matchers: [CiStartConditionFileMatcher]? = nil) {
        self.mode = mode
        self.matchers = matchers
    }
}

public enum CiGitRefKind: String, Codable, CaseIterable {
    case branch = "BRANCH"
    case tag = "TAG"
}

public struct CiGitUser: Codable {
    public var displayName: String?
    public var avatarURL: URL?

    public init(displayName: String? = nil, avatarURL: URL? = nil) {
        self.displayName = displayName
        self.avatarURL = avatarURL
    }

    private enum CodingKeys: String, CodingKey {
        case displayName
        case avatarURL = "avatarUrl"
    }
}

public struct CiIssueCounts: Codable {
    public var analyzerWarnings: Int?
    public var errors: Int?
    public var testFailures: Int?
    public var warnings: Int?

    public init(analyzerWarnings: Int? = nil, errors: Int? = nil, testFailures: Int? = nil, warnings: Int? = nil) {
        self.analyzerWarnings = analyzerWarnings
        self.errors = errors
        self.testFailures = testFailures
        self.warnings = warnings
    }
}

public struct CiPullRequestStartCondition: Codable {
    public var source: CiBranchPatterns?
    public var destination: CiBranchPatterns?
    public var filesAndFoldersRule: CiFilesAndFoldersRule?
    public var isAutoCancel: Bool?

    public init(source: CiBranchPatterns? = nil, destination: CiBranchPatterns? = nil, filesAndFoldersRule: CiFilesAndFoldersRule? = nil, isAutoCancel: Bool? = nil) {
        self.source = source
        self.destination = destination
        self.filesAndFoldersRule = filesAndFoldersRule
        self.isAutoCancel = isAutoCancel
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case destination
        case filesAndFoldersRule
        case isAutoCancel = "autoCancel"
    }
}

public struct CiScheduledStartCondition: Codable {
    public var source: CiBranchPatterns?
    public var schedule: Schedule?

    public struct Schedule: Codable {
        public var frequency: Frequency?
        public var days: [Day]?
        public var hour: Int?
        public var minute: Int?
        public var timezone: String?

        public enum Frequency: String, Codable, CaseIterable {
            case weekly = "WEEKLY"
            case daily = "DAILY"
            case hourly = "HOURLY"
        }

        public enum Day: String, Codable, CaseIterable {
            case sunday = "SUNDAY"
            case monday = "MONDAY"
            case tuesday = "TUESDAY"
            case wednesday = "WEDNESDAY"
            case thursday = "THURSDAY"
            case friday = "FRIDAY"
            case saturday = "SATURDAY"
        }

        public init(frequency: Frequency? = nil, days: [Day]? = nil, hour: Int? = nil, minute: Int? = nil, timezone: String? = nil) {
            self.frequency = frequency
            self.days = days
            self.hour = hour
            self.minute = minute
            self.timezone = timezone
        }
    }

    public init(source: CiBranchPatterns? = nil, schedule: Schedule? = nil) {
        self.source = source
        self.schedule = schedule
    }
}

public struct CiStartConditionFileMatcher: Codable {
    public var directory: String?
    public var fileExtension: String?
    public var fileName: String?

    public init(directory: String? = nil, fileExtension: String? = nil, fileName: String? = nil) {
        self.directory = directory
        self.fileExtension = fileExtension
        self.fileName = fileName
    }
}

public struct CiTagPatterns: Codable {
    public var isAllMatch: Bool?
    public var patterns: [Pattern]?

    public struct Pattern: Codable {
        public var pattern: String?
        public var isPrefix: Bool?

        public init(pattern: String? = nil, isPrefix: Bool? = nil) {
            self.pattern = pattern
            self.isPrefix = isPrefix
        }
    }

    public init(isAllMatch: Bool? = nil, patterns: [Pattern]? = nil) {
        self.isAllMatch = isAllMatch
        self.patterns = patterns
    }
}

public struct CiTagStartCondition: Codable {
    public var source: CiTagPatterns?
    public var filesAndFoldersRule: CiFilesAndFoldersRule?
    public var isAutoCancel: Bool?

    public init(source: CiTagPatterns? = nil, filesAndFoldersRule: CiFilesAndFoldersRule? = nil, isAutoCancel: Bool? = nil) {
        self.source = source
        self.filesAndFoldersRule = filesAndFoldersRule
        self.isAutoCancel = isAutoCancel
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case filesAndFoldersRule
        case isAutoCancel = "autoCancel"
    }
}

public struct CiTestDestination: Codable {
    public var deviceTypeName: String?
    public var deviceTypeIdentifier: String?
    public var runtimeName: String?
    public var runtimeIdentifier: String?
    public var kind: CiTestDestinationKind?

    public init(deviceTypeName: String? = nil, deviceTypeIdentifier: String? = nil, runtimeName: String? = nil, runtimeIdentifier: String? = nil, kind: CiTestDestinationKind? = nil) {
        self.deviceTypeName = deviceTypeName
        self.deviceTypeIdentifier = deviceTypeIdentifier
        self.runtimeName = runtimeName
        self.runtimeIdentifier = runtimeIdentifier
        self.kind = kind
    }
}

public enum CiTestDestinationKind: String, Codable, CaseIterable {
    case simulator = "SIMULATOR"
    case mac = "MAC"
}

public enum CiTestStatus: String, Codable, CaseIterable {
    case success = "SUCCESS"
    case failure = "FAILURE"
    case mixed = "MIXED"
    case skipped = "SKIPPED"
    case expectedFailure = "EXPECTED_FAILURE"
}

public enum ExternalBetaState: String, Codable, CaseIterable {
    case processing = "PROCESSING"
    case processingException = "PROCESSING_EXCEPTION"
    case missingExportCompliance = "MISSING_EXPORT_COMPLIANCE"
    case readyForBetaTesting = "READY_FOR_BETA_TESTING"
    case inBetaTesting = "IN_BETA_TESTING"
    case expired = "EXPIRED"
    case readyForBetaSubmission = "READY_FOR_BETA_SUBMISSION"
    case inExportComplianceReview = "IN_EXPORT_COMPLIANCE_REVIEW"
    case waitingForBetaReview = "WAITING_FOR_BETA_REVIEW"
    case inBetaReview = "IN_BETA_REVIEW"
    case betaRejected = "BETA_REJECTED"
    case betaApproved = "BETA_APPROVED"
}

public struct FileLocation: Codable {
    public var path: String?
    public var lineNumber: Int?

    public init(path: String? = nil, lineNumber: Int? = nil) {
        self.path = path
        self.lineNumber = lineNumber
    }
}

public struct HTTPHeader: Codable {
    public var name: String?
    public var value: String?

    public init(name: String? = nil, value: String? = nil) {
        self.name = name
        self.value = value
    }
}

public enum IconAssetType: String, Codable, CaseIterable {
    case appStore = "APP_STORE"
    case messagesAppStore = "MESSAGES_APP_STORE"
    case watchAppStore = "WATCH_APP_STORE"
    case tvOsHomeScreen = "TV_OS_HOME_SCREEN"
    case tvOsTopShelf = "TV_OS_TOP_SHELF"
    case alternateExperiment = "ALTERNATE_EXPERIMENT"
}

public struct ImageAsset: Codable {
    public var templateURL: String?
    public var width: Int?
    public var height: Int?

    public init(templateURL: String? = nil, width: Int? = nil, height: Int? = nil) {
        self.templateURL = templateURL
        self.width = width
        self.height = height
    }

    private enum CodingKeys: String, CodingKey {
        case templateURL = "templateUrl"
        case width
        case height
    }
}

public enum InternalBetaState: String, Codable, CaseIterable {
    case processing = "PROCESSING"
    case processingException = "PROCESSING_EXCEPTION"
    case missingExportCompliance = "MISSING_EXPORT_COMPLIANCE"
    case readyForBetaTesting = "READY_FOR_BETA_TESTING"
    case inBetaTesting = "IN_BETA_TESTING"
    case expired = "EXPIRED"
    case inExportComplianceReview = "IN_EXPORT_COMPLIANCE_REVIEW"
}

public enum KidsAgeBand: String, Codable, CaseIterable {
    case fiveAndUnder = "FIVE_AND_UNDER"
    case sixToEight = "SIX_TO_EIGHT"
    case nineToEleven = "NINE_TO_ELEVEN"
}

public enum PhasedReleaseState: String, Codable, CaseIterable {
    case inactive = "INACTIVE"
    case active = "ACTIVE"
    case paused = "PAUSED"
    case complete = "COMPLETE"
}

public enum Platform: String, Codable, CaseIterable {
    case ios = "IOS"
    case macOs = "MAC_OS"
    case tvOs = "TV_OS"
}

public enum PreviewType: String, Codable, CaseIterable {
    case iphone65 = "IPHONE_65"
    case iphone58 = "IPHONE_58"
    case iphone55 = "IPHONE_55"
    case iphone47 = "IPHONE_47"
    case iphone40 = "IPHONE_40"
    case iphone35 = "IPHONE_35"
    case ipadPro3gen129 = "IPAD_PRO_3GEN_129"
    case ipadPro3gen11 = "IPAD_PRO_3GEN_11"
    case ipadPro129 = "IPAD_PRO_129"
    case ipad105 = "IPAD_105"
    case ipad97 = "IPAD_97"
    case desktop = "DESKTOP"
    case watchSeries4 = "WATCH_SERIES_4"
    case watchSeries3 = "WATCH_SERIES_3"
    case appleTv = "APPLE_TV"
}

public struct ScmProviderType: Codable {
    public var kind: Kind?
    public var displayName: String?
    public var isOnPremise: Bool?

    public enum Kind: String, Codable, CaseIterable {
        case bitbucketCloud = "BITBUCKET_CLOUD"
        case bitbucketServer = "BITBUCKET_SERVER"
        case githubCloud = "GITHUB_CLOUD"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        case gitlabCloud = "GITLAB_CLOUD"
        case gitlabSelfManaged = "GITLAB_SELF_MANAGED"
    }

    public init(kind: Kind? = nil, displayName: String? = nil, isOnPremise: Bool? = nil) {
        self.kind = kind
        self.displayName = displayName
        self.isOnPremise = isOnPremise
    }
}

public enum ScreenshotDisplayType: String, Codable, CaseIterable {
    case appIphone65 = "APP_IPHONE_65"
    case appIphone58 = "APP_IPHONE_58"
    case appIphone55 = "APP_IPHONE_55"
    case appIphone47 = "APP_IPHONE_47"
    case appIphone40 = "APP_IPHONE_40"
    case appIphone35 = "APP_IPHONE_35"
    case appIpadPro3gen129 = "APP_IPAD_PRO_3GEN_129"
    case appIpadPro3gen11 = "APP_IPAD_PRO_3GEN_11"
    case appIpadPro129 = "APP_IPAD_PRO_129"
    case appIpad105 = "APP_IPAD_105"
    case appIpad97 = "APP_IPAD_97"
    case appDesktop = "APP_DESKTOP"
    case appWatchSeries7 = "APP_WATCH_SERIES_7"
    case appWatchSeries4 = "APP_WATCH_SERIES_4"
    case appWatchSeries3 = "APP_WATCH_SERIES_3"
    case appAppleTv = "APP_APPLE_TV"
    case imessageAppIphone65 = "IMESSAGE_APP_IPHONE_65"
    case imessageAppIphone58 = "IMESSAGE_APP_IPHONE_58"
    case imessageAppIphone55 = "IMESSAGE_APP_IPHONE_55"
    case imessageAppIphone47 = "IMESSAGE_APP_IPHONE_47"
    case imessageAppIphone40 = "IMESSAGE_APP_IPHONE_40"
    case imessageAppIpadPro3gen129 = "IMESSAGE_APP_IPAD_PRO_3GEN_129"
    case imessageAppIpadPro3gen11 = "IMESSAGE_APP_IPAD_PRO_3GEN_11"
    case imessageAppIpadPro129 = "IMESSAGE_APP_IPAD_PRO_129"
    case imessageAppIpad105 = "IMESSAGE_APP_IPAD_105"
    case imessageAppIpad97 = "IMESSAGE_APP_IPAD_97"
}

public enum SubscriptionStatusURLVersion: String, Codable, CaseIterable {
    case v1 = "V1"
    case v2 = "V2"
    case v12 = "v1"
    case v22 = "v2"
}

public struct UploadOperation: Codable {
    public var method: String?
    public var url: String?
    public var length: Int?
    public var offset: Int?
    public var requestHeaders: [HTTPHeader]?

    public init(method: String? = nil, url: String? = nil, length: Int? = nil, offset: Int? = nil, requestHeaders: [HTTPHeader]? = nil) {
        self.method = method
        self.url = url
        self.length = length
        self.offset = offset
        self.requestHeaders = requestHeaders
    }
}

public enum UserRole: String, Codable, CaseIterable {
    case admin = "ADMIN"
    case finance = "FINANCE"
    case accountHolder = "ACCOUNT_HOLDER"
    case sales = "SALES"
    case marketing = "MARKETING"
    case appManager = "APP_MANAGER"
    case developer = "DEVELOPER"
    case accessToReports = "ACCESS_TO_REPORTS"
    case customerSupport = "CUSTOMER_SUPPORT"
    case imageManager = "IMAGE_MANAGER"
    case createApps = "CREATE_APPS"
    case cloudManagedDeveloperID = "CLOUD_MANAGED_DEVELOPER_ID"
    case cloudManagedAppDistribution = "CLOUD_MANAGED_APP_DISTRIBUTION"
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
